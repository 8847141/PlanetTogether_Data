diff --git a/Functions/Setup.fn_WhereUsed.sql b/Functions/Setup.fn_WhereUsed.sql
new file mode 100644
index 0000000..0dc4092
--- /dev/null
+++ b/Functions/Setup.fn_WhereUsed.sql
@@ -0,0 +1,56 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+/*
+Author:			Bryan Eddy
+Date:			12/15/2017
+Description:	Explode upwards to find where subcomponents are used.
+Revision:		1
+Update:			n/a
+
+
+*/
+
+CREATE FUNCTION [Setup].[fn_WhereUsed] 
+(
+-- Input parameters
+   @Component varchar(100)
+)
+returns
+@WhereUsed table
+(
+   ID INTEGER  IDENTITY(1,1) NOT null,
+   Component varchar(100) ,
+   AssemblyItemNumber varchar(100) not null, 
+   ComponentItemNumber varchar(100),
+   ComponentQuantity real,
+   --ExtendedQuantityPer decimal(18,10),
+   [PrimaryUOM]  varchar(50) 
+   ,PRIMARY KEY (ID)
+)
+
+AS
+
+--CREATE INDEX IX_2 ON @WhereUsed (component)-- INCLUDE (assemblyitemnumber, ComponentItemNumber)
+BEGIN 
+      -- add current level
+   insert into @WhereUsed
+   select d.comp_item, d.item_number, d.comp_item,d.comp_qty_per,d.count_per_uom
+   from [dbo].Oracle_BOMs d
+   --GROUP BY  ComponentItemNumber, AssemblyItemNumber,ComponentItemNumber
+   WHERE comp_item = @Component --AND [EffectivityDateTo] IS NULL 
+   ;
+
+
+   -- --explode upward
+   insert into @WhereUsed
+   select c.Component, n.AssemblyItemNumber, n.ComponentItemNumber,n.ComponentQuantity *C.ComponentQuantity ,n.[PrimaryUOM]
+   from @WhereUsed c
+   cross apply setup.[fn_WhereUsed](c.AssemblyItemNumber) n
+   --GROUP BY c.Component, n.AssemblyItemNumber,n.ComponentItemNumber,n.ComponentQuantity
+   --HAVING c.AssemblyItemNumber <> n.AssemblyItemNumber
+   return
+END 
+
+GO
diff --git a/Functions/Setup.fn_WhereUsedStdAndDJ.sql b/Functions/Setup.fn_WhereUsedStdAndDJ.sql
new file mode 100644
index 0000000..9f75903
--- /dev/null
+++ b/Functions/Setup.fn_WhereUsedStdAndDJ.sql
@@ -0,0 +1,62 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+
+/*
+Author:			Bryan Eddy
+Date:			2/2/2018
+Description:	Explode upwards to find where subcomponents are used in DJ and Std boms
+Revision:		1
+Update:			n/a
+
+
+*/
+
+CREATE FUNCTION [Setup].[fn_WhereUsedStdAndDJ] 
+(
+-- Input parameters
+   @Component VARCHAR(100)
+)
+RETURNS
+@WhereUsed TABLE
+(
+   ID INTEGER  IDENTITY(1,1) NOT NULL,
+   Component VARCHAR(100) ,
+   AssemblyItemNumber VARCHAR(100) NOT NULL, 
+   ComponentItemNumber VARCHAR(100),
+   ComponentQuantity REAL,
+   --ExtendedQuantityPer decimal(18,10),
+   [PrimaryUOM]  VARCHAR(50) 
+   ,PRIMARY KEY (ID)
+)
+
+AS
+
+
+BEGIN 
+
+      -- add current level
+   INSERT INTO @WhereUsed
+   SELECT d.comp_item, d.item_number, d.comp_item,d.comp_qty_per,d.count_per_uom
+   FROM ( SELECT d.comp_item, d.item_number, d.comp_item AS ComponentItemNumber,d.comp_qty_per,d.count_per_uom
+			FROM [dbo].Oracle_BOMs d
+		UNION 
+		SELECT d.component_item, d.assembly_item, d.component_item AS ComponentItemNumber,d.quantity_per_assembly,d.count_per_uom
+			FROM [dbo].Oracle_DJ_BOM d
+		) d
+
+   WHERE comp_item = @Component 
+   ;
+
+
+   -- --explode upward
+   INSERT INTO @WhereUsed
+   SELECT c.Component, n.AssemblyItemNumber, n.ComponentItemNumber,n.ComponentQuantity *C.ComponentQuantity ,n.[PrimaryUOM]
+   FROM @WhereUsed c
+   CROSS APPLY setup.[fn_WhereUsed](c.AssemblyItemNumber) n
+
+   RETURN
+END 
+
+GO
diff --git a/Functions/dbo.fn_ExplodeBOM.sql b/Functions/dbo.fn_ExplodeBOM.sql
new file mode 100644
index 0000000..00c3788
--- /dev/null
+++ b/Functions/dbo.fn_ExplodeBOM.sql
@@ -0,0 +1,55 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+
+CREATE FUNCTION [dbo].[fn_ExplodeBOM] 
+(
+-- Input parameters
+   @FinishedGood VARCHAR(100)
+)
+RETURNS
+@BOM TABLE
+(
+   -- Returned table layout
+   FinishedGood VARCHAR(100),
+   item_number VARCHAR(100), 
+   comp_item VARCHAR(100),
+   comp_qty_per DECIMAL(18,10),
+   ExtendedQuantityPer DECIMAL(18,10),
+   primary_uom_code  VARCHAR(50),
+   BOMLevel INT NULL,
+   item_seq SMALLINT,
+   opseq SMALLINT,
+   unit_id INT NULL,
+   layer_id INT NULL,
+   count_per_uom INT,
+   alternate_designator  NVARCHAR(10),
+   FinishedGoodOpSeq smallint
+
+)
+AS
+BEGIN
+      -- add current level
+   INSERT INTO @BOM
+   SELECT G.item_number, G.item_number, comp_item, comp_qty_per, 
+    CASE WHEN G.basis_type = 'LOT' THEN comp_qty_per / Lot_Size ELSE comp_qty_per END
+   ,primary_uom_code,1, item_seq, opseq, unit_id, layer_id,
+	    COALESCE(count_per_uom,'1'),alternate_bom_designator, G.opseq
+   FROM dbo.Oracle_BOMs G INNER JOIN dbo.Oracle_Items K ON G.item_number = K.item_number  
+   WHERE G.item_number = @FinishedGood AND ( GETDATE() <= disable_date OR disable_date IS NULL)
+
+    --explode downward
+   INSERT INTO @BOM
+   SELECT c.FinishedGood, n.item_number, n.comp_item, n.comp_qty_per
+        , n.ExtendedQuantityPer * c.comp_qty_per,n.primary_uom_code,  
+		n.BOMLevel+1, n.item_seq, n.opseq,n.unit_id,n.layer_id,
+		 COALESCE(N.count_per_uom,'1'),c.alternate_designator,c.opseq
+   FROM @BOM c
+   CROSS APPLY dbo.[fn_ExplodeBOM](c.comp_item) n
+   RETURN
+END
+
+
+
+GO
diff --git a/Functions/dbo.usf_SplitString.sql b/Functions/dbo.usf_SplitString.sql
new file mode 100644
index 0000000..f6a0164
--- /dev/null
+++ b/Functions/dbo.usf_SplitString.sql
@@ -0,0 +1,50 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+CREATE FUNCTION [dbo].[usf_SplitString]
+(
+    @sString nvarchar(2048),
+    @cDelimiter nchar(1)
+)
+RETURNS 
+@tParts 
+TABLE ( part nvarchar(2048),
+		Position int)
+AS
+BEGIN
+    if @sString is null return
+    declare @iStart int,
+            @iPos int,
+			@Count int
+    if substring( @sString, 1, 1 ) = @cDelimiter 
+    begin
+        set @iStart = 2
+        insert into @tParts
+        values( null,null )
+    end
+    else 
+        set @iStart = 1
+		set @count = 1
+    while 1=1
+    begin
+
+        set @iPos = charindex( @cDelimiter, @sString, @iStart )
+        if @iPos = 0
+            set @iPos = len( @sString )+1
+        if @iPos - @iStart > 0          
+            insert into @tParts
+            values  ( substring( @sString, @iStart, @iPos-@iStart ), @count)
+        else
+            insert into @tParts
+            values( null ,null)
+        set @iStart = @iPos+1
+        if @iStart > len( @sString ) 
+            break
+		select @count = @count + 1
+    end
+	
+    RETURN
+
+END
+GO
diff --git a/RedGateDatabaseInfo.xml b/RedGateDatabaseInfo.xml
index feaa687..a6e8e82 100644
--- a/RedGateDatabaseInfo.xml
+++ b/RedGateDatabaseInfo.xml
@@ -57,7 +57,7 @@
     <DataWriteAllFilesInOneDirectory>True</DataWriteAllFilesInOneDirectory>
   </WriteToFileOptions>
   <DataFileSet>
-    <Count>26</Count>
+    <Count>29</Count>
     <DataFile>Scheduling.OperationRunType_Data.sql</DataFile>
     <DataFile>Setup.ApsSetupAttributes_Data.sql</DataFile>
     <DataFile>Setup.ApsSetupAttributeSource_Data.sql</DataFile>
@@ -84,5 +84,8 @@
     <DataFile>dbo.APS_PriorityValues_HardCoded_Data.sql</DataFile>
     <DataFile>dbo.APS_ProductLeadTimes_HardCoded_Data.sql</DataFile>
     <DataFile>dbo.APS_Resources_QC_HardCoded_Data.sql</DataFile>
+    <DataFile>Mes.ItemSetupAttributes_Data.sql</DataFile>
+    <DataFile>Mes.MachineAttributes_Data.sql</DataFile>
+    <DataFile>Setup.Department_Data.sql</DataFile>
   </DataFileSet>
 </DatabaseInformation>
\ No newline at end of file
diff --git a/Security/Schemas/Mes.sql b/Security/Schemas/Mes.sql
new file mode 100644
index 0000000..4522c76
--- /dev/null
+++ b/Security/Schemas/Mes.sql
@@ -0,0 +1,3 @@
+CREATE SCHEMA [Mes]
+AUTHORIZATION [dbo]
+GO
diff --git a/Security/Schemas/Scheduling.sql b/Security/Schemas/Scheduling.sql
new file mode 100644
index 0000000..4c60120
--- /dev/null
+++ b/Security/Schemas/Scheduling.sql
@@ -0,0 +1,15 @@
+CREATE SCHEMA [Scheduling]
+AUTHORIZATION [dbo]
+GO
+GRANT EXECUTE ON SCHEMA:: [Scheduling] TO [NAA\SPB_Scheduling_RO]
+GO
+GRANT EXECUTE ON SCHEMA:: [Scheduling] TO [NAA\SPB_Scheduling_RW]
+GO
+DENY DELETE ON SCHEMA:: [Scheduling] TO [NAA\SPB_Scheduling_RW]
+GO
+GRANT INSERT ON SCHEMA:: [Scheduling] TO [NAA\SPB_Scheduling_RW]
+GO
+GRANT SELECT ON SCHEMA:: [Scheduling] TO [NAA\SPB_Scheduling_RW]
+GO
+GRANT UPDATE ON SCHEMA:: [Scheduling] TO [NAA\SPB_Scheduling_RW]
+GO
diff --git a/Security/Schemas/Setup.sql b/Security/Schemas/Setup.sql
new file mode 100644
index 0000000..77a09b7
--- /dev/null
+++ b/Security/Schemas/Setup.sql
@@ -0,0 +1,15 @@
+CREATE SCHEMA [Setup]
+AUTHORIZATION [dbo]
+GO
+GRANT EXECUTE ON SCHEMA:: [Setup] TO [NAA\SPB_Scheduling_RO]
+GO
+GRANT EXECUTE ON SCHEMA:: [Setup] TO [NAA\SPB_Scheduling_RW]
+GO
+DENY DELETE ON SCHEMA:: [Setup] TO [NAA\SPB_Scheduling_RW]
+GO
+GRANT INSERT ON SCHEMA:: [Setup] TO [NAA\SPB_Scheduling_RW]
+GO
+GRANT SELECT ON SCHEMA:: [Setup] TO [NAA\SPB_Scheduling_RW]
+GO
+GRANT UPDATE ON SCHEMA:: [Setup] TO [NAA\SPB_Scheduling_RW]
+GO
diff --git a/Security/Users/NAA_SPB_Scheduling_RW.sql b/Security/Users/NAA_SPB_Scheduling_RW.sql
new file mode 100644
index 0000000..ffc6047
--- /dev/null
+++ b/Security/Users/NAA_SPB_Scheduling_RW.sql
@@ -0,0 +1,6 @@
+IF NOT EXISTS (SELECT * FROM master.dbo.syslogins WHERE loginname = N'NAA\SPB_Scheduling_RW')
+CREATE LOGIN [NAA\SPB_Scheduling_RW] FROM WINDOWS
+GO
+CREATE USER [NAA\SPB_Scheduling_RW] FOR LOGIN [NAA\SPB_Scheduling_RW]
+GO
+GRANT CONNECT TO [NAA\SPB_Scheduling_RW]
diff --git a/Stored Procedures/Mes.usp_GetItemAttributes.sql b/Stored Procedures/Mes.usp_GetItemAttributes.sql
new file mode 100644
index 0000000..14f37c6
--- /dev/null
+++ b/Stored Procedures/Mes.usp_GetItemAttributes.sql
@@ -0,0 +1,101 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+
+
+
+
+-- =============================================
+-- Author:      Bryan Eddy
+-- Create date: 4/23/2018
+-- Description: Procedure to get the designated attributes values for information in Mes.MachineAttributes
+-- Version:		2
+-- Update:		Added insert query to get mapped/desired AttributeNameID's fromt the setup data
+-- =============================================
+
+CREATE PROCEDURE [Mes].[usp_GetItemAttributes]
+AS
+	SET NOCOUNT ON;
+BEGIN
+
+TRUNCATE TABLE mes.ItemSetupAttributes
+
+DECLARE @ErrorNumber INT = ERROR_NUMBER();
+DECLARE @ErrorLine INT = ERROR_LINE();
+
+
+		
+	--Insert fixed time values for setup times
+	BEGIN TRY
+		BEGIN TRAN
+
+		;WITH cteAttributes
+		AS(
+			SELECT CableColor AS AttrbiuteValue, AttributeName, AttributeNameID, i.DataType, ItemNumber
+			FROM Setup.ItemAttributes CROSS APPLY Setup.ApsSetupAttributes k INNER JOIN Setup.AttributeDataType i ON i.DataTypeID = k.DataTypeID
+			WHERE AttributeNameID = 4
+
+			UNION
+
+			SELECT CAST(NominalOD AS NVARCHAR(50)) AS AttrbiuteValue, AttributeName, AttributeNameID, i.DataType, ItemNumber
+			FROM Setup.ItemAttributes CROSS APPLY Setup.ApsSetupAttributes k INNER JOIN Setup.AttributeDataType i ON i.DataTypeID = k.DataTypeID
+			WHERE AttributeNameID = 3
+
+			UNION
+
+			SELECT  CAST(FiberCount AS NVARCHAR(50)) AS AttrbiuteValue, AttributeName, AttributeNameID, i.DataType, ItemNumber
+			FROM Setup.ItemAttributes CROSS APPLY Setup.ApsSetupAttributes k INNER JOIN Setup.AttributeDataType i ON i.DataTypeID = k.DataTypeID
+			WHERE AttributeNameID = 7
+		)
+		INSERT INTO Mes.ItemSetupAttributes([Setup],MachineID,AttributeNameID,Item_Number, AttributeValue)
+		SELECT DISTINCT P.Setup, M.MachineID, K.AttributeNameID, I.item_number, K.AttrbiuteValue
+		FROM cteAttributes K INNER JOIN Setup.vRoutesUnion I ON K.ItemNumber = I.item_number 
+		INNER JOIN Setup.vMachineCapability P ON P.Setup = I.true_operation_code 
+		INNER JOIN MES.MachineAttributes M ON M.MachineID = P.MachineID AND K.AttributeNameID = M.AttributeNameID
+
+		COMMIT TRAN
+	END TRY
+	BEGIN CATCH
+		IF @@TRANCOUNT > 0
+		ROLLBACK TRANSACTION;
+ 
+		PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
+		PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));
+ 
+		THROW;
+	END CATCH;
+
+
+
+	BEGIN TRY
+		BEGIN TRAN
+			INSERT INTO Mes.ItemSetupAttributes([Setup],MachineID,AttributeNameID,Item_Number, AttributeValue)
+			SELECT DISTINCT K.SetupNumber, M.MachineID, i.AttributeNameID, r.item_number, K.AttributeValue
+			FROM Setup.vInterfaceSetupAttributes K INNER JOIN Setup.ApsSetupAttributeReference i ON i.AttributeID = K.AttributeID
+			INNER JOIN Mes.MachineAttributes M ON M.AttributeNameID = i.AttributeNameID
+			INNER JOIN Setup.vRoutesUnion r ON r.true_operation_code = K.SetupNumber
+			INNER JOIN Setup.MachineReference MR ON MR.PssMachineID = K.PssMachineID AND MR.MachineID = M.MachineID AND MR.PssProcessID = K.PssProcessID
+			LEFT JOIN Mes.ItemSetupAttributes Mes ON Mes.AttributeNameID = i.AttributeNameID 
+				AND Mes.MachineID = M.MachineID AND Mes.Item_Number = r.item_number AND K.SetupNumber = Mes.Setup
+			WHERE mes.Item_Number IS NULL 
+		COMMIT TRAN
+	END TRY
+    	BEGIN CATCH
+		IF @@TRANCOUNT > 0
+		ROLLBACK TRANSACTION;
+ 
+		PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
+		PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));
+ 
+		THROW;
+	END CATCH;
+
+        
+
+
+END
+
+
+
+GO
diff --git a/Stored Procedures/Scheduling.usp_EmailMasterAlert.sql b/Stored Procedures/Scheduling.usp_EmailMasterAlert.sql
new file mode 100644
index 0000000..2cb4fea
--- /dev/null
+++ b/Stored Procedures/Scheduling.usp_EmailMasterAlert.sql
@@ -0,0 +1,24 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+
+
+/*	Author:	Bryan Eddy
+	Date:	11/18/2017
+	Desc:	Master scheduling alert that has been added to the daily run job.	
+*/
+
+CREATE PROCEDURE [Scheduling].[usp_EmailMasterAlert]
+AS
+BEGIN
+	EXEC Scheduling. usp_EmailSchedulerMachineCapabilityIssue
+
+	EXEC [Setup].usp_EmailMissingMaterialAttribute
+
+	EXEC [Setup].[usp_EmailMissingDjSetup]
+
+	EXEC Scheduling.usp_EmailSchedulingMissingLineSpeed
+
+END
+GO
diff --git a/Stored Procedures/Scheduling.usp_EmailSchedulerMachineCapabilityIssue.sql b/Stored Procedures/Scheduling.usp_EmailSchedulerMachineCapabilityIssue.sql
new file mode 100644
index 0000000..c8f3dc9
--- /dev/null
+++ b/Stored Procedures/Scheduling.usp_EmailSchedulerMachineCapabilityIssue.sql
@@ -0,0 +1,108 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+
+
+
+
+-- =============================================
+-- Author:		Bryan Edy
+-- Create date: 10/31/2017
+-- Description:	Email notification to scheduling when an item is set to pass by scheduler but is inactive in the Setup data
+-- Version:		2
+-- Update Reason: Removed query and created Scheduling.vSchedulerMachineCapabilityIssue view for procedure to pull data from
+-- =============================================
+CREATE PROCEDURE [Scheduling].[usp_EmailSchedulerMachineCapabilityIssue] 
+AS
+BEGIN
+
+	BEGIN TRY
+		-- SET NOCOUNT ON added to prevent extra result sets from
+		-- interfering with SELECT statements.
+		SET NOCOUNT ON;
+
+	DECLARE @numRows int
+	DECLARE @Receipientlist varchar(1000)
+
+	/*Chec what can schedule against active setups being passed over.  If a setup is being passed as active, but doesn't show up on any machine 
+	then this procedure will notify the scheduler*/
+
+
+	IF OBJECT_ID(N'tempdb..#Results', N'U') IS NOT NULL
+	DROP TABLE #Results;
+	SELECT *
+	INTO #Results
+	FROM Scheduling.vSchedulerMachineCapabilityIssue
+
+	--SELECT *FROM #Results
+
+	SELECT @numRows = COUNT(*) FROM #Results
+
+	--SET @ReceipientList = (STUFF((SELECT ';' + UserEmail 
+	--						FROM tblConfiguratorUser G  INNER JOIN users.UserResponsibility  K ON  G.UserID = K.UserID
+	--  						WHERE K.ResponsibilityID = 5 FOR XML PATH('')),1,1,''))
+	--						--WHERE g.UserTypeID = 1 FOR XML PATH('')),1,1,''))
+
+	DECLARE @body1 VARCHAR(MAX)
+	DECLARE @subject VARCHAR(MAX)
+	DECLARE @query VARCHAR(MAX) = N'SELECT * FROM tempdb..#Results;'
+	SET @subject = 'Inactive Setups' 
+	SET @body1 = 'There are  ' + CAST(@numRows AS NVARCHAR) + ' setup(s) active from Setup System that are not scheduling due to Scheduling Active flag.' +CHAR(13)+CHAR(13)
+
+	DECLARE @tableHTML  NVARCHAR(MAX) ;
+	IF @numRows > 0
+
+		BEGIN
+	
+					SET @tableHTML =
+						N'<H1>Inactive setups with active scheduling capability.</H1>' +
+						N'<p>'+@body1+'</p>' +
+						N'<p class=MsoNormal><span style=''font-size:11.0pt;font-family:"Calibri","sans-serif";color:#1F497D''>'+
+						N'<table border="1">' +
+						N'<tr><th>Setup</th><th>MachineID</th><th>Machine</th>' +
+						N'<th>Active Setup</th><th>Active Scheduling</th>'+
+						N'<th>Altered By</th><th>Date Altered</th>'+
+						'</tr>' +
+						CAST ( ( SELECT		td=Setup,       '',
+											td=MachineID, '',
+											td=MachineName, '',
+											td=ActiveSetup, '',
+											td=ActiveScheduling, '',
+											td=ActiveStatusChangedBy, '',
+											td=ActiveStatusChangedDate,''
+									FROM #Results 
+								  FOR XML PATH('tr'), TYPE 
+						) AS NVARCHAR(MAX) ) +
+						N'</table>' ;
+					--SET @tableHTML =
+					--	N'<H1>Premise Cut Sheet Approval</H1>' +
+					--	N'<p>'+@body1+'</p>' +
+					--	N'</table>' ;
+		
+					EXEC msdb.dbo.sp_send_dbmail 
+					@recipients='Jeff.Gilfillan@aflglobal.com; Rich.DiDonato@aflglobal.com',
+					--@recipients='Bryan.Eddy@aflglobal.com',
+					@blind_copy_recipients = 'Bryan.Eddy@aflglobal.com',
+					@subject = @subject,
+					@body = @tableHTML,
+					@body_format = 'HTML';
+
+
+
+		END
+	END TRY
+	BEGIN CATCH
+ 
+		DECLARE @ErrorNumber INT = ERROR_NUMBER();
+		DECLARE @ErrorLine INT = ERROR_LINE();
+ 
+		PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
+		PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));
+ 
+		THROW;
+	END CATCH
+END
+
+
+GO
diff --git a/Stored Procedures/Scheduling.usp_EmailSchedulingMissingLineSpeed.sql b/Stored Procedures/Scheduling.usp_EmailSchedulingMissingLineSpeed.sql
new file mode 100644
index 0000000..67cfe9b
--- /dev/null
+++ b/Stored Procedures/Scheduling.usp_EmailSchedulingMissingLineSpeed.sql
@@ -0,0 +1,197 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+
+
+
+-- =============================================
+-- Author:		Bryan Eddy
+-- ALTER date: 6/12/17
+-- Description:	Send email of missing line speeds to Process Engineers
+-- Version:		9
+-- Update:		Removed the Q & K operations from being filtered.  Changed to filtering out "INSPEC" operations.
+-- =============================================
+CREATE PROC [Scheduling].[usp_EmailSchedulingMissingLineSpeed]
+
+AS
+
+
+
+SET NOCOUNT ON;
+
+
+/*******************************************************************
+First query is to determine what setups are either not present in the setup database or
+what setups are shutoff in the setup db that is in active items.
+All setups in query following are in activec items.
+*********************************************************************
+**********************************************************************/
+
+
+/*******************************************************************
+Query is to determine what items have no run speed in the setup db.
+*********************************************************************
+**********************************************************************/
+
+	
+	IF OBJECT_ID(N'tempdb..#SetupLocation', N'U') IS NOT NULL
+	DROP TABLE #SetupLocation;
+	WITH cteMissingSetups
+	AS(
+		--SELECT DISTINCT K.AssemblyItemNumber AS Item,K.Component AS Component, G.Setup, G.department_code,G.alternate_routing_designator
+		--FROM Setup.vMissingSetups G CROSS APPLY setup.fn_WhereUsed(item) K
+		--UNION 
+		SELECT  Item ,Item AS Component, Setup, department_code, alternate_routing_designator
+		FROM Setup.vMissingSetups
+	)
+	SELECT *
+	INTO #SetupLocation 
+	FROM cteMissingSetups
+    
+
+
+/*******************************************************************
+Determine what items and sub-items are located in open orders.
+*********************************************************************
+**********************************************************************/
+
+
+	
+	IF OBJECT_ID(N'tempdb..#OpenOrders', N'U') IS NOT NULL
+	DROP TABLE #OpenOrders;
+	WITH cteOrders
+	AS(
+		SELECT DISTINCT [Item Number] ItemNumber, [Item Description] ItemDesc,[Schedule Date] need_by_date, [Sales Order] SalesOrder, [Line No] SalesOrderLineNumber
+		FROM [NAASPB-PRD04\SQL2014].Premise.dbo.AFLPRD_ORDDTLREPT_UPLOAD_CAB
+		UNION
+		SELECT DISTINCT assembly_item, i.item_description, need_by_date, order_number, line_number
+		FROM Scheduling.vOracleOrders INNER JOIN dbo.Oracle_Items i ON i.item_number = assembly_item
+	)
+	SELECT *
+	INTO #OpenOrders
+	FROM cteOrders
+
+
+
+--Check if any open item requests need commercial approval
+IF OBJECT_ID(N'tempdb..#Results', N'U') IS NOT NULL
+DROP TABLE #Results;
+;WITH cteMissingSetupOrders
+as(	
+	SELECT DISTINCT FinishedGood,K.Item,i.ItemDesc, need_by_date, B.item_number, Setup, Make_Buy, alternate_routing_designator AS PrimaryAlt
+	, K.department_code, i.SalesOrder,SalesOrderLineNumber
+	, MIN(need_by_date) OVER (PARTITION BY Setup) Max_SechuduleDate--, ROW_NUMBER() OVER (PARTITION BY Setup ORDER BY setup,G.FinishedGood) RowNumber
+	FROM #OpenOrders i CROSS APPLY fn_ExplodeBOM(i.ItemNumber) G
+	INNER JOIN #SetupLocation K ON g.item_number = K.Item
+	INNER JOIN dbo.Oracle_Items B ON B.item_number = K.ITEM 
+	WHERE B.Make_Buy = 'MAKE'  and left(ITEM,3) NOT in ('WTC','DNT')
+	and LEFT(setup,1) not in ('O','I') and setup not in ('R696','R093','PQC','pk01','SK01') AND setup NOT LIKE 'm00[4-9]'
+	AND K.department_code NOT LIKE '%INSPEC%'
+	) 
+	,cteConsolidatedMissingSetupOrders
+	AS(
+		SELECT *, COUNT(SalesOrder) OVER (PARTITION BY cteMissingSetupOrders.Setup) SoLinesMissingSetups--Determine the amount of sales order affected by missing setups
+		FROM cteMissingSetupOrders
+		--WHERE	
+	)
+SELECT DISTINCT FinishedGood,Item,ItemDesc, CAST(need_by_date AS DATE) need_by_date, item_number, Setup, PrimaryAlt,department_code, SoLinesMissingSetups
+INTO #Results
+FROM cteConsolidatedMissingSetupOrders
+WHERE Max_SechuduleDate = need_by_date
+
+--SELECT *
+--FROM #Results
+
+
+--Add new missing setups
+INSERT INTO setup.MissingSetups(Setup)
+SELECT DISTINCT G.Setup
+FROM #Results G LEFT JOIN setup.MissingSetups K ON K.Setup = G.Setup
+WHERE K.Setup IS NULL
+
+--Update existing records with the most recent date of the apperance
+UPDATE K
+SET K.DateMostRecentAppearance = GETDATE()
+FROM setup.MissingSetups K INNER JOIN	#Results J ON K.Setup = J.Setup
+
+--Results to populate the email table
+IF OBJECT_ID(N'tempdb..#FinalResults', N'U') IS NOT NULL
+DROP TABLE #FinalResults;
+SELECT J.*,DATEDIFF(dd,K.DateCreated,K.DateMostRecentAppearance) DaysMissing--, ROW_NUMBER() OVER (PARTITION BY J.Setup, J.need_by_date
+INTO #FinalResults
+FROM setup.MissingSetups K INNER JOIN	#Results J ON K.Setup = J.Setup
+ORDER BY DaysMissing DESC
+
+--SELECT *
+--FROM #FinalResults
+
+DECLARE @numRows int
+DECLARE @Receipientlist varchar(1000)
+DECLARE @BlindRecipientlist varchar(1000)
+
+SELECT @numRows = count(*) FROM #Results;
+
+
+SET @ReceipientList = (STUFF((SELECT ';' + UserEmail 
+						FROM [NAASPB-PRD04\SQL2014].premise.dbo.tblConfiguratorUser G  INNER JOIN [NAASPB-PRD04\SQL2014].premise.users.UserResponsibility  K ON  G.UserID = K.UserID
+  						WHERE K.ResponsibilityID = 1 FOR XML PATH('')),1,1,''))
+
+SET @ReceipientList = @ReceipientList +';'+ (STUFF((SELECT ';' + UserEmail 
+						FROM [NAASPB-PRD04\SQL2014].premise.dbo.tblConfiguratorUser G  INNER JOIN [NAASPB-PRD04\SQL2014].Premise.users.UserResponsibility  K ON  G.UserID = K.UserID
+  						WHERE K.ResponsibilityID = 4 FOR XML PATH('')),1,1,''))
+
+SET @BlindRecipientlist = 'Bryan.Eddy@aflglobal.com';
+
+
+DECLARE @body1 VARCHAR(MAX)
+DECLARE @subject VARCHAR(MAX)
+DECLARE @query VARCHAR(MAX) = N'SELECT * FROM tempdb..#Results;'
+SET @subject = 'Missing Setup Line Speeds for Open Orders ' + CAST(GETDATE() AS NVARCHAR)
+SET @body1 = 'There are  ' + CAST(@numRows AS NVARCHAR) + ' items that are missing setup line speeds with open orders.  Please review.' +CHAR(13)+CHAR(13)
+
+DECLARE @tableHTML  NVARCHAR(MAX) ;
+IF @numRows > 0
+BEGIN
+	
+			SET @tableHTML =
+				N'<H1>Missing Setup Line Speed Report</H1>' +
+				N'<H2 span style=''font-size:16.0pt;font-family:"Calibri","sans-serif";color:#EB3814''>Items with the setups below will be unable to schedule.</H2>' +
+				--N'<H2 style = ''color: EB3814''>' +
+				N'<p>'+@body1+'</p>' +
+				N'<p class=MsoNormal><span style=''font-size:11.0pt;font-family:"Calibri","sans-serif";color:#1F497D''>'+
+				N'<table border="1">' +
+				N'<tr>' +
+				'<th>Days Missing</th><th># Affected SO Lines</th>' +
+				'<th>FinishedGood</th><th>Item</th>' +
+				N'<th>ItemDesc</th><th>Need By Date</th>' +
+				N'<th>Setup</th><th>Atlernate</th><th>DepartmentCode</th>'+
+				'</tr>' +
+				CAST ( ( SELECT		td=DaysMissing, '',
+									td=SoLinesMissingSetups, '',
+									td=FinishedGood,    '',
+									td=Item, '',
+									td=ItemDesc, '', 
+									td=need_by_date, '',
+									td=Setup, '', 
+									td=PrimaryAlt, '',
+									td=department_code
+									
+							FROM #FinalResults 
+							ORDER BY need_by_date
+						  FOR XML PATH('tr'), TYPE 
+				) AS NVARCHAR(MAX) ) +
+				N'</table>' ;
+
+		
+			EXEC msdb.dbo.sp_send_dbmail 
+			@recipients=@ReceipientList,
+			--@recipients = 'bryan.eddy@aflglobal.com;',
+			@blind_copy_recipients =  @BlindRecipientlist, --@ReceipientList
+			@subject = @subject,
+			@body = @tableHTML,
+			@body_format = 'HTML';
+END
+
+
+GO
diff --git a/Stored Procedures/Scheduling.usp_GetNewSubinventory.sql b/Stored Procedures/Scheduling.usp_GetNewSubinventory.sql
new file mode 100644
index 0000000..25787a9
--- /dev/null
+++ b/Stored Procedures/Scheduling.usp_GetNewSubinventory.sql
@@ -0,0 +1,42 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+-- =============================================
+-- Author:		Bryan Eddy
+-- Create date: 9/14/2017
+-- Description:	Add new subinventories to the Scheduling.Subinventory table
+-- Version: 1
+-- Update:	Added error handling
+-- =============================================
+CREATE PROCEDURE [Scheduling].[usp_GetNewSubinventory] 
+
+AS
+BEGIN
+		SET NOCOUNT ON;
+
+		-- SET NOCOUNT ON added to prevent extra result sets from
+		-- interfering with SELECT statements.
+	BEGIN TRY
+		BEGIN TRAN
+			INSERT INTO Scheduling.Subinventory(SubinventoryName)
+			SELECT DISTINCT G.subinventory_code
+			FROM [dbo].[Oracle_Onhand] G LEFT JOIN Scheduling.Subinventory K ON K.SubinventoryName  = G.subinventory_code
+			WHERE K.SubinventoryName IS NULL
+		COMMIT TRAN
+	END TRY
+	BEGIN CATCH
+		IF @@TRANCOUNT > 0
+		ROLLBACK TRANSACTION;
+ 
+		DECLARE @ErrorNumber INT = ERROR_NUMBER();
+		DECLARE @ErrorLine INT = ERROR_LINE();
+ 
+		PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
+		PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));
+ 
+		THROW;
+	END CATCH
+
+END
+GO
diff --git a/Stored Procedures/Scheduling.usp_MachineCapabilitySchedulerUpdate.sql b/Stored Procedures/Scheduling.usp_MachineCapabilitySchedulerUpdate.sql
new file mode 100644
index 0000000..259e86c
--- /dev/null
+++ b/Stored Procedures/Scheduling.usp_MachineCapabilitySchedulerUpdate.sql
@@ -0,0 +1,87 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+
+
+
+
+
+
+--/****** Script for SelectTopNRows command from SSMS  ******/
+
+
+/*	Author:		Bryan Eddy
+	Date:		10/25/2017
+	Desc:		Daily update of all setups and machines for the scheduler to flag on/off
+	Version:	3
+	Update:		Changed the first query to always add new setups as active.
+*/
+CREATE PROCEDURE [Scheduling].[usp_MachineCapabilitySchedulerUpdate]
+AS
+
+	DECLARE @ErrorNumber INT = ERROR_NUMBER();
+	DECLARE @ErrorLine INT = ERROR_LINE();
+
+	 SET NOCOUNT ON;
+	 BEGIN 
+		 BEGIN TRY
+			BEGIN TRAN
+				--Get setups from Setup DB
+				INSERT INTO [Scheduling].[MachineCapabilityScheduler](Setup, MachineID, ActiveScheduling)
+				SELECT K.Setup, K.Machineid,1-- K.ActiveSetup
+				FROM [Setup].[vSetupStatus] K
+				LEFT JOIN [Scheduling].[MachineCapabilityScheduler] G  ON G.Setup = K.Setup AND g.MachineID = K.Machineid
+				WHERE g.Setup IS NULL
+			COMMIT TRAN
+		END TRY
+		BEGIN CATCH
+			IF @@TRANCOUNT > 0
+			ROLLBACK TRANSACTION;
+ 
+			PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
+			PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));
+ 
+			THROW;
+		END CATCH;
+
+		BEGIN TRY
+			BEGIN TRAN
+				--Get setups from Setup Calculation
+				INSERT INTO [Scheduling].[MachineCapabilityScheduler](Setup, MachineID, ActiveScheduling)
+				SELECT DISTINCT K.Setup, K.Machineid, 1
+				FROM Setup.vSetupStatusAll K LEFT JOIN [Scheduling].[MachineCapabilityScheduler] G  ON G.Setup = K.Setup AND g.MachineID = K.Machineid
+				WHERE g.Setup IS NULL
+			COMMIT TRAN
+		END TRY
+		BEGIN CATCH
+			IF @@TRANCOUNT > 0
+			ROLLBACK TRANSACTION;
+			PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
+			PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));
+ 
+			THROW;
+		END CATCH;
+
+		BEGIN TRY
+			BEGIN TRAN
+				--Get setups that are manually created scheduler
+				INSERT INTO [Scheduling].[MachineCapabilityScheduler](Setup, MachineID, ActiveScheduling)
+				SELECT DISTINCT K.True_Operation_Code, K.MachineID, 1
+				FROM [Scheduling].[DefinedOperationDuration] K LEFT JOIN [Scheduling].[MachineCapabilityScheduler] G  ON G.Setup = K.True_Operation_Code AND g.MachineID = K.MachineID
+				WHERE g.Setup IS NULL
+			COMMIT TRAN
+		END TRY
+		BEGIN CATCH
+			IF @@TRANCOUNT > 0
+			ROLLBACK TRANSACTION;
+			PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
+			PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));
+ 
+			THROW;
+		END CATCH
+	END;
+
+
+
+GO
diff --git a/Stored Procedures/Scheduling.usp_MasterDailyProcedureRun.sql b/Stored Procedures/Scheduling.usp_MasterDailyProcedureRun.sql
new file mode 100644
index 0000000..4801dce
--- /dev/null
+++ b/Stored Procedures/Scheduling.usp_MasterDailyProcedureRun.sql
@@ -0,0 +1,43 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+
+
+
+
+
+-- =============================================
+-- Author:		Bryan Eddy
+-- Create date: 10/6/2017
+-- Description:	Run all major operations for setup and item attributes
+-- Version: 1
+-- Update: n/a
+-- =============================================
+CREATE PROCEDURE [Scheduling].[usp_MasterDailyProcedureRun]
+AS
+
+	SET NOCOUNT ON;
+BEGIN
+	
+	EXEC dbo.usp_NormalizeRouting
+
+	EXEC dbo.usp_NormalizeRouting_DJ
+
+	EXEC [Setup].[usp_LoadFromToMatrix]
+
+	EXEC [Setup].[usp_GetItemAttributeData]
+
+	EXEC [Setup].[usp_CalculateSetupTimes]
+
+	EXEC Scheduling.usp_GetNewSubinventory
+
+	EXEC Scheduling.usp_MachineCapabilitySchedulerUpdate
+
+	EXEC [Setup].[usp_GetFiberCountByOperation] @RunType = 2
+
+END
+
+
+
+GO
diff --git a/Stored Procedures/Scheduling.usp_QueryToHtmlTable.sql b/Stored Procedures/Scheduling.usp_QueryToHtmlTable.sql
new file mode 100644
index 0000000..185feb5
--- /dev/null
+++ b/Stored Procedures/Scheduling.usp_QueryToHtmlTable.sql
@@ -0,0 +1,54 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+
+
+
+-- Description: Turns a query into a formatted HTML table. Useful for emails. 
+-- Any ORDER BY clause needs to be passed in the separate ORDER BY parameter.
+-- =============================================
+CREATE PROC [Scheduling].[usp_QueryToHtmlTable] 
+(
+  @query nvarchar(MAX), --A query to turn into HTML format. It should not include an ORDER BY clause.
+  @orderBy nvarchar(MAX) = NULL, --An optional ORDER BY clause. It should contain the words 'ORDER BY'.
+  @html nvarchar(MAX) = NULL OUTPUT --The HTML output of the procedure.
+)
+AS
+BEGIN   
+  SET NOCOUNT ON;
+
+  IF @orderBy IS NULL BEGIN
+    SET @orderBy = ''  
+  END
+
+  SET @orderBy = REPLACE(@orderBy, '''', '''''');
+
+  DECLARE @realQuery nvarchar(MAX) = '
+    DECLARE @headerRow nvarchar(MAX);
+    DECLARE @cols nvarchar(MAX);    
+
+    SELECT * INTO #dynSql FROM (' + @query + ') sub;
+
+    SELECT @cols = COALESCE(@cols + '', '''''''', '', '''') + ''['' + name + ''] AS ''''td''''''
+    FROM tempdb.sys.columns 
+    WHERE object_id = object_id(''tempdb..#dynSql'')
+    ORDER BY column_id;
+
+    SET @cols = ''SET @html = CAST(( SELECT '' + @cols + '' FROM #dynSql ' + @orderBy + ' FOR XML PATH(''''tr''''), ELEMENTS XSINIL) AS nvarchar(max))''    
+
+    EXEC sys.sp_executesql @cols, N''@html nvarchar(MAX) OUTPUT'', @html=@html OUTPUT
+
+    SELECT @headerRow = COALESCE(@headerRow + '''', '''') + ''<th>'' + name + ''</th>'' 
+    FROM tempdb.sys.columns 
+    WHERE object_id = object_id(''tempdb..#dynSql'')
+    ORDER BY column_id;
+
+    SET @headerRow = ''<tr>'' + @headerRow + ''</tr>'';
+
+    SET @html = ''<table border="1">'' + @headerRow + @html + ''</table>'';    
+    ';
+
+  EXEC sys.sp_executesql @realQuery, N'@html nvarchar(MAX) OUTPUT', @html=@html OUTPUT
+END
+GO
diff --git a/Stored Procedures/Setup.usp_CalculateSetupTimes.sql b/Stored Procedures/Setup.usp_CalculateSetupTimes.sql
new file mode 100644
index 0000000..4087627
--- /dev/null
+++ b/Stored Procedures/Setup.usp_CalculateSetupTimes.sql
@@ -0,0 +1,28 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+
+-- =============================================
+-- Author:      Bryan Eddy
+-- Create date: 8/11/2017
+-- Description: Run series of procedurse for calculating the setup time
+-- Version: 3
+-- Update: Added [usp_MachineCapabilitySchedulerUpdate] to ensure any new setups from the calculated data are passed into the MachineCapabilityScheduler
+-- =============================================
+
+CREATE PROCEDURE [Setup].[usp_CalculateSetupTimes]
+AS
+
+BEGIN
+SET NOCOUNT ON;
+	--Calculate setup information from setup data
+	EXEC setup.usp_CalculateSetupTimesFromSetupDB
+	--Caclulate setup information from oracle data
+	EXEC Setup.usp_CalculateSetupTimesFromOracle
+	--Add any missing setups to the MachineCapabilityScheduler table to ensure they aren't filtered out
+	EXEC [Scheduling].[usp_MachineCapabilitySchedulerUpdate]
+
+END
+
+GO
diff --git a/Stored Procedures/Setup.usp_CalculateSetupTimesFromOracle.sql b/Stored Procedures/Setup.usp_CalculateSetupTimesFromOracle.sql
new file mode 100644
index 0000000..ebe807c
--- /dev/null
+++ b/Stored Procedures/Setup.usp_CalculateSetupTimesFromOracle.sql
@@ -0,0 +1,395 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+
+
+
+
+
+-- =============================================
+-- Author:      Bryan Eddy
+-- Create date: 8/14/2017
+-- Description: Procedure pulls data from various Oracle points to calculate item setup times
+-- Version:		6
+-- Update:		Added insert to get DJ items missing from the setup data
+-- =============================================
+
+CREATE PROCEDURE [Setup].[usp_CalculateSetupTimesFromOracle]
+AS
+
+	SET NOCOUNT ON;
+BEGIN
+
+TRUNCATE TABLE SETUP.AttributeSetupTimeItem
+
+DECLARE @ErrorNumber INT = ERROR_NUMBER();
+DECLARE @ErrorLine INT = ERROR_LINE();
+
+
+
+	--Add to procedure to only grab the top row in case of dupblicate values
+	IF OBJECT_ID(N'tempdb..#Temp', N'U') IS NOT NULL
+	DROP TABLE #Temp;
+	WITH cteSetup
+	as(
+		SELECT DISTINCT k.item_number,true_operation_code,U.MachineGroupID,M.MachineID,R.AttributeNameID,G.comp_item, attribute_name, attribute_value, o.inventory_item_status_code, ValueTypeID
+		--,COUNT(comp_item) OVER (PARTITION BY true_operation_code, comp_item) CountOfComponent
+		FROM dbo.Oracle_Routes K INNER JOIN DBO.Oracle_BOMs G ON G.item_number = K.item_number AND G.opseq = K.operation_seq_num
+		INNER JOIN Oracle_Item_Attributes P ON P.item_number = G.comp_item
+		INNER JOIN setup.vMachineCapability M ON M.Setup = K.true_operation_code
+		INNER JOIN setup.ApsSetupAttributeReference R ON R.OracleAttribute = P.attribute_name
+		INNER JOIN [Setup].[vMachineAttributes] V ON R.AttributeNameID = V.AttributeNameID 
+		INNER JOIN SETUP.MachineNames U ON U.MachineGroupID = V.MachineGroupID AND U.MachineID = M.MachineID
+		INNER JOIN dbo.Oracle_Items O ON O.item_number = P.item_number
+		--WHERE G.alternate_bom_designator = 'primary'
+	),
+	cteDup
+	as(
+		SELECT item_number,true_operation_code,MachineGroupID,MachineID,AttributeNameID,comp_item,attribute_name,attribute_value,ValueTypeID,
+		COUNT(comp_item) OVER (PARTITION BY item_number) Countof
+		FROM cteSetup
+	)
+	SELECT DISTINCT *
+	INTO #TEMP
+	FROM cteDup
+
+	--Create index on #Temp table to speed up insert statements
+	CREATE NONCLUSTERED INDEX Temp_Index
+	ON [dbo].#temp ([attribute_name])
+	INCLUDE ([item_number],[true_operation_code],[MachineGroupID],MachineID,[AttributeNameID],[comp_item],[attribute_value],[ValueTypeID])
+
+	--SELECT DISTINCT true_operation_code, attribute_name
+	--FROM #TEMP
+	--WHERE MACHINEGROUPID = 2
+	--ORDER BY true_operation_code
+
+	--Insert jacket type for each operation with a jacket
+	BEGIN TRY
+		BEGIN TRAN
+			;WITH cteJacket
+			as(
+				SELECT *, ROW_NUMBER() OVER (PARTITION BY item_number,true_operation_Code,MachineGroupID,MachineID,AttributeNameID  ORDER BY item_number,comp_item Desc ) AS RowNumber
+				FROM #TEMP
+				WHERE attribute_name = 'JACKET' 
+			)
+
+			INSERT INTO [Setup].AttributeSetupTimeItem (Item_Number,[Setup],[MachineGroupID],MachineID,AttributeNameID,[SetupAttributeValue],[SetupTime])
+			SELECT DISTINCT item_number,true_operation_code,T.MachineGroupID,T.MachineID,T.AttributeNameID,comp_item,CASE WHEN T.ValueTypeID = 5 THEN NULL ELSE TimeValue END 
+			FROM cteJacket T LEFT JOIN setup.AttributeMatrixFixedValue K ON K.AttributeNameID = T.AttributeNameID AND  K.MachineID = T.MachineID
+			WHERE Rownumber = 1 --AND  item_number ='DNA-28547-01'
+			ORDER BY true_operation_code
+
+			COMMIT TRAN
+		END TRY
+	BEGIN CATCH
+		IF @@TRANCOUNT > 0
+		ROLLBACK TRANSACTION;
+ 
+
+ 
+		PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
+		PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));
+ 
+		THROW;
+	END CATCH;
+
+
+
+	--Insert color for each operation.
+	--Looks at color chips and compound. Color chips take precedence over compound for coloring
+	BEGIN TRY
+		BEGIN TRAN
+			;WITH cteColor
+			as(
+				SELECT K.item_number,
+                       K.true_operation_code,
+                       K.MachineGroupID,
+                       K.MachineID,
+                       K.AttributeNameID,
+                       K.comp_item,
+                       K.attribute_name,
+                       K.attribute_value,
+                       K.ValueTypeID,
+                       K.Countof, ROW_NUMBER() OVER (PARTITION BY K.item_number,true_operation_Code,MachineGroupID,MachineID,AttributeNameID   ORDER BY K.item_number,(CASE WHEN G.attribute_value = 'COLOR CHIPS' THEN 1 ELSE 0 END)  Desc ) AS RowNumber
+				,CASE WHEN G.attribute_value = 'COLOR CHIPS' THEN 1 ELSE 0 END  ColorOrder, g.attribute_value Material_Type
+				FROM #TEMP K  INNER JOIN dbo.Oracle_Item_Attributes G ON K.comp_item = G.item_number
+				WHERE K.attribute_name = 'COLOR'  AND G.attribute_name = 'MATERIAL TYPE' AND G.attribute_value IN ('COLOR CHIPS','COMPOUND')
+			)
+
+			INSERT INTO [Setup].AttributeSetupTimeItem (Item_Number,[Setup],[MachineGroupID],MachineID,AttributeNameID,[SetupAttributeValue],[SetupTime])
+			SELECT DISTINCT item_number,true_operation_code,T.MachineGroupID,T.MachineID,T.AttributeNameID,attribute_value,CASE WHEN T.ValueTypeID = 5 THEN NULL ELSE TimeValue END-- , T.ValueTypeID
+			FROM cteColor T LEFT JOIN setup.AttributeMatrixFixedValue K ON K.AttributeNameID = T.AttributeNameID AND K.MachineID = T.MachineID
+			WHERE Rownumber = 1 --AND T.MachineGroupID = 4
+			--ORDER BY true_operation_code
+		COMMIT TRAN
+	END TRY
+	BEGIN CATCH
+		IF @@TRANCOUNT > 0
+		ROLLBACK TRANSACTION;
+ 
+ 
+		PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
+		PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));
+ 
+		THROW;
+	END CATCH;
+
+
+	--Calculate aramid setup time
+	--Each end of aramid is multiplied by a time value
+	BEGIN TRY
+		BEGIN TRAN
+			;WITH cteAramid
+			as(
+				SELECT K.item_number,[Setup],MG.[MachineGroupID],M.MachineID,MG.AttributeNameID,CAST(count_per_uom AS INT) SetupAttributeValue,TimeValue * cast(count_per_uom as int) + COALESCE(Adder,0) as SetupTime--, MG.ValueTypeID
+				FROM setup.MachineGroupAttributes MG INNER JOIN setup.MachineNames M ON M.MachineGroupID = MG.MachineGroupID
+				INNER JOIN setup.vMachineCapability T ON T.MachineID = M.MachineID
+				INNER JOIN dbo.Oracle_Routes G ON G.true_operation_code = T.Setup
+				INNER JOIN dbo.Oracle_BOMs K ON K.item_number = G.item_number AND K.opseq = G.operation_seq_num AND G.alternate_routing_designator = K.alternate_bom_designator
+				INNER JOIN dbo.Oracle_Item_Attributes A ON A.item_number = K.comp_item 
+				INNER JOIN setup.ApsSetupAttributeReference R ON R.AttributeNameID = MG.AttributeNameID AND R.OracleAttribute = A.attribute_value
+				INNER JOIN setup.vAttributeMatrixUnion MU ON MU.AttributeNameID = MG.AttributeNameID AND MU.MachineGroupID = MG.MachineGroupID and mu.MachineID = t.MachineID
+				WHERE MG.ValueTypeID = 3 and k.alternate_bom_designator = 'primary' --AND K.item_number = 'o-ts-0151-02'
+			)
+			INSERT INTO [Setup].AttributeSetupTimeItem (Item_Number,[Setup],[MachineGroupID],MachineID,AttributeNameID,[SetupAttributeValue],[SetupTime])
+			SELECT item_number,Setup, MachineGroupID, MachineID, AttributeNameID, SUM(SetupAttributeValue) EndsOfAramid, SUM(SetupTime) SetupTime
+			FROM cteAramid
+			GROUP BY item_number,Setup, MachineGroupID, MachineID, AttributeNameID
+		COMMIT TRAN
+	END TRY
+	BEGIN CATCH
+		IF @@TRANCOUNT > 0
+		ROLLBACK TRANSACTION;
+ 
+ 
+		PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
+		PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));
+ 
+		THROW;
+	END CATCH;
+
+
+	--Calculate EFL gain for SS RW 
+	--Get's EFL from the Oracle specs
+	BEGIN TRY
+		BEGIN TRAN
+			;WITH cteEFL
+			AS(
+			SELECT  DISTINCT a.itemnumber,[Setup],MG.[MachineGroupID],M.MachineID,MG.AttributeNameID,COALESCE(CAST(a.TargetValue AS FLOAT),0) SetupAttributeValue,TimeValue--, a.SpecificationElement
+			,ROW_NUMBER() OVER (PARTITION BY a.itemnumber,[Setup],MG.[MachineGroupID],M.MachineID,MG.AttributeNameID ORDER BY  a.itemnumber) RowNumber
+			FROM setup.MachineGroupAttributes MG INNER JOIN setup.MachineNames M ON M.MachineGroupID = MG.MachineGroupID
+				INNER JOIN setup.vMachineCapability T ON T.MachineID = M.MachineID
+				INNER JOIN dbo.Oracle_Routes G ON G.true_operation_code = T.Setup
+				INNER JOIN [NAASPB-PRD04\SQL2014].Premise.dbo.AFLPRD_INVSysItemSpec_CAB A ON a.itemnumber = g.item_number 
+				INNER JOIN setup.ApsSetupAttributeReference R ON R.AttributeNameID = MG.AttributeNameID AND A.SpecificationElement = r.OracleAttribute
+				INNER JOIN setup.vAttributeMatrixUnion MU ON MU.AttributeNameID = MG.AttributeNameID AND MU.MachineGroupID = MG.MachineGroupID AND mu.MachineID = t.MachineID AND MG.ValueTypeID = MU.ValueTypeID
+			WHERE mg.MachineGroupID = 11 AND mg.ValueTypeID = 2 
+			)
+			INSERT INTO [Setup].AttributeSetupTimeItem (Item_Number,[Setup],[MachineGroupID],MachineID,AttributeNameID,[SetupAttributeValue],[SetupTime])
+			SELECT itemnumber,[Setup],[MachineGroupID],MachineID,AttributeNameID,SetupAttributeValue,TimeValue
+			FROM cteEFL
+			WHERE RowNumber = 1
+		COMMIT TRAN
+	END TRY
+	BEGIN CATCH
+		IF @@TRANCOUNT > 0
+		ROLLBACK TRANSACTION;
+ 
+		PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
+		PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));
+
+		THROW;
+	END CATCH;
+
+	--Insert all items for setups
+	BEGIN TRY
+		BEGIN TRAN
+			INSERT INTO [Setup].AttributeSetupTimeItem (Item_Number,[Setup],[MachineGroupID],MachineID,AttributeNameID,[SetupAttributeValue],[SetupTime])
+			SELECT DISTINCT Item_Number,[Setup],g.[MachineGroupID],MachineID,AttributeNameID,[SetupAttributeValue],[SetupTime]
+			FROM Setup.vSetupTimes G INNER JOIN  dbo.Oracle_Routes K ON K.true_operation_code = G.Setup
+			--WHERE  AttributeNameID = 8
+		COMMIT TRAN
+	END TRY
+	BEGIN CATCH
+		IF @@TRANCOUNT > 0
+		ROLLBACK TRANSACTION;
+
+		PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
+		PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));
+ 
+		THROW;
+	END CATCH;
+
+
+	--Insert fibercount time values based on Value Type 4 (multiply depending on the value)
+	--Fiber Count is calculated using the Value Type 4 logic, but then is inserted as a FiberSet with value type 2 logic for PT to interpret
+	--Using the FiberCount calculation is dependent upon if the FiberSet has changed.  
+	--Reduced to 8 seconds to insert data.  
+	BEGIN TRY
+
+		IF OBJECT_ID(N'tempdb..#MachineCapability', N'U') IS NOT NULL
+		DROP TABLE #MachineCapability;
+
+		SELECT *
+		INTO #MachineCapability
+		FROM Setup.vMachineCapability
+
+		CREATE NONCLUSTERED INDEX MachineCapability_IXX
+		ON [dbo].#MachineCapability (MachineID)
+
+		CREATE NONCLUSTERED INDEX MachineCapability_Setup_IX
+		ON [dbo].#MachineCapability (Setup)
+		--INCLUDE ([item_number],[true_operation_code],[MachineGroupID],MachineID,[AttributeNameID],[comp_item],[attribute_value],[ValueTypeID])
+		
+		BEGIN TRAN
+			INSERT INTO [Setup].AttributeSetupTimeItem (Item_Number,[Setup],[MachineGroupID],MachineID,AttributeNameID,[SetupAttributeValue],[SetupTime])
+			SELECT DISTINCT Item_Number,G.true_operation_code,I.[MachineGroupID],I.MachineID,8 AttributeNameID,null,FiberCount * TimeValue		--Calculates the TimeValue per fibercount and then inserts it for FiberSet for PT to pick up
+			FROM Setup.ItemAttributes K INNER JOIN dbo.Oracle_Routes G ON G.item_number = K.ItemNumber 
+			INNER JOIN #MachineCapability P ON P.Setup = G.true_operation_code
+			INNER JOIN Setup.AttributeMatrixVariableValue U ON U.AttributeValue = K.FiberCount AND P.MachineID = U.MachineID
+			INNER JOIN Setup.MachineGroupAttributes Y ON Y.AttributeNameID = U.AttributeNameID 
+			INNER JOIN Setup.MachineNames I ON I.MachineGroupID = Y.MachineGroupID AND U.MachineID = I.MachineID
+			WHERE ValueTypeID = 4 
+		COMMIT TRAN
+	END TRY
+	BEGIN CATCH	
+	IF @@TRANCOUNT > 0
+		ROLLBACK TRANSACTION;
+		PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
+		PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));
+ 
+		THROW;
+	END CATCH;
+
+
+	--Insert fibercount based setup time based on the fiber count Value Type 7 (fixed value chosen that is dependent on the fiber count) for QC operations
+	BEGIN TRY
+		BEGIN TRAN
+			INSERT INTO [Setup].AttributeSetupTimeItem (Item_Number,[Setup],[MachineGroupID],MachineID,AttributeNameID,[SetupAttributeValue],[SetupTime])
+			SELECT DISTINCT Item_Number,operation_code,[MachineGroupID],p.MachineID AS MachineID,u.AttributeNameID,FiberCount,TimeValue
+			FROM setup.ItemFiberCountByOperation K INNER JOIN dbo.Oracle_Routes G ON G.item_number = K.ItemNumber AND K.TrueOperationCode = G.true_operation_code
+			INNER JOIN Setup.DepartmentIndicator P ON p.department_code = g.department_code
+			INNER JOIN Setup.AttributeMatrixVariableValue U ON U.AttributeValue = K.FiberCount AND P.MachineID = U.MachineID
+			INNER JOIN Setup.vMachineAttributes Y ON Y.MachineID = P.MachineID AND Y.AttributeNameID = U.AttributeNameID 
+			WHERE ValueTypeID = 7 AND pass_to_aps NOT IN ('d','N') AND K.PrimaryAlternate = 'primary' 
+		COMMIT TRAN
+	END TRY
+	BEGIN CATCH
+		IF @@TRANCOUNT > 0
+		ROLLBACK TRANSACTION;
+		PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
+		PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));
+ 
+		THROW;
+	END CATCH;
+
+
+	--Insert fibercount based setup time based on the fiber count Value Type 3 (multiply by number of fibers) for QC operations
+	BEGIN TRY
+		BEGIN TRAN
+			INSERT INTO [Setup].AttributeSetupTimeItem (Item_Number,[Setup],[MachineGroupID],AttributeSetupTimeItem.MachineID,AttributeNameID,[SetupAttributeValue],[SetupTime])
+			SELECT DISTINCT K.ItemNumber,TrueOperationCode,[MachineGroupID],G.MachineID AS MachineID,u.AttributeNameID,FiberCount,TimeValue*FiberCount
+			FROM setup.ItemFiberCountByOperation K
+			INNER JOIN Scheduling.MachineCapabilityScheduler G ON G.Setup = K.TrueOperationCode
+			INNER JOIN Setup.AttributeMatrixFixedValue U ON G.MachineID = U.MachineID
+			INNER JOIN Setup.vMachineAttributes Y ON Y.MachineID = G.MachineID AND Y.AttributeNameID = U.AttributeNameID 
+			WHERE ValueTypeID = 3 AND k.PrimaryAlternate = 'primary' AND U.AttributeNameID = 7
+
+		COMMIT TRAN
+	END TRY
+	BEGIN CATCH
+		IF @@TRANCOUNT > 0
+		ROLLBACK TRANSACTION;
+		PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
+		PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));
+ 
+		THROW;
+	END CATCH;
+
+
+	--Insert if buffering item is printed based on the %-[wb]/s% indicator in the item description.
+	--This is for ACS buffering items only
+	BEGIN TRY
+		BEGIN TRAN
+			INSERT INTO [Setup].AttributeSetupTimeItem (Item_Number,[Setup],[MachineGroupID],AttributeSetupTimeItem.MachineID,AttributeNameID,[SetupAttributeValue],[SetupTime])
+			SELECT DISTINCT G.item_number,I.Setup,[MachineGroupID],I.MachineID,u.AttributeNameID,(CASE WHEN G.item_description LIKE '%-[WB]/S%' THEN '1' ELSE '0' END), NULL--, K.product_class
+			FROM dbo.Oracle_Items K INNER JOIN dbo.Oracle_Routes G ON G.item_number = K.item_number
+			INNER JOIN SETUP.vMachineCapability I ON I.SETUP = G.true_operation_code
+			INNER JOIN Setup.AttributeMatrixFromTo U ON I.MachineID = U.MachineID
+			INNER JOIN Setup.vMachineAttributes Y ON Y.MachineID = I.MachineID AND Y.AttributeNameID = U.AttributeNameID 
+			WHERE ValueTypeID = 5 AND U.AttributeNameID = 37 AND k.product_class  NOT LIKE '%Premise%'
+		COMMIT TRAN
+	END TRY
+	BEGIN CATCH
+		IF @@TRANCOUNT > 0
+		ROLLBACK TRANSACTION;
+		PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
+		PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));
+ 
+		THROW;
+	END CATCH;
+
+
+
+	
+	--Insert color prefered sequence
+	BEGIN TRY
+		BEGIN TRAN
+			INSERT INTO [Setup].AttributeSetupTimeItem (Item_Number,[Setup],[MachineGroupID],AttributeSetupTimeItem.MachineID,AttributeNameID,[SetupAttributeValue],[SetupTime])
+			SELECT k.Item_Number, k.Setup, I.MachineGroupID, K.MachineID, I.AttributeNameID, PreferedSequence, 0 AS SetupTime
+			FROM [Setup].AttributeSetupTimeItem k INNER JOIN Setup.ColorSequencePreference J ON J.Color = k.SetupAttributeValue
+				INNER JOIN Setup.MachineGroupAttributes I ON I.MachineGroupID = K.MachineGroupID
+				WHERE I.AttributeNameID = 38
+		COMMIT TRAN
+	END TRY
+	BEGIN CATCH
+		IF @@TRANCOUNT > 0
+		ROLLBACK TRANSACTION;
+ 
+ 
+		PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
+		PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));
+ 
+		THROW;
+	END CATCH;
+
+
+			--Insert setup information for all DJ's with setup that is not located on the std op
+	BEGIN TRY
+		BEGIN TRAN
+			;WITH cteSetups --Get setup information for all Routing DJs
+			AS(
+				SELECT DISTINCT Item_Number,[Setup],[MachineGroupID],MachineID,AttributeNameID,[SetupAttributeValue],[SetupTime]
+						FROM setup.AttributeSetupTimeItem K INNER JOIN dbo.Oracle_DJ_Routes B ON K.Setup = b.true_operation_code
+				),
+			cteMissingSetupItems --GEt which DJ items are missing from the setup data
+				AS(
+				SELECT R.assembly_item, R.true_operation_code 
+				FROM dbo.Oracle_DJ_Routes R LEFT JOIN  Setup.AttributeSetupTimeItem S ON R.assembly_item = S.Item_Number
+				WHERE S.Item_Number IS NULL AND R.send_to_aps <> 'N'
+				)
+			INSERT INTO setup.AttributeSetupTimeItem ([Setup],[MachineGroupID],MachineID,AttributeNameID,[SetupAttributeValue],[SetupTime])
+			SELECT DISTINCT [Setup],[MachineGroupID],MachineID,AttributeNameID,[SetupAttributeValue],[SetupTime]
+			FROM cteMissingSetupItems K INNER JOIN cteSetups S ON S.Item_Number = K.assembly_item AND S.Setup = K.true_operation_code
+		COMMIT TRAN
+	END TRY
+	BEGIN CATCH
+		IF @@TRANCOUNT > 0
+		ROLLBACK TRANSACTION;
+
+		PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
+		PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));
+ 
+		THROW;
+	END CATCH;
+
+END
+
+
+
+
+
+
+
+GO
diff --git a/Stored Procedures/Setup.usp_CalculateSetupTimesFromSetupDB.sql b/Stored Procedures/Setup.usp_CalculateSetupTimesFromSetupDB.sql
new file mode 100644
index 0000000..2b6715f
--- /dev/null
+++ b/Stored Procedures/Setup.usp_CalculateSetupTimesFromSetupDB.sql
@@ -0,0 +1,199 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+
+
+
+
+
+
+
+
+
+
+-- =============================================
+-- Author:      Bryan Eddy
+-- Create date: 8/11/2017
+-- Description: Create setup times for all attributes from Setup DB
+-- Version: 3
+-- Update: Updated glue attribute and logic to identify "ON" as 1 and "OFF" or null as 0.
+-- =============================================
+
+CREATE PROCEDURE [Setup].[usp_CalculateSetupTimesFromSetupDB]
+AS
+	SET NOCOUNT ON;
+BEGIN
+
+TRUNCATE TABLE [Setup].AttributeSetupTime
+
+DECLARE @ErrorNumber INT = ERROR_NUMBER();
+DECLARE @ErrorLine INT = ERROR_LINE();
+
+	--Insert fixed time values for setup times
+	BEGIN TRY
+		BEGIN TRAN
+			INSERT INTO [Setup].AttributeSetupTime ([Setup],[MachineGroupID],MachineID,AttributeNameID,[SetupAttributeValue],[SetupTime])
+			SELECT DISTINCT Setup, g.MachineGroupID, g.MachineID,g.AttributeNameID, g.TimeValue,G.TimeValue
+			 FROM [Setup].[vAttributeMatrixUnion] G INNER JOIN Setup.vMachineCapability K ON K.MachineID= G.MachineID
+			 WHERE G.ValueTypeID = 1
+		COMMIT TRAN
+	END TRY
+	BEGIN CATCH
+		IF @@TRANCOUNT > 0
+		ROLLBACK TRANSACTION;
+ 
+		PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
+		PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));
+ 
+		THROW;
+	END CATCH;
+
+
+	--Insert calculated attribute values for 
+	BEGIN TRY
+		BEGIN TRAN
+			;WITH cteChange
+			as(
+			SELECT distinct SetupNumber, G.MachineGroupID,g.MachineID, G.AttributeNameID, COALESCE(G.AttributeValue,'0') AttributeValue, TimeValue, G.AttributeName, K.ValueTypeID,k.ValueTypeDescription
+			,ROW_NUMBER() OVER (PARTITION BY SetupNumber, G.MachineGroupID,g.MachineID, G.AttributeNameID ORDER BY SetupNumber, G.MachineGroupID,g.MachineID, G.AttributeNameID,COALESCE(G.AttributeValue,'0') DESC) RowNumber
+			  FROM [Setup].[vMachineSetupAttributes] G
+			  INNER JOIN setup.vAttributeMatrixUnion K ON K.AttributeNameID = G.[AttributeNameID] AND K.MachineGroupID = G.MachineGroupID  and k.MachineID= g.MachineID
+			  AND K.ValueTypeID = G.ValueTypeID
+			where k.ValueTypeID = 2 --and  G.SetupNumber = 'R045'
+			)
+			INSERT INTO [Setup].AttributeSetupTime ([Setup],[MachineGroupID],MachineID,AttributeNameID,[SetupAttributeValue],[SetupTime])
+			SELECT SetupNumber, cteChange.MachineGroupID, cteChange.MachineID, cteChange.AttributeNameID, cteChange.AttributeValue, cteChange.TimeValue
+			FROM cteChange
+			WHERE cteChange.RowNumber = 1
+		COMMIT TRAN
+	END TRY
+	BEGIN CATCH
+		IF @@TRANCOUNT > 0
+		ROLLBACK TRANSACTION;
+ 
+		PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
+		PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));
+ 
+		THROW;
+	END CATCH;
+
+
+	--Insert calulcated setup times for fixed value setups
+	BEGIN TRY
+		BEGIN TRAN
+			;WITH cteMultiply
+			AS(
+				SELECT SetupNumber, G.MachineGroupID,g.MachineID, G.AttributeNameID, 
+				CASE WHEN ISNUMERIC(G.AttributeValue)<>1 THEN 0 ELSE (CAST(G.AttributeValue AS FLOAT))END  AS AttributeValue
+				, CASE WHEN ISNUMERIC(G.AttributeValue)<>1 THEN 0 ELSE (CAST(G.AttributeValue AS FLOAT) * TimeValue) + COALESCE(K.Adder,0) END AS SetupTime
+				  FROM [Setup].[vMachineSetupAttributes] G
+				  INNER JOIN setup.vAttributeMatrixUnion K ON K.AttributeNameID = G.[AttributeNameID] AND K.MachineGroupID = G.MachineGroupID  AND k.MachineID= g.MachineID
+				  AND K.ValueTypeID = G.ValueTypeID
+				WHERE k.ValueTypeID = 3 --and G.SetupNumber = 'z089'
+			)
+			INSERT INTO [Setup].AttributeSetupTime ([Setup],[MachineGroupID],MachineID,AttributeNameID,[SetupAttributeValue],[SetupTime])
+			SELECT SetupNumber, MachineGroupID, MachineID, AttributeNameID,SUM(AttributeValue), SUM(SetupTime)
+			FROM cteMultiply
+			GROUP BY  SetupNumber, MachineGroupID, MachineID, AttributeNameID
+			--ORDER BY MachineName
+		COMMIT TRAN
+	END TRY
+	BEGIN CATCH
+		IF @@TRANCOUNT > 0
+		ROLLBACK TRANSACTION;
+
+		PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
+		PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));
+ 
+		THROW;
+	END CATCH;
+
+	--Insert From To setup values from Setup DB
+	BEGIN TRY
+		BEGIN TRAN
+			INSERT INTO [Setup].AttributeSetupTime ([Setup],[MachineGroupID],MachineID,AttributeNameID,[SetupAttributeValue],[SetupTime])
+			SELECT DISTINCT SetupNumber, G.MachineGroupID,MachineID, G.AttributeNameID,
+			CASE WHEN G.AttributeNameID = 34 AND COALESCE(AttributeValue,'0') <> '0' THEN '1'
+				 ELSE COALESCE(AttributeValue,'0') END , NULL
+			  FROM [Setup].[vMachineSetupAttributes] G
+			WHERE G.ValueTypeID = 5 AND  G.AttributeNameID <> 34
+		COMMIT TRAN
+	END TRY
+	BEGIN CATCH
+		IF @@TRANCOUNT > 0
+		ROLLBACK TRANSACTION;
+
+		PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
+		PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));
+ 
+		THROW;
+	END CATCH;
+
+	--Insert From to Setup for glue.  
+	BEGIN TRY
+		BEGIN TRAN
+			INSERT INTO [Setup].AttributeSetupTime ([Setup],[MachineGroupID],MachineID,AttributeNameID,[SetupAttributeValue],[SetupTime])
+			SELECT DISTINCT SetupNumber, G.MachineGroupID,MachineID, G.AttributeNameID,
+			CASE WHEN G.AttributeNameID = 34 AND G.AttributeValue = 'ON' THEN '1'
+				 ELSE '0' END , NULL
+			  FROM [Setup].[vMachineSetupAttributesNulls] G
+			WHERE G.ValueTypeID = 5 AND  G.AttributeNameID = 34
+		COMMIT TRAN
+	END TRY
+	BEGIN CATCH
+		IF @@TRANCOUNT > 0
+		ROLLBACK TRANSACTION;
+
+		PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
+		PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));
+ 
+		THROW;
+	END CATCH;
+
+	--Insert buffering setup as the SetupAttributeValue
+	BEGIN TRY
+		BEGIN TRAN
+			INSERT INTO [Setup].AttributeSetupTime ([Setup],[MachineGroupID],MachineID,AttributeNameID,[SetupAttributeValue],[SetupTime])
+			SELECT DISTINCT Setup, K.MachineGroupID, P.MachineID,K.AttributeNameID, Setup,T.TimeValue
+			FROM SETUP.MachineGroupAttributes k INNER JOIN SETUP.MachineNames P ON P.MachineGroupID = K.MachineGroupID
+			INNER JOIN setup.vMachineCapability G ON P.MachineID= G.MachineID
+			INNER JOIN SETUP.AttributeMatrixFixedValue T ON T.MachineID = P.MachineID AND T.AttributeNameID = K.AttributeNameID
+			WHERE K.AttributeNameID = 33
+		COMMIT TRAN
+	END TRY
+	BEGIN CATCH
+		IF @@TRANCOUNT > 0
+		ROLLBACK TRANSACTION;
+
+		PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
+		PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));
+ 
+		THROW;
+	END CATCH;
+
+	--Insert setup information for data points that PT needs to supply information (FiberSet, ChildCount)
+	BEGIN TRY
+		BEGIN TRAN
+			INSERT INTO setup.AttributeSetupTime ([Setup],[MachineGroupID],MachineID,AttributeNameID,[SetupAttributeValue],[SetupTime])
+			SELECT DISTINCT setup,K.MachineGroupID, P.MachineID, K.AttributeNameID, NULL,T.TimeValue
+			FROM SETUP.MachineGroupAttributes k INNER JOIN SETUP.MachineNames P ON P.MachineGroupID = K.MachineGroupID
+			INNER JOIN setup.vMachineCapability G ON P.MachineID= G.MachineID
+			INNER JOIN SETUP.AttributeMatrixFixedValue T ON T.MachineID = P.MachineID AND T.AttributeNameID = K.AttributeNameID
+			WHERE ApsData = 1
+		COMMIT TRAN
+	END TRY
+	BEGIN CATCH
+		IF @@TRANCOUNT > 0
+		ROLLBACK TRANSACTION;
+
+		PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
+		PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));
+ 
+		THROW;
+	END CATCH;
+END
+
+
+
+GO
diff --git a/Stored Procedures/Setup.usp_CreateBufferingMatrix.sql b/Stored Procedures/Setup.usp_CreateBufferingMatrix.sql
new file mode 100644
index 0000000..e4972e5
--- /dev/null
+++ b/Stored Procedures/Setup.usp_CreateBufferingMatrix.sql
@@ -0,0 +1,66 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+
+
+
+
+
+
+
+
+
+-- =============================================
+-- Author:      Bryan Eddy
+-- Create date: 8/22/2017
+-- Description: Create all combinations for buffering compound From To logic
+-- Version: 1
+-- Update:	Added error handling
+-- =============================================
+CREATE PROCEDURE [Setup].[usp_CreateBufferingMatrix]
+AS
+BEGIN
+
+	SET NOCOUNT ON;
+
+	BEGIN TRY
+			BEGIN TRAN
+				;WITH
+				cteBufferingJacket
+				AS(
+					SELECT DISTINCT I.MachineName,g.item_number AS FromAttribute, k.item_number AS ToAttribute, 5 AS AttributeNameID, 
+					CASE WHEN G.attribute_value = k.attribute_value THEN 0
+						WHEN G.attribute_value = 'PBT' AND k.attribute_value IN('HDPE','LSZH','MDPE') THEN 30
+						WHEN G.attribute_value = 'MDPE' AND k.attribute_value IN('HDPE','LSZH','PBT','POLYURETHANE','SANTOPRENE') THEN 30
+						WHEN G.attribute_value = 'HDPE' AND k.attribute_value IN('HDPE','LSZH','PBT','POLYURETHANE','SANTOPRENE') THEN 120
+						WHEN G.attribute_value = 'PVC' THEN 120
+						WHEN G.attribute_value IN ('LSZH','PVDF','TRC','TPU','HYTREL','POLYURETHANE','SANTOPRENE','PBT','HDPE','TPX') THEN 240
+						WHEN G.attribute_value = 'Nylon'THEN 360
+						ELSE 0
+						END AS Timevalue
+					FROM dbo.Oracle_Item_Attributes K CROSS APPLY dbo.Oracle_Item_Attributes G CROSS APPLY Setup.MachineNames I
+					WHERE K.attribute_name = 'Jacket' AND g.attribute_name = 'Jacket'  AND MachineGroupID = 2
+				)
+				INSERT INTO Setup.AttributeMatrixFromTo(FromAttribute, ToAttribute, TimeValue, MachineID, AttributeNameID)
+				SELECT K.FromAttribute, K.ToAttribute, K.Timevalue, G.MachineID, K.AttributeNameID
+				FROM cteBufferingJacket K LEFT JOIN SETUP.AttributeMatrixFromTo G ON G.FromAttribute = K.FromAttribute AND G.ToAttribute = G.ToAttribute
+				WHERE G.FromAttribute IS NULL OR G.ToAttribute IS NULL
+			COMMIT TRAN
+	END TRY
+	BEGIN CATCH
+		IF @@TRANCOUNT > 0
+		ROLLBACK TRANSACTION;
+ 
+		DECLARE @ErrorNumber INT = ERROR_NUMBER();
+		DECLARE @ErrorLine INT = ERROR_LINE();
+ 
+		PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
+		PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));
+ 
+		THROW;
+	END CATCH
+
+END
+
+GO
diff --git a/Stored Procedures/Setup.usp_CreateOpgwPipeMatrix.sql b/Stored Procedures/Setup.usp_CreateOpgwPipeMatrix.sql
new file mode 100644
index 0000000..4c5b231
--- /dev/null
+++ b/Stored Procedures/Setup.usp_CreateOpgwPipeMatrix.sql
@@ -0,0 +1,82 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+
+
+
+
+-- =============================================
+-- Author:      Bryan Eddy
+-- Create date: 8/1/2017
+-- Description: Create all combinations for OPGW Pipe
+-- Version: 1
+-- Update:	Added error handling
+-- =============================================
+CREATE PROCEDURE [Setup].[usp_CreateOpgwPipeMatrix]
+AS
+	SET NOCOUNT ON;
+
+
+BEGIN
+
+DECLARE @TapeThicknessChange as int = 15;
+DECLARE @TapeWidthChange as int = 360;
+	BEGIN TRY
+			BEGIN TRAN
+				DELETE setup.AttributeMatrixFromTo FROM setup.AttributeMatrixFromTo G INNER JOIN SETUP.MachineNames K ON K.MachineID = G.MachineID
+				WHERE G.AttributeNameID IN (22,23) AND K.MachineGroupID = 10
+
+						;WITH cteToAttribute
+						AS(
+							SELECT DISTINCT P.AttributeID, P.AttributeName, K.MachineID, CAST(P.AttributeValue AS FLOAT) FromAttribute,AttributeValue TrueFromAttribute,AttributeNameID
+							FROM setup.MachineGroup G INNER JOIN setup.MachineNames K ON G.MachineGroupID = K.MachineGroupID
+							INNER JOIN setup.vMasterSetup P ON P.MachineID = K.MachineID
+							WHERE K.MachineGroupID = 10 AND AttributeNameID IN (23,22)
+						),
+							cteFromAttribute
+						AS(
+							SELECT DISTINCT P.AttributeID, P.AttributeName, K.MachineID, CAST(P.AttributeValue AS FLOAT) ToAttribute,  AttributeValue TrueToAttribute, AttributeNameID
+							FROM setup.MachineGroup G INNER JOIN setup.MachineNames K ON G.MachineGroupID = K.MachineGroupID
+							INNER JOIN setup.vMasterSetup P ON P.MachineID = K.MachineID
+							WHERE K.MachineGroupID = 10 AND AttributeNameID IN (23,22)
+						),
+							cteRank
+						AS(
+							SELECT DISTINCT RANK() OVER (PARTITION BY AttributeNameID ORDER BY AttributeValue) AttributeRank, AttributeNameID, AttributeValue
+							FROM (SELECT DISTINCT AttributeNameID, CAST(P.AttributeValue AS FLOAT) AttributeValue FROM setup.MachineGroup G INNER JOIN setup.MachineNames K ON G.MachineGroupID = K.MachineGroupID
+							INNER JOIN setup.vMasterSetup P ON P.MachineID = K.MachineID
+							WHERE K.MachineGroupID = 10 AND AttributeNameID IN (23,22) ) X
+						),
+							cteOpgwPipe
+						AS(
+						SELECT  K.AttributeID, K.AttributeNamE, K.MachineID, K.FromAttribute, FromRank = U.AttributeRank , G.ToAttribute, ToRank = P.AttributeRank,CAST((U.AttributeRank - P.AttributeRank)/2 AS INT) AS RankDelta,
+						'Concurrent'  LogicType, K.AttributeNameID, G.TrueToAttribute, K.TrueFromAttribute,
+						CASE WHEN k.AttributeNameID = 23 AND k.FromAttribute <> g.ToAttribute THEN @TapeWidthChange 
+							ELSE CAST((ABS(U.AttributeRank - P.AttributeRank)+1)/2 AS INT) * @TapeThicknessChange
+							END AS TimeValue
+						FROM cteToAttribute K INNER JOIN cteFromAttribute G ON G.AttributeID = K.AttributeID
+						INNER JOIN cteRank P ON P.AttributeNameID = K.AttributeNameID AND P.AttributeValue = K.FromAttribute
+						INNER JOIN cteRank U ON U.AttributeNameID = G.AttributeNameID AND U.AttributeValue = G.ToAttribute
+						AND G.MachineID = K.MachineID 
+					)
+					INSERT INTO setup.AttributeMatrixFromTo(AttributeNameID,MachineID,FromAttribute, ToAttribute,TimeValue)
+					SELECT DISTINCT AttributeNameID,MachineID,cteOpgwPipe.TrueFromAttribute, cteOpgwPipe.TrueToAttribute,TimeValue
+					FROM cteOpgwPipe
+			COMMIT TRAN
+	END TRY
+	BEGIN CATCH
+		IF @@TRANCOUNT > 0
+		ROLLBACK TRANSACTION;
+ 
+		DECLARE @ErrorNumber INT = ERROR_NUMBER();
+		DECLARE @ErrorLine INT = ERROR_LINE();
+ 
+		PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
+		PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));
+ 
+		THROW;
+	END CATCH
+END;
+
+GO
diff --git a/Stored Procedures/Setup.usp_CreateSheathingMatrix.sql b/Stored Procedures/Setup.usp_CreateSheathingMatrix.sql
new file mode 100644
index 0000000..11b6be1
--- /dev/null
+++ b/Stored Procedures/Setup.usp_CreateSheathingMatrix.sql
@@ -0,0 +1,114 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+
+
+
+
+
+
+-- =============================================
+-- Author:      Bryan Eddy
+-- Create date: 7/31/2017
+-- Description: Create all combinations for sheathing compound To From logic
+-- Version: 1
+-- Update:	Added error handling
+-- =============================================
+CREATE PROCEDURE [Setup].[usp_CreateSheathingMatrix]
+AS
+	SET NOCOUNT ON;
+BEGIN
+
+DECLARE @ErrorNumber INT = ERROR_NUMBER();
+DECLARE @ErrorLine INT = ERROR_LINE();
+
+	BEGIN TRY
+		BEGIN TRAN
+			--delete from Setup.ToFromAttributeMatrix;
+			;WITH cteSheathingJacket
+			AS (
+			SELECT G.item_number AS FromAttribute, k.item_number AS ToAttribute, MachineID,5 AS AttributeNameID,
+			CASE WHEN G.attribute_value = k.attribute_value THEN 0.33*60
+				WHEN G.attribute_value = 'PVC'  THEN 1*60
+				WHEN G.attribute_value = 'PVDF'  THEN 3*60
+				WHEN G.attribute_value = 'NYLON' THEN 6*60
+				WHEN G.attribute_value <> K.attribute_value THEN 2.25*60
+				ELSE 99999
+				END AS Timevalue
+				FROM dbo.Oracle_Item_Attributes K CROSS APPLY dbo.Oracle_Item_Attributes G CROSS APPLY Setup.MachineNames I
+				WHERE K.attribute_name = 'Jacket' AND g.attribute_name = 'Jacket'  AND MachineGroupID = 8
+			)
+			INSERT INTO Setup.AttributeMatrixFromTo(FromAttribute,ToAttribute,  TimeValue, MachineID,AttributeNameID)
+			SELECT K.FromAttribute,K.ToAttribute,K.Timevalue,K.MachineID, K.AttributeNameID
+			FROM cteSheathingJacket K LEFT JOIN SETUP.AttributeMatrixFromTo G ON K.FromAttribute = G.FromAttribute AND K.ToAttribute = G.ToAttribute
+			WHERE G.FromAttribute IS NULL
+		COMMIT TRAN
+	END TRY
+	BEGIN CATCH
+		IF @@TRANCOUNT > 0
+		ROLLBACK TRANSACTION; 
+		PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
+		PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));
+ 
+		THROW;
+	END CATCH;
+
+
+
+	--Insert Color Matrix in From To Table
+	BEGIN TRY
+		BEGIN TRAN
+			;WITH cteSheathingColor
+			AS(
+				SELECT DISTINCT G.attribute_value FromAttribute, k.attribute_value ToAttribute,4 AS AttributeNameID,
+					 CASE WHEN G.attribute_value = K.attribute_value OR K.attribute_value = G.attribute_value THEN 0.00
+					 WHEN G.attribute_value <> 'BLACK' AND K.attribute_value <>'BLACK' THEN 20.00
+					 WHEN G.attribute_value <> 'BLACK' THEN 20.00
+					 WHEN G.attribute_value = 'BLACK' THEN 40.00
+					 ELSE 99999
+					 END AS Timevalue
+				FROM dbo.Oracle_Item_Attributes G CROSS APPLY dbo.Oracle_Item_Attributes K
+				WHERE G.attribute_name = 'COLOR' AND K.attribute_name = 'COLOR'
+			)
+			INSERT INTO Setup.AttributeMatrixFromTo(FromAttribute,ToAttribute,  TimeValue, MachineID,AttributeNameID)
+			SELECT DISTINCT K.FromAttribute,K.ToAttribute,K.Timevalue,t.MachineID,K.AttributeNameID--, k.FromAttribute, k.ToAttribute
+			FROM cteSheathingColor K
+			CROSS APPLY SETUP.MachineNames T
+			LEFT JOIN SETUP.AttributeMatrixFromTo G ON K.FromAttribute = G.FromAttribute AND K.ToAttribute = G.ToAttribute
+			WHERE  T.MachineGroupID = 8 AND (G.FromAttribute IS NULL OR g.ToAttribute IS NULL)
+		COMMIT TRAN
+	END TRY
+	BEGIN CATCH
+		IF @@TRANCOUNT > 0
+		ROLLBACK TRANSACTION; 
+		PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
+		PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));
+ 
+		THROW;
+	END CATCH;
+
+
+	--Inserting armor matrix in From To table
+	BEGIN TRY
+		BEGIN TRAN
+			INSERT INTO Setup.AttributeMatrixFromTo(FromAttribute,ToAttribute,  TimeValue, AttributeMatrixFromTo.MachineID,AttributeNameID)
+			SELECT  DISTINCT COALESCE(K.FromAttribute,'0') FromAttribute,COALESCE(K.ToAttribute,'0') ToAttribute, K.Timevalue, T.MachineID,1 AttributeNameID
+			FROM SETUP.vMatrixSheathingArmor K CROSS APPLY SETUP.MachineNames T
+			LEFT JOIN SETUP.AttributeMatrixFromTo G ON K.FromAttribute  = G.FromAttribute AND K.ToAttribute = G.ToAttribute AND T.MachineID = G.MachineID
+			WHERE T.MachineGroupID = 8 AND  G.FromAttribute IS NULL AND G.ToAttribute IS NULL AND K.FromAttribute <> 0 AND G.FromAttribute <> 0
+		COMMIT TRAN
+	END TRY
+	BEGIN CATCH
+		IF @@TRANCOUNT > 0
+		ROLLBACK TRANSACTION; 
+		PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
+		PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));
+ 
+		THROW;
+	END CATCH;
+
+
+END
+
+GO
diff --git a/Stored Procedures/Setup.usp_CreateSzMatrix.sql b/Stored Procedures/Setup.usp_CreateSzMatrix.sql
new file mode 100644
index 0000000..be5d942
--- /dev/null
+++ b/Stored Procedures/Setup.usp_CreateSzMatrix.sql
@@ -0,0 +1,54 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+
+
+
+
+
+
+
+-- =============================================
+-- Author:      Bryan Eddy
+-- Create date: 8/14/2017
+-- Description: create From To Matrix for SZ Glue
+-- Version: 1
+-- Update:	Added error handling
+-- =============================================
+CREATE PROCEDURE [Setup].[usp_CreateSzMatrix]
+AS
+	SET NOCOUNT ON;
+BEGIN
+
+		DELETE setup.AttributeMatrixFromTo FROM setup.AttributeMatrixFromTo K INNER JOIN SETUP.MachineNames G ON G.MachineID = K.MachineID
+		WHERE AttributeNameID = 34 AND MachineGroupID = 13
+
+	BEGIN TRY
+		BEGIN TRAN
+			INSERT INTO setup.AttributeMatrixFromTo(AttributeNameID,MachineID,FromAttribute, ToAttribute,TimeValue)
+			VALUES  (34, 8,'0','0',0),
+					(34, '8','0','1',20),
+					(34, '8','1','0',10),
+					(34, '8','1','1',10),
+					(34, '7','0','0',0),
+					(34, '7','0','1',20),
+					(34, '7','1','0',10),
+					(34, '7','1','1',10)
+		COMMIT TRAN
+	END TRY
+	BEGIN CATCH
+		IF @@TRANCOUNT > 0
+		ROLLBACK TRANSACTION;
+ 
+		DECLARE @ErrorNumber INT = ERROR_NUMBER();
+		DECLARE @ErrorLine INT = ERROR_LINE();
+ 
+		PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
+		PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));
+ 
+		THROW;
+	END CATCH
+END
+
+GO
diff --git a/Stored Procedures/Setup.usp_EmailMissingDjSetup.sql b/Stored Procedures/Setup.usp_EmailMissingDjSetup.sql
new file mode 100644
index 0000000..561e821
--- /dev/null
+++ b/Stored Procedures/Setup.usp_EmailMissingDjSetup.sql
@@ -0,0 +1,134 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+
+
+
+
+/*
+Author:		Bryan Eddy
+Date:		2/2/2018
+Desc:		Email alert to notify of DJ's with setups missing
+Version:	2
+Update:		Updated to show all affected DJ's and the op sequence
+*/
+
+CREATE PROCEDURE [Setup].[usp_EmailMissingDjSetup]
+AS
+BEGIN
+
+SET NOCOUNT ON;
+
+	--Get missing setup information
+	IF OBJECT_ID(N'tempdb..#Results', N'U') IS NOT NULL
+	DROP TABLE #Results;
+
+	WITH cteJobsMissingSetups
+	AS(
+		SELECT DISTINCT Setup, I.assembly_item,I.wip_entity_name, I.date_released,assembly_description, I.department_code,operation_seq_num
+		--,MIN(I.date_released) OVER (PARTITION BY Setup) EarliestReleasedDate
+		--,ROW_NUMBER() OVER (PARTITION BY Setup ORDER BY date_released) RowNumber
+			--,COUNT(setup) OVER (PARTITION BY Setup) NumberOfJobsAffected
+		FROM (
+				SELECT DISTINCT Setup, I.assembly_item,I.wip_entity_name, I.date_released  , I.assembly_description, I.department_code, I.operation_seq_num
+				FROM	Setup.vMissingSetupsDj K INNER JOIN dbo.Oracle_DJ_Routes  I ON I.true_operation_code = K.Setup 
+						INNER JOIN Scheduling.vOracleOrders j ON j.parent_dj_number = i.wip_entity_name
+					)  I
+	)
+	SELECT  G.*
+	INTO #Results
+	FROM cteJobsMissingSetups G left JOIN Setup.MissingSetups K ON g.Setup = k.Setup
+	--WHERE G.EarliestReleasedDate = G.date_released AND G.RowNumber = 1
+
+	--Merge missing setups with the MissingSetups table
+	MERGE Setup.MissingSetups AS T
+	USING (SELECT DISTINCT Setup FROM #Results) s
+	ON t.Setup = S.Setup
+	WHEN MATCHED THEN
+	UPDATE SET T.DateMostRecentAppearance = GETDATE()
+	WHEN NOT MATCHED BY TARGET THEN
+	INSERT (SETUP) VALUES (setup);
+
+	--Results to populate the email table
+	IF OBJECT_ID(N'tempdb..#FinalResults', N'U') IS NOT NULL
+	DROP TABLE #FinalResults;
+	SELECT DATEDIFF(dd,K.DateCreated,K.DateMostRecentAppearance) DaysMissing, k.DateCreated, k.DateMostRecentAppearance,CAST(j.operation_seq_num AS INT) operation_seq_num
+	,cast(J.date_released AS date) date_released, j.department_code, j.wip_entity_name,j.assembly_item
+	,J.Setup
+	INTO #FinalResults
+	FROM setup.MissingSetups K INNER JOIN	#Results J ON K.Setup = J.Setup
+	ORDER BY cast(date_released AS date)--,DaysMissing DESC
+
+	--SELECT *
+	--FROM #FinalResults
+	--ORDER BY date_released
+		
+	--Send Email alert
+	DECLARE @numRows int
+	DECLARE @Receipientlist varchar(1000)
+	DECLARE @BlindRecipientlist varchar(1000)
+
+	SELECT @numRows = count(*) FROM #Results;
+
+
+	SET @ReceipientList = (STUFF((SELECT ';' + UserEmail 
+							FROM [NAASPB-PRD04\SQL2014].premise.dbo.tblConfiguratorUser G  INNER JOIN [NAASPB-PRD04\SQL2014].premise.users.UserResponsibility  K ON  G.UserID = K.UserID
+  							WHERE K.ResponsibilityID = 1 FOR XML PATH('')),1,1,''))
+
+	SET @ReceipientList = @ReceipientList +';'+ (STUFF((SELECT ';' + UserEmail 
+							FROM [NAASPB-PRD04\SQL2014].premise.dbo.tblConfiguratorUser G  INNER JOIN [NAASPB-PRD04\SQL2014].Premise.users.UserResponsibility  K ON  G.UserID = K.UserID
+  							WHERE K.ResponsibilityID = 4 FOR XML PATH('')),1,1,''))
+
+
+	SET @BlindRecipientlist = @BlindRecipientlist + ';Bryan.Eddy@aflglobal.com';
+
+
+	DECLARE @body1 VARCHAR(MAX)
+	DECLARE @subject VARCHAR(MAX)
+	--DECLARE @query VARCHAR(MAX) = N'SELECT * FROM tempdb..#Results;'
+	SET @subject = 'Discrete Jobs Missing Setup Alerts ' + CAST(GETDATE() AS NVARCHAR(50))
+	SET @body1 = 'There are  ' + CAST(@numRows AS NVARCHAR(20)) + ' item(s) missing setup information for DJs.  Please review.' +CHAR(13)+CHAR(13)
+
+	DECLARE @tableHTML  NVARCHAR(MAX) ;
+	IF @numRows > 0
+		BEGIN
+	
+					SET @tableHTML =
+						N'<H1>Missing Setup DJ Report</H1>' +
+						N'<H2 span style=''font-size:16.0pt;font-family:"Calibri","sans-serif";color:#EB3814''>Items with the setups below will be unable to schedule.</H2>' +
+						--N'<H2 style = ''color: EB3814''>' +
+						N'<p>'+@body1+'</p>' +
+						N'<p class=MsoNormal><span style=''font-size:11.0pt;font-family:"Calibri","sans-serif";color:#1F497D''>'+
+						N'<table border="1">' +
+						N'<tr><th>Setup</th><th>Days Missing</th>' +
+						N'<th>Item</th><th>Op Seq</th>' +
+						N'<th>Job</th><th>Job Released Date</th><th>Dept Code</th></tr>' +
+						CAST ( ( SELECT		td=Setup,    '',
+											td=DaysMissing, '',
+											td=assembly_item, '',
+											td=operation_seq_num, '',
+											td=wip_entity_name, '', 
+											td=date_released, '',
+											td = department_code, ''
+																
+									FROM #FinalResults 
+									ORDER BY date_released, DaysMissing
+									FOR XML PATH('tr'), TYPE 
+						) AS NVARCHAR(MAX) ) +
+						N'</table>' ;
+
+		
+					EXEC msdb.dbo.sp_send_dbmail 
+					@recipients=@ReceipientList,
+					--@recipients = 'bryan.eddy@aflglobal.com',
+					--@blind_copy_recipients =  @BlindRecipientlist, --@ReceipientList
+					@blind_copy_recipients = 'bryan.eddy@aflglobal.com',
+					@subject = @subject,
+					@body = @tableHTML,
+					@body_format = 'HTML';
+		END
+
+
+END
+GO
diff --git a/Stored Procedures/Setup.usp_EmailMissingMaterialAttribute.sql b/Stored Procedures/Setup.usp_EmailMissingMaterialAttribute.sql
new file mode 100644
index 0000000..7542431
--- /dev/null
+++ b/Stored Procedures/Setup.usp_EmailMissingMaterialAttribute.sql
@@ -0,0 +1,87 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+
+/*
+Author:		Bryan Eddy
+Date:		2/13/2018
+Desc:		Email alert to notify of msising material attributes
+Version:	2
+Update:		Updated subject line
+*/
+
+CREATE PROCEDURE [Setup].[usp_EmailMissingMaterialAttribute]
+AS
+BEGIN
+
+SET NOCOUNT ON;
+
+	--Get missing setup information
+	IF OBJECT_ID(N'tempdb..#Results', N'U') IS NOT NULL
+	DROP TABLE #Results;
+
+	SELECT item_number, attribute_name, item_description
+	INTO #Results
+	FROM Setup.vMissingMaterialAttributes
+
+
+	--Send Email alert
+	DECLARE @numRows int
+	DECLARE @Receipientlist varchar(1000)
+	DECLARE @BlindRecipientlist varchar(1000)
+
+	SELECT @numRows = count(*) FROM #Results;
+
+
+	SET @ReceipientList = (STUFF((SELECT ';' + UserEmail 
+							FROM [NAASPB-PRD04\SQL2014].Premise.dbo.tblConfiguratorUser G  INNER JOIN [NAASPB-PRD04\SQL2014].Premise.users.UserResponsibility  K ON  G.UserID = K.UserID
+	  						WHERE K.ResponsibilityID = 12 FOR XML PATH('')),1,1,''))
+
+	/*
+	************************************************************
+	Temporary until scheduling has production data******
+	************************************************************
+	*/
+
+
+
+	DECLARE @body1 VARCHAR(MAX)
+	DECLARE @subject VARCHAR(MAX)
+	--DECLARE @query VARCHAR(MAX) = N'SELECT * FROM tempdb..#Results;'
+	SET @subject = 'Missing Material Attribute Alert' 
+	SET @body1 =  CAST(@numRows AS NVARCHAR(20)) + ' item(s) missing attributes.  Please review.' +CHAR(13)+CHAR(13)
+
+	DECLARE @tableHTML  NVARCHAR(MAX) ;
+	IF @numRows > 0
+		BEGIN
+	
+					SET @tableHTML =
+						N'<H1>Missing Material Attribute Report</H1>' +
+						--N'<H2 span style=''font-size:16.0pt;font-family:"Calibri","sans-serif";color:#EB3814''>Items with the setups below will be unable to schedule.</H2>' +
+						--N'<H2 style = ''color: EB3814''>' +
+						N'<p>'+@body1+'</p>' +
+						N'<p class=MsoNormal><span style=''font-size:11.0pt;font-family:"Calibri","sans-serif";color:#1F497D''>'+
+						N'<table border="1">' +
+						N'<tr><th>Item</th><th>Missing Attribute</th>' +
+						N'<th>Item Description</th>' +
+						N'</tr>' +
+						CAST ( ( SELECT		td=item_number,    '',
+											td=attribute_name, '',
+											td=item_description, ''	
+									FROM #Results 
+									FOR XML PATH('tr'), TYPE 
+						) AS NVARCHAR(MAX) ) +
+						N'</table>' ;
+
+		
+					EXEC msdb.dbo.sp_send_dbmail 
+					@recipients=@ReceipientList,
+					@subject = @subject,
+					@body = @tableHTML,
+					@body_format = 'HTML';
+		END
+
+
+END
+GO
diff --git a/Stored Procedures/Setup.usp_GetFiberCount.sql b/Stored Procedures/Setup.usp_GetFiberCount.sql
new file mode 100644
index 0000000..64ad880
--- /dev/null
+++ b/Stored Procedures/Setup.usp_GetFiberCount.sql
@@ -0,0 +1,207 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+
+
+
+
+
+-- =============================================
+-- Author:      Bryan Eddy
+-- Create date: 8/23/2017
+-- Description: Procedure to update the fiber count of cables with open orders
+-- Version: 3
+-- Update:	Removed [PlanetTogether_Data_Test] pointer
+-- =============================================
+
+CREATE PROCEDURE [Setup].[usp_GetFiberCount]
+
+@RunType INT  --1 to get fiber count data for all items else get fiber count just for open orders
+
+AS
+
+	SET NOCOUNT ON;
+BEGIN
+DECLARE @ErrorNumber INT = ERROR_NUMBER();
+DECLARE @ErrorLine INT = ERROR_LINE();
+
+DECLARE @BomExplode TABLE(
+   FinishedGood VARCHAR(100),
+   item_number VARCHAR(100), 
+   comp_item VARCHAR(100),
+   comp_qty_per DECIMAL(18,10),
+   ExtendedQuantityPer DECIMAL(18,10),
+   primary_uom_code  VARCHAR(50),
+   BOMLevel INT NULL,
+   item_seq SMALLINT,
+   opseq SMALLINT,
+   unit_id INT NULL,
+   layer_id INT NULL,
+   count_per_uom INT,
+   alternate_designator  NVARCHAR(10),
+   FinishedGoodOpSeq SMALLINT
+   )
+
+
+			--IF OBJECT_ID(N'tempdb..#BomExplode', N'U') IS NOT NULL
+			--DROP TABLE #BomExplode;
+
+	IF @RunType = 1
+		BEGIN
+			INSERT INTO @BomExplode
+			SELECT E.*
+			--INTO #BomExplode
+			FROM dbo.Oracle_Items G CROSS APPLY dbo.fn_ExplodeBOM(G.item_number) E
+
+		END
+	ELSE
+		BEGIN
+			--Insert items from orders
+			IF OBJECT_ID(N'tempdb..#OrderItems', N'U') IS NOT NULL
+			DROP TABLE #OrderItems;
+			SELECT DISTINCT assembly_item 
+			INTO #OrderItems
+			FROM dbo.Oracle_Orders
+
+			INSERT INTO #OrderItems(assembly_item)
+			SELECT DISTINCT component_item 
+			FROM dbo.Oracle_Orders I LEFT JOIN #OrderItems K ON K.assembly_item = I.component_item
+			WHERE K.assembly_item IS NULL
+
+
+			INSERT INTO #OrderItems
+			SELECT DISTINCT G.item_number
+			FROM dbo.Oracle_Items G LEFT JOIN #OrderItems K ON G.item_number = K.assembly_item
+			LEFT JOIN SETUP.ItemAttributes P ON P.ItemNumber = G.item_number
+			INNER JOIN Oracle_BOMs I ON I.item_number = G.item_number
+			WHERE K.assembly_item IS NULL AND P.ItemNumber IS NULL
+
+
+			INSERT INTO #OrderItems(assembly_item)
+			SELECT DISTINCT g.item_number FROM Setup.ItemAttributes K RIGHT JOIN dbo.Oracle_Items G ON K.ItemNumber = G.item_number
+			LEFT JOIN #OrderItems P ON P.assembly_item = G.item_number
+			WHERE K.ItemNumber IS NULL AND g.make_buy = 'make' AND P.assembly_item IS NULL
+
+
+
+
+			--IF OBJECT_ID(N'tempdb..#BomExplode', N'U') IS NOT NULL
+			--DROP TABLE #BomExplode;
+			INSERT INTO @BomExplode
+			SELECT E.*
+			--INTO #BomExplode 
+			FROM #OrderItems G CROSS APPLY dbo.fn_ExplodeBOM(G.assembly_item) E
+
+		END
+
+
+	--Insert Fiber count for all BOM's containing fiber
+	BEGIN TRY
+		BEGIN tran
+			;WITH cteFiber
+			AS(
+				SELECT FinishedGood,p.comp_item, part, position ,make_buy, ExtendedQuantityPer, CAST(P.ExtendedQuantityPer AS INT) FloorFiberQuanity
+				FROM dbo.Oracle_Items G CROSS APPLY dbo.usf_SplitString(g.product_class,'.') 
+				INNER JOIN @BomExplode P ON P.comp_item = G.item_number
+				WHERE  ((part IN ('Fiber','Ribbon') AND position = 4)  OR (part ='Bare Ribbon' AND position = 5)) AND make_buy = 'buy' AND p.alternate_designator = 'primary'
+			)
+			SELECT FinishedGood,SUM(CAST(FloorFiberQuanity AS INT)) AS FiberCount,SUM(ExtendedQuantityPer) AS FiberMeters
+			INTO #FiberCount
+			FROM cteFiber
+			GROUP BY FinishedGood
+
+
+			--Insert items 
+			INSERT INTO #FiberCount(FinishedGood, FiberCount, FiberMeters)
+			SELECT g.FinishedGood, 0, 0
+			FROM #FiberCount K RIGHT JOIN (SELECT DISTINCT FinishedGood FROM @BomExplode g INNER JOIN dbo.Oracle_Items k ON K.item_number = G.FinishedGood WHERE k.make_buy = 'BUY' ) G
+			ON G.FinishedGood = K.FinishedGood
+			WHERE K.FinishedGood IS NULL
+
+			MERGE setup.ItemAttributes AS Target
+			USING (SELECT * FROM #FiberCount) AS Source
+			ON (Target.ItemNumber = Source.FinishedGood)
+			WHEN MATCHED THEN
+				UPDATE SET	Target.FiberCount = source.FiberCount,
+							Target.FiberMeters = Source.FiberMeters
+			WHEN NOT MATCHED BY TARGET THEN
+				INSERT (ItemNumber, FiberCount, FiberMeters)
+				VALUES (Source.FinishedGood, Source.FiberCount, Source.FiberMeters);
+
+		COMMIT TRAN
+	END TRY
+	BEGIN CATCH
+		IF @@TRANCOUNT > 0
+		ROLLBACK TRANSACTION;
+ 
+		PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
+		PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));
+ 
+		THROW;
+	END CATCH;
+
+	--Get fiber count for all other items not found above.  Insert fiber count of 0.
+	BEGIN TRY
+		BEGIN TRAN
+
+
+			MERGE setup.ItemAttributes AS Target
+			USING (SELECT DISTINCT K.assembly_item, 0 FiberCount ,0 FiberMeters
+			FROM #OrderItems K INNER JOIN dbo.Oracle_BOMs P ON K.assembly_item = P.item_number
+			LEFT JOIN setup.ItemAttributes G ON K.assembly_item = G.ItemNumber
+			WHERE G.ItemNumber  IS NULL ) AS Source
+			ON (Target.ItemNumber = Source.assembly_item)
+			WHEN MATCHED THEN
+				UPDATE SET	Target.FiberCount = source.FiberCount,
+							Target.FiberMeters = Source.FiberMeters
+			WHEN NOT MATCHED BY TARGET THEN
+				INSERT (ItemNumber, FiberCount, FiberMeters)
+				VALUES (Source.assembly_item, Source.FiberCount, Source.FiberMeters);
+		COMMIT TRAN
+	END TRY
+	BEGIN CATCH
+		IF @@TRANCOUNT > 0
+		ROLLBACK TRANSACTION;
+ 
+		PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
+		PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));
+ 
+		THROW;
+	END CATCH;
+
+			--Update any fiber count where product category > 0
+	BEGIN TRY
+		BEGIN TRAN
+			;WITH cteZeroFiberCount
+			AS(
+				SELECT G.ItemNumber,CategoryName
+				FROM Setup.ItemAttributes K INNER JOIN [NAASPB-PRD04\SQL2014].Premise.dbo.AFLPRD_INVItmCatg_CAB G ON K.ItemNumber = G.ItemNumber
+				WHERE  G.CategorySetName LIKE '%FIBER COUNT%' --AND ISNUMERIC(G.CategoryName) = 1
+
+			)
+			UPDATE K
+			SET FiberCount = X.FiberCount
+			FROM(
+				SELECT SUM(CAST(cteZeroFiberCount.CategoryName AS INT)) FiberCount, cteZeroFiberCount.ItemNumber
+				FROM cteZeroFiberCount
+				GROUP BY ItemNumber
+				) X INNER JOIN Setup.ItemAttributes K ON K.itemnumber = X.itemnumber
+		COMMIT TRAN
+	END TRY
+	BEGIN CATCH
+		ROLLBACK TRANSACTION;
+
+ 
+		PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
+		PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));
+ 
+		THROW;
+	END CATCH;
+
+
+END
+
+
+
+GO
diff --git a/Stored Procedures/Setup.usp_GetFiberCountByOperation.sql b/Stored Procedures/Setup.usp_GetFiberCountByOperation.sql
new file mode 100644
index 0000000..9cc5b84
--- /dev/null
+++ b/Stored Procedures/Setup.usp_GetFiberCountByOperation.sql
@@ -0,0 +1,273 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+
+
+
+
+
+
+/*
+-- =============================================
+-- Author:      Bryan Eddy
+-- Create date: 11/15/2017
+-- Description: Procedure to aggregate the fiber count for all cables by operation
+-- Version: 5
+-- Update:	Added query to insert items missing from Setup.ItemFiberCountByOperation table.
+			Added query to insert make items missing from the table with an inspection step
+-- =============================================
+
+*/
+
+CREATE PROCEDURE [Setup].[usp_GetFiberCountByOperation]
+
+@RunType INT
+AS
+
+
+	SET NOCOUNT ON;
+BEGIN
+ 
+		DECLARE @ErrorNumber INT = ERROR_NUMBER();
+		DECLARE @ErrorLine INT = ERROR_LINE();
+
+
+
+	BEGIN TRY
+		BEGIN TRAN
+		DECLARE @sql NVARCHAR(MAX);
+
+	
+				IF OBJECT_ID(N'tempdb..##BomExplode', N'U') IS NOT NULL
+				DROP TABLE ##BomExplode;
+
+				--DECLARE @RunType INT;
+				--SET @RunType = 2
+
+				--Run type 1 updates/inserts all item BOM's into dataset
+				IF @RunType = 1
+					BEGIN
+						
+						SET @sql = 'SELECT E.*
+						INTO ##BomExplode
+						FROM dbo.Oracle_Items G CROSS APPLY dbo.fn_ExplodeBOM(G.item_number) E
+						'--WHERE g.item_number in (''RD2016-0040'',''DNO-9671'',''DNO-1558'')'
+					END
+				ELSE --Else update only open order items to greatly reduce the time to run procedure
+					BEGIN
+						SET @sql = 'SELECT X.* 
+						INTO ##BomExplode
+						FROM (
+							SELECT e.*
+							FROM (SELECT distinct assembly_item FROM dbo.Oracle_Orders) G CROSS APPLY dbo.fn_ExplodeBOM(G.assembly_item) E
+							UNION
+							SELECT e.* 
+							FROM (SELECT distinct E.item_number 
+									FROM dbo.Oracle_Items E left JOIN SETUP.ItemFiberCountByOperation I ON I.ItemNumber = E.item_number
+									WHERE I.ItemNumber IS NULL AND E.make_buy =''make'' ) G CROSS APPLY dbo.fn_ExplodeBOM(G.item_number) E
+								)X
+						'--WHERE G.assembly_item = ''DNO-11046'''
+					END
+
+
+				EXEC(@sql)
+
+				CREATE INDEX iBomXplode ON ##BomExplode (comp_item, FinishedGood, ExtendedQuantityPer)
+
+				--Explode all BOM's from the previous query and aggregate the fiber count
+				IF OBJECT_ID(N'tempdb..#FiberCount', N'U') IS NOT NULL
+				DROP TABLE #FiberCount;
+				;WITH cteFiber
+				AS(
+					SELECT FinishedGood,p.comp_item, part, position ,make_buy,CAST(ExtendedQuantityPer AS int) FloorFiberQuantity,ExtendedQuantityPer , p.FinishedGoodOpSeq, P.alternate_designator
+					FROM dbo.Oracle_Items G CROSS APPLY dbo.usf_SplitString(g.product_class,'.')  
+					INNER JOIN ##BomExplode P ON P.comp_item = G.item_number
+					WHERE  ((part IN ('Fiber','Ribbon') AND position = 4)  OR (part ='Bare Ribbon' AND position = 5)) AND make_buy = 'buy' --AND p.alternate_designator = 'primary'
+				),
+				cteFiberCount
+				AS(
+
+				SELECT FinishedGood,SUM(CAST(FloorFiberQuantity AS INT)) AS FiberCount, SUM(ExtendedQuantityPer) AS FiberMeters,cteFiber.FinishedGoodOpSeq,cteFiber.alternate_designator
+				FROM cteFiber
+				GROUP BY FinishedGood,cteFiber.FinishedGoodOpSeq,alternate_designator
+					)
+				SELECT k.FinishedGood, k.FinishedGoodOpSeq,alternate_designator,SUM(k.FiberCount) OVER (PARTITION BY FinishedGood,alternate_designator ORDER BY  alternate_designator,FinishedGoodOpSeq,FinishedGoodOpSeq  ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW ) FiberCount
+				INTO #FiberCount
+				FROM cteFiberCount K
+
+				CREATE INDEX IX_FiberCount ON #FiberCount (FinishedGood, FinishedGoodOpSeq, alternate_designator)
+
+
+				--Remove any duplicates found in the #FiberCount and assign the fiber count to the appropriate operation
+				IF OBJECT_ID(N'tempdb..#FiberCountByOp', N'U') IS NOT NULL
+				DROP TABLE #FiberCountByOp;
+				;WITH cteFiberCountByOp
+				AS(
+				SELECT DISTINCT G.true_operation_code, J.FiberCount, G.item_number, G.department_code, J.alternate_designator,FinishedGoodOpSeq,true_operation_seq_num
+				, MIN(G.true_operation_seq_num) OVER (PARTITION BY J.FiberCount, G.item_number, J.alternate_designator, FinishedGoodOpSeq) Min_true_operation_seq_num
+				FROM dbo.Oracle_Routes G 
+				INNER JOIN #FiberCount J ON J.alternate_designator = G.alternate_routing_designator AND J.FinishedGood = G.item_number AND G.operation_seq_num >= j.FinishedGoodOpSeq
+				INNER JOIN Setup.DepartmentIndicator B ON B.department_code = G.department_code AND g.pass_to_aps = 'y'
+				)
+				,cteUniqueFiberCountByOp
+				AS(
+					SELECT item_number,cteFiberCountByOp.true_operation_code,cteFiberCountByOp.FiberCount,alternate_designator, cteFiberCountByOp.true_operation_seq_num, cteFiberCountByOp.department_code
+					,ROW_NUMBER() OVER (PARTITION BY item_number,cteFiberCountByOp.true_operation_code,alternate_designator ORDER BY cteFiberCountByOp.FiberCount DESC) RowNumber
+					FROM cteFiberCountByOp INNER JOIN Setup.DepartmentIndicator B ON B.department_code = cteFiberCountByOp.department_code
+				)
+				SELECT G.item_number, G.true_operation_code, G.FiberCount, G.alternate_designator, G.RowNumber
+				INTO #FiberCountByOp
+				FROM cteUniqueFiberCountByOp G
+				WHERE RowNumber = 1 AND G.true_operation_code IS NOT NULL
+
+                
+				--Merge data set into setup.ItemFiberCountByOperation for fiber count
+				MERGE setup.ItemFiberCountByOperation AS Target
+				USING (
+						SELECT item_number, true_operation_code, FiberCount, alternate_designator 
+						FROM #FiberCountByOp
+						) AS Source ON (Source.item_number = Target.ItemNumber AND Source.true_operation_code = Target.TrueOperationCode
+						AND Target.PrimaryAlternate = Source.alternate_designator)
+				WHEN MATCHED THEN
+					UPDATE SET Target.FiberCount = Source.FiberCount
+				WHEN NOT MATCHED BY TARGET THEN
+					INSERT (ItemNumber, TrueOperationCode, FiberCount, PrimaryAlternate)
+					VALUES	(Source.item_number, Source.true_operation_code, Source.FiberCount, Source.alternate_designator);
+				--OUTPUT $action, Inserted.*, Deleted.*; 
+
+
+				IF OBJECT_ID(N'tempdb..##BomExplode', N'U') IS NOT NULL
+				DROP TABLE ##BomExplode;
+		COMMIT TRAN
+	END TRY
+	BEGIN CATCH
+		ROLLBACK TRANSACTION;
+
+ 
+		PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
+		PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));
+ 
+		THROW;
+	END CATCH
+
+	--Insert any missing make item's with an inspection step
+		BEGIN TRY
+		BEGIN TRAN
+			INSERT INTO Setup.ItemFiberCountByOperation
+			(
+				ItemNumber,
+				TrueOperationCode,
+				PrimaryAlternate,
+				FiberCount
+			)
+			SELECT DISTINCT G.item_number, G.operation_code, G.alternate_routing_designator, 0
+			FROM Setup.ItemFiberCountByOperation k RIGHT JOIN dbo.Oracle_Routes G
+			 ON K.ItemNumber = G.item_number AND G.operation_code = K.TrueOperationCode AND k.PrimaryAlternate = G.alternate_routing_designator
+			INNER JOIN Setup.DepartmentIndicator i ON i.department_code = g.department_code
+			WHERE K.ItemNumber IS NULL AND G.pass_to_aps = 'y' --AND G.item_number = 'DNO-9269'
+		COMMIT TRAN
+	END TRY
+	BEGIN CATCH
+		ROLLBACK TRANSACTION;
+
+ 
+		PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
+		PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));
+ 
+		THROW;
+	END CATCH
+
+			--Add any missing items with a QC step with the fiber count of 0
+	BEGIN TRY
+		BEGIN TRAN
+			MERGE setup.ItemFiberCountByOperation AS Target
+			USING (
+					SELECT DISTINCT	K.item_number, A.operation_code, A.alternate_routing_designator, 0 AS FiberCount
+					FROM dbo.Oracle_Items K LEFT JOIN Setup.ItemFiberCountByOperation G ON K.item_number = G.ItemNumber
+					LEFT JOIN dbo.Oracle_Routes	A ON A.item_number = K.item_number 
+					INNER JOIN Setup.DepartmentIndicator B ON B.department_code = A.department_code
+					WHERE make_buy  = 'BUY' AND G.ItemNumber IS NULL AND A.pass_to_aps = 'y'
+				) AS Source ON (Source.item_number = Target.ItemNumber AND Source.operation_code = Target.TrueOperationCode
+					AND Target.PrimaryAlternate = Source.alternate_routing_designator)
+			WHEN MATCHED THEN
+				UPDATE SET Target.FiberCount = Source.FiberCount
+			WHEN NOT MATCHED BY TARGET THEN
+				INSERT (ItemNumber, TrueOperationCode, FiberCount, PrimaryAlternate)
+				VALUES	(Source.item_number, Source.operation_code, Source.FiberCount, Source.alternate_routing_designator);
+			--OUTPUT $action, Inserted.*, Deleted.*; 
+		COMMIT TRAN
+	END TRY
+	BEGIN CATCH
+		ROLLBACK TRANSACTION;
+
+ 
+		PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
+		PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));
+ 
+		THROW;
+	END CATCH
+
+
+	--Update any fiber count that is 0 and has a fiber count product category > 0
+	BEGIN TRY
+		BEGIN TRAN
+			;WITH cteZeroFiberCount
+			AS(
+				SELECT G.ItemNumber, k.TrueOperationCode, k.PrimaryAlternate,CategoryName, k.ItemFiberCountByOp_ID
+				FROM Setup.ItemFiberCountByOperation K INNER JOIN [NAASPB-PRD04\SQL2014].Premise.dbo.AFLPRD_INVItmCatg_CAB G ON K.ItemNumber = G.ItemNumber
+				WHERE FiberCount = 0 AND G.CategorySetName LIKE '%FIBER COUNT%' --AND ISNUMERIC(G.CategoryName) = 1
+
+			)
+			UPDATE K
+			SET FiberCount = X.FiberCount
+			FROM(
+				SELECT SUM(CAST(cteZeroFiberCount.CategoryName AS INT)) FiberCount, cteZeroFiberCount.ItemFiberCountByOp_ID
+				FROM cteZeroFiberCount
+				GROUP BY ItemNumber, TrueOperationCode, PrimaryAlternate,ItemFiberCountByOp_ID
+				) X INNER JOIN Setup.ItemFiberCountByOperation K ON K.ItemFiberCountByOp_ID = X.ItemFiberCountByOp_ID
+		COMMIT TRAN
+	END TRY
+	BEGIN CATCH
+		ROLLBACK TRANSACTION;
+
+ 
+		PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
+		PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));
+ 
+		THROW;
+	END CATCH
+
+	--Update any fiber count that is 0 to the last 3 positions of the Q operation.
+	BEGIN TRY
+		BEGIN TRAN
+			;WITH cteFiberCount
+			AS(
+				SELECT K.ItemNumber, k.TrueOperationCode, CAST(RIGHT(K.TrueOperationCode,3) AS INT) AS FiberCount,ItemFiberCountByOp_ID
+				FROM Setup.ItemFiberCountByOperation K 
+				WHERE FiberCount = 0 AND ISNUMERIC(RIGHT(K.TrueOperationCode,3)) = 1
+
+			)
+			UPDATE K
+			SET FiberCount = X.FiberCount
+			FROM cteFiberCount X INNER JOIN Setup.ItemFiberCountByOperation K ON K.ItemFiberCountByOp_ID = X.ItemFiberCountByOp_ID
+		COMMIT TRAN
+	END TRY
+	BEGIN CATCH
+		ROLLBACK TRANSACTION;
+
+ 
+		PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
+		PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));
+ 
+		THROW;
+	END CATCH
+
+
+
+END
+
+
+
+
+GO
diff --git a/Stored Procedures/Setup.usp_GetItemAttributeData.sql b/Stored Procedures/Setup.usp_GetItemAttributeData.sql
new file mode 100644
index 0000000..3f71d9b
--- /dev/null
+++ b/Stored Procedures/Setup.usp_GetItemAttributeData.sql
@@ -0,0 +1,260 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+
+
+
+
+
+
+
+
+
+-- =============================================
+-- Author:      Bryan Eddy
+-- Create date: 9/11/2017
+-- Description: Procedure insert data into Setup.ItemAttributes table for Oracle to pick up
+-- Version: 2
+-- Update:	Added update statement to identify if a binder exists in the Bom for the item.
+-- =============================================
+
+CREATE PROCEDURE [Setup].[usp_GetItemAttributeData]
+AS
+
+	SET NOCOUNT ON;
+BEGIN
+ 
+		DECLARE @ErrorNumber INT = ERROR_NUMBER();
+		DECLARE @ErrorLine INT = ERROR_LINE();
+
+
+--Update all items with the latest fiber count
+EXEC [Setup].usp_GetFiberCount @RunType = 2
+
+--Get cable color.  Find color chips or compound in BOM and rank to find the sheathed cable color
+	BEGIN TRY
+		BEGIN TRAN
+			;WITH cteSetup
+			as(
+		
+				SELECT DISTINCT G.item_number,R.AttributeNameID,G.comp_item, P.attribute_name, P.attribute_value, o.inventory_item_status_code,G.opseq,
+				DENSE_RANK() OVER (PARTITION BY G.item_number ORDER BY G.item_number,G.opseq ASC) AS OpSeqRank
+				,ROW_NUMBER() OVER (PARTITION BY G.item_number,G.opseq   ORDER BY G.item_number,(CASE WHEN z.attribute_value = 'COLOR CHIPS' THEN 1 ELSE 0 END)  Desc ) AS RowNumber
+				--,COUNT(comp_item) OVER (PARTITION BY true_operation_code, comp_item) CountOfComponent
+				FROM DBO.Oracle_BOMs G
+				INNER JOIN Oracle_Item_Attributes P ON P.item_number = G.comp_item
+				INNER JOIN setup.ApsSetupAttributeReference R ON R.OracleAttribute = P.attribute_name
+				INNER JOIN dbo.Oracle_Items O ON O.item_number = P.item_number
+				INNER JOIN dbo.Oracle_Item_Attributes Z ON G.comp_item = Z.item_number
+				WHERE P.attribute_name = 'COLOR'  AND Z.attribute_name = 'MATERIAL TYPE' AND Z.attribute_value IN ('COMPOUND','COLOR CHIPS','INK') and alternate_bom_designator = 'primary'
+		
+
+			)
+			UPDATE K
+			SET K.CableColor = g.attribute_value
+			--select *
+			FROM cteSetup G INNER JOIN setup.ItemAttributes K ON G.item_Number = K.ItemNumber
+			WHERE OpSeqRank = 1 and RowNumber = 1 AND DATEDIFF(day,DateRevised,getdate()) = 0
+		COMMIT TRAN
+	END TRY
+	BEGIN CATCH	
+		IF @@TRANCOUNT > 0
+		ROLLBACK TRANSACTION;
+ 
+		PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
+		PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));
+ 
+		THROW;
+	END CATCH;
+
+
+	--Get if the BOM contains GEL
+	BEGIN TRY
+		BEGIN TRAN
+			;WITH cteGel
+			as(
+				SELECT DISTINCT K.item_number, comp_item, ROW_NUMBER() OVER (PARTITION BY k.item_number ORDER BY k.item_number) RowNumber
+				FROM DBO.Oracle_BOMs K INNER JOIN dbo.Oracle_Item_Attributes G ON G.item_number = K.comp_item
+				WHERE G.attribute_name = 'MATERIAL TYPE' AND G.attribute_value = 'GEL' AND alternate_bom_designator = 'primary'
+			)
+			UPDATE K
+			SET K.Gel = comp_item
+			--select *
+			FROM cteGel G INNER JOIN setup.ItemAttributes K ON G.item_Number = K.ItemNumber
+			WHERE RowNumber = 1 AND DATEDIFF(day,DateRevised,getdate()) = 0
+		COMMIT TRAN
+	END TRY
+	BEGIN CATCH
+		IF @@TRANCOUNT > 0
+		ROLLBACK TRANSACTION;
+ 
+		PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
+		PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));
+ 
+		THROW;
+	END CATCH;
+
+	--Get OD of items from setup data
+	BEGIN TRY
+		BEGIN TRAN
+			;WITH cteAttributes
+			AS (
+				SELECT DISTINCT AttributeValue, K.AttributeName, SetupNumber,P.AttributeNameID
+				FROM [Setup].vInterfaceSetupAttributes K INNER JOIN Setup.ApsSetupAttributeReference G ON K.AttributeID = G.AttributeID
+				  INNER JOIN SETUP.ApsSetupAttributes P ON P.AttributeNameID = G.AttributeNameID 
+				  INNER JOIN setup.MachineNames M ON M.MachineID = MachineID
+				  WHERE P.AttributeNameID = 3 AND AttributeValue IS NOT NULL
+			),
+			 cteOD
+			AS(
+				SELECT DISTINCT item_number, true_operation_seq_num, true_operation_code, AttributeValue, AttributeName,
+				ROW_NUMBER() OVER (PARTITION BY item_number ORDER BY item_number,true_operation_seq_num DESC) RowNumber
+				FROM Oracle_Routes K INNER JOIN cteAttributes G 
+				ON K.true_operation_code = G.SetupNumber
+				WHERE alternate_routing_designator = 'PRIMARY'
+			)
+			UPDATE K
+			SET K.NominalOD = G.AttributeValue
+			FROM cteOD G INNER JOIN Setup.ItemAttributes K ON G.item_number = K.ItemNumber
+			WHERE RowNumber = 1 AND DATEDIFF(DAY,DateRevised,GETDATE()) = 0
+		COMMIT TRAN
+	END TRY
+	BEGIN CATCH
+		IF @@TRANCOUNT > 0
+		ROLLBACK TRANSACTION;
+ 
+		PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
+		PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));
+ 
+		THROW;
+	END CATCH;
+
+
+--Get OD of items from Premise DB
+	BEGIN TRY
+		BEGIN TRAN
+			DECLARE @RecordCount INT;
+			SELECT @RecordCount = COUNT(*) FROM [NAASPB-PRD04\SQL2014].Premise.Schedule.vInterfaceItemAttributes
+			IF @RecordCount > 0 
+				BEGIN
+
+					UPDATE G
+					SET G.NominalOD = CASE WHEN G.NominalOD IS NULL THEN K.NominalOD ELSE G.NominalOD END, G.CableColor = CASE WHEN G.CableColor IS NULL THEN K.CableColor ELSE K.CableColor END
+					FROM [NAASPB-PRD04\SQL2014].Premise.Schedule.vInterfaceItemAttributes K INNER JOIN setup.ItemAttributes G ON G.ItemNumber = K.ItemNumber
+					WHERE g.NominalOD IS NULL
+				END
+		COMMIT TRAN
+	END TRY
+	BEGIN CATCH
+		IF @@TRANCOUNT > 0
+		ROLLBACK TRANSACTION;
+ 
+		PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
+		PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));
+ 
+		THROW;
+	END CATCH;
+
+--Get OD of items from Oracle Specs that are still null
+	BEGIN TRY
+		BEGIN TRAN
+		--IF OBJECT_ID('[NAASPB-PRD04\SQL2014].Premise.dbo.AFLPRD_INVSysItemSpec_CAB', 'U') IS NOT NULL 
+		--	BEGIN
+				--DECLARE @RecordCount int;
+				SELECT @RecordCount = COUNT(*) FROM [NAASPB-PRD04\SQL2014].Premise.dbo.AFLPRD_INVSysItemSpec_CAB
+				IF @RecordCount > 0 
+					BEGIN
+						
+						;WITH cteNominalOD
+						AS(
+						SELECT G.ItemNumber, NominalOD, SpecificationElement, CAST(REPLACE(TargetValue,',','.') AS FLOAT) AS attribute_value
+						,ROW_NUMBER() OVER (PARTITION BY K.ItemNumber ORDER BY K.ItemNumber ASC,CAST(REPLACE(TargetValue,',','.') AS FLOAT) DESC) AS RowNumber
+						  FROM [Scheduling].[vItemAttributes] G INNER JOIN [NAASPB-PRD04\SQL2014].Premise.dbo.AFLPRD_INVSysItemSpec_CAB K ON K.ItemNumber = G.ItemNumber
+						  WHERE NominalOD IS NULL AND K.SpecificationElement IN( 'UNIT NOMINAL OD','JACKET OD') AND TargetValue IS NOT NULL  
+						)
+						UPDATE G
+						SET NominalOD = attribute_value
+						FROM cteNominalOD K INNER JOIN setup.ItemAttributes G ON G.ItemNumber = K.ItemNumber
+						WHERE RowNumber = 1
+					END
+			--END
+		COMMIT TRAN
+	END TRY
+	BEGIN CATCH
+		IF @@TRANCOUNT > 0
+		ROLLBACK TRANSACTION;
+ 
+		PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
+		PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));
+ 
+		THROW;
+	END CATCH;
+
+
+
+	--Get cables that have colored binders
+BEGIN TRY
+		BEGIN TRAN
+			UPDATE P
+			SET P.ContainsFiberIdBinders = 1
+			FROM DBO.Oracle_Item_Attributes K INNER JOIN DBO.Oracle_BOMs G ON K.item_number = G.comp_item
+			INNER JOIN setup.ItemAttributes P ON P.ItemNumber = G.item_number
+			WHERE attribute_value = 'COLOR BINDER'
+		COMMIT TRAN
+	END TRY
+	BEGIN CATCH
+		IF @@TRANCOUNT > 0
+		ROLLBACK TRANSACTION;
+ 
+		PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
+		PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));
+ 
+		THROW;
+	END CATCH;
+
+	--Get if cable contains any binder
+	BEGIN TRY
+		BEGIN TRAN
+			UPDATE P
+			SET P.ContainsBinder = 1
+			FROM DBO.Oracle_BOMs G 
+			INNER JOIN setup.ItemAttributes P ON P.ItemNumber = G.item_number
+			WHERE G.comp_item LIKE 'bin%'
+		COMMIT TRAN
+	END TRY
+	BEGIN CATCH
+		IF @@TRANCOUNT > 0
+		ROLLBACK TRANSACTION;
+ 
+		PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
+		PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));
+ 
+		THROW;
+	END CATCH;
+
+	--Get if cable contains a stripe
+	BEGIN TRY
+		BEGIN TRAN
+			UPDATE K
+			SET Printed = SetupAttributeValue
+			FROM Setup.vSetupTimesItem G INNER JOIN Setup.ItemAttributes K ON K.ItemNumber = G.Item_Number
+			WHERE G.AttributeNameID = 37
+		COMMIT TRAN
+	END TRY
+	BEGIN CATCH
+		IF @@TRANCOUNT > 0
+		ROLLBACK TRANSACTION;
+ 
+		PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
+		PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));
+ 
+		THROW;
+	END CATCH;
+
+
+END
+
+
+
+GO
diff --git a/Stored Procedures/Setup.usp_LoadFromToMatrix.sql b/Stored Procedures/Setup.usp_LoadFromToMatrix.sql
new file mode 100644
index 0000000..fa4016a
--- /dev/null
+++ b/Stored Procedures/Setup.usp_LoadFromToMatrix.sql
@@ -0,0 +1,39 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+
+
+
+
+-- =============================================
+-- Author:		Bryan Eddy
+-- Create date: 8/1/2017
+-- Description:	Master procedure to run all other procedures to create setup logic
+-- Version: 1
+-- Update:	Added error handling
+-- =============================================
+CREATE PROCEDURE [Setup].[usp_LoadFromToMatrix]
+
+AS
+
+	SET NOCOUNT ON;
+BEGIN
+
+--EXEC dbo.usp_CreateSetupTables
+
+--DELETE FROM setup.AttributeMatrixFromTo
+
+EXEC Setup.usp_CreateSheathingMatrix
+
+EXEC Setup.usp_CreateOpgwPipeMatrix
+
+EXEC Setup.usp_CreateSzMatrix
+
+EXEC Setup.usp_CreateBufferingMatrix
+
+END
+
+
+
+GO
diff --git a/Stored Procedures/dbo.usp_NormalizeRouting.sql b/Stored Procedures/dbo.usp_NormalizeRouting.sql
new file mode 100644
index 0000000..c347748
--- /dev/null
+++ b/Stored Procedures/dbo.usp_NormalizeRouting.sql
@@ -0,0 +1,217 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+-- =============================================
+-- Author:		Bryan Eddy
+-- Create date: 7/7/2017
+-- Description:	Normalize the Operation Sequence in the routing to call for the Trueoperation(Setup Indicator)
+-- Date Modified: 9/15/2017
+-- Modifications: 
+-- =============================================
+CREATE PROCEDURE [dbo].[usp_NormalizeRouting]
+
+AS
+
+SET NOCOUNT ON
+
+UPDATE Oracle_Routes
+SET true_operation_code = null, true_operation_seq_num = null
+
+UPDATE Oracle_Routes
+SET pass_to_aps  = 'Y'
+WHERE pass_to_aps IS NULL --or operation_code like 'd%'
+
+
+IF OBJECT_ID(N'tempdb..#OrderHold', N'U') IS NOT NULL
+DROP TABLE #OrderHold;
+
+
+CREATE TABLE #OrderHold(
+ item_number varchar(50),
+ operation_seq_num INT,
+ SeqLayer int,
+ operation_code varchar(5),
+ DummyFlag bit,
+ OperationDescription varchar(300),
+ alternate_routing_designator varchar(50),
+ pass_to_aps varchar(2)
+);
+
+--Using Cursor
+DECLARE @MyCursor CURSOR;
+ 
+--sample variables to hold each row's content
+DECLARE @item_number varchar(50);
+DECLARE @operation_seq_num INT;
+DECLARE @SeqLayer int = 10;
+DECLARE @LastItem varchar(50);
+DECLARE @LastOp varchar(50);
+DECLARE @operation_code VARCHAR(5);
+DECLARE @Lastoperation_code varchar(5);
+DECLARE @pass_to_aps varchar(1);
+DECLARE @Lastpass_to_aps varchar(2);
+DECLARE @DummyFlag bit;
+DECLARE @OperationDescription varchar(300);
+DECLARE @alternate_routing_designator varchar(50);
+DECLARE @Last_Alternate varchar(100);
+DECLARE @FirstTrueOp bit;
+DECLARE @NextSeq bit;
+DECLARE @NewItem bit;
+
+SET @FirstTrueOp = 0;
+SET @NextSeq = 0;
+SET @SeqLayer = 10;
+Set @NewItem = 0;
+
+
+ --Iterate through table and apply Unit ID and Layer ID
+ --Unit ID's are make components or units that schedule needs to schedule to make
+ --Layer ID is used to identify what components are used together
+BEGIN
+    SET @MyCursor = CURSOR FOR
+         select item_number, operation_seq_num, operation_code,alternate_routing_designator,pass_to_aps
+		 FROM  Oracle_Routes
+		 WHERE pass_to_aps <> 'N' --and item_number in ('rd2014-0012','PS10262-10','O-SS-1273-02','A-BT-1130-12')
+		 ORDER BY item_number,alternate_routing_designator,operation_seq_num
+		
+ 
+    OPEN @MyCursor
+    FETCH NEXT FROM @MyCursor
+    INTO @item_number,@operation_seq_num, @operation_code,@alternate_routing_designator,@pass_to_aps
+
+
+    WHILE @@FETCH_STATUS = 0
+    BEGIN
+     --Recongizes change in Assembly item and resets indicators
+	 IF (@item_number = @LastItem AND @alternate_routing_designator = @Last_Alternate )
+		BEGIN
+			SELECT @SeqLayer = @SeqLayer, @NewItem = 0;
+		END
+	ELSE 
+		BEGIN 
+			SELECT @SeqLayer = 10, @NewItem = 1,@FirstTrueOp = 0;
+		END
+
+	--Recognizes a change in operation and assigns the appropriate sequence
+	IF (--(@operation_code <> @Lastoperation_code) AND
+		 (@Lastpass_to_aps <> 'D' AND @pass_to_aps <>'D')
+		AND @NewItem = 0) 
+		BEGIN
+			SET @NextSeq = 1;
+		END
+	ELSE
+		BEGIN
+			SET @NextSeq = 0;
+		END
+	--If the criteria is passed from the last if statment and there is no proceeding true operation code then execute
+	IF  @NextSeq = 1 or (@FirstTrueOp = 1 and @Lastpass_to_aps = 'D' AND @pass_to_aps ='Y') OR (@FirstTrueOp = 0 and @Lastpass_to_aps = 'Y' AND @pass_to_aps ='D') 
+		BEGIN
+			SET @SeqLayer = @SeqLayer + 10
+		END
+
+		
+		
+	IF @pass_to_aps = 'Y' or @pass_to_aps is null
+		BEGIN
+			SELECT @DummyFlag = 0
+		END
+	ELSE
+		BEGIN
+			SELECT @DummyFlag = 1
+		END
+
+
+	--Reset the FirstTrueOperation
+	IF @NewItem = 1 and @pass_to_aps = 'Y'
+		BEGIN
+			SET @FirstTrueOp = 1
+		END
+		 
+
+	 SELECT @LastItem = @item_number, @Lastoperation_code = @operation_code, @Lastpass_to_aps =  @pass_to_aps, @Last_Alternate = @alternate_routing_designator;
+
+
+  --Insert data into temp table
+  INSERT INTO #OrderHold(item_number,SeqLayer,operation_code,operation_seq_num,DummyFlag,alternate_routing_designator,pass_to_aps)
+  VALUES (@item_number,@SeqLayer,@operation_code,@operation_seq_num,@DummyFlag,@alternate_routing_designator,@pass_to_aps)
+
+
+  FETCH NEXT FROM @MyCursor
+  INTO @item_number,@operation_seq_num, @operation_code,@alternate_routing_designator,@pass_to_aps
+   
+    END; 
+ 
+    CLOSE @MyCursor ;
+    DEALLOCATE @MyCursor;
+END;
+
+
+
+
+IF OBJECT_ID(N'tempdb..#NormalizedRouting', N'U') IS NOT NULL
+DROP TABLE #NormalizedRouting
+;
+SELECT *, FIRST_VALUE(operation_code) OVER (PARTITION BY alternate_routing_designator,item_number,seqLayer ORDER BY item_number,alternate_routing_designator,SeqLayer,DummyFlag,operation_seq_num) TrueOperation
+INTO #NormalizedRouting
+FROM #OrderHold
+--WHERE item_number in( 'PG08030-00','a-bt-1014-01','O-SS-0370-00')-- AND pass_to_aps <> 'n'
+ORDER BY item_number,alternate_routing_designator,operation_seq_num
+;
+
+UPDATE Oracle_Routes
+SET true_operation_code = G.TrueOperation, true_operation_seq_num = SeqLayer
+FROM #NormalizedRouting G INNER JOIN Oracle_Routes K ON K.operation_seq_num = G.operation_seq_num AND K.item_number = G.item_number AND K.alternate_routing_designator = G.alternate_routing_designator
+--WHERE k.item_number in( 'DNS-5314')
+--ORDER BY k.item_number,k.alternate_routing_designator,SeqLayer,k.operation_seq_num;
+
+
+
+
+
+IF OBJECT_ID(N'tempdb..#SetupNormalize', N'U') IS NOT NULL
+DROP TABLE #SetupNormalize;
+WITH
+	cteBomSetup(Item,operation_seq_num,SetupLocation, BomSetup,Alternate,UnitId,LayerID)
+	as(
+		SELECT DISTINCT G.item_number,g.opseq,'Bom' as SetupLocation,REPLACE(g.comp_item,'SETUP ','') BomSetup
+		,g.alternate_bom_designator,g.unit_id,g.layer_id
+		FROM Oracle_BOMs G
+		WHERE g.comp_item like 'Setup%'
+	),
+	cteRoute(Item, operation_seq_num,SetupLocation,operation_code, ItemStatus, Alternate,dummy_seq)
+	as(
+
+		SELECT DISTINCT k.item_number,operation_seq_num,'Route' as SetupLocation
+		,true_operation_code as operation_code
+		, g.inventory_item_status_code, alternate_routing_designator,true_operation_seq_num
+		FROM Oracle_Routes K INNER JOIN [Oracle_Items] G ON K.item_number = G.item_number
+		--WHERE K.item_number in( 'DNS-5314')
+
+	)
+
+	SELECT DISTINCT cteRoute.Item, dummy_seq,
+	COALESCE(BomSetup,cteRoute.operation_code) as Setup ,BomSetup,operation_code
+	  , k.item_description as Item_Description, COALESCE(cteBomSetup.operation_seq_num,cteRoute.operation_seq_num) operation_seq_num
+	,COALESCE(cteBomSetup.SetupLocation,cteRoute.SetupLocation) as SetupLocation--, cteBomSetup.Alternate as BomAlternate, cteRoute.alternate
+	,COALESCE(cteBomSetup.Alternate,cteRoute.Alternate,'Primary') as PrimaryAlt
+	,UnitID,LayerID, 
+	FIRST_VALUE(COALESCE(BomSetup,cteRoute.operation_code)) OVER (PARTITION BY cteRoute.Item,dummy_seq,COALESCE(cteBomSetup.Alternate,cteRoute.Alternate,'Primary') ORDER BY (CASE WHEN BomSetup IS NULL THEN 1 ELSE 0 END), cteRoute.Item) as TrueOperation
+	INTO #SetupNormalize
+	FROM cteRoute LEFT JOIN cteBomSetup ON cteRoute.Item = cteBomSetup.item AND cteRoute.operation_seq_num = cteBomSetup.operation_seq_num
+	INNER JOIN [Oracle_Items] K ON cteRoute.Item = k.item_number
+	AND COALESCE(cteRoute.Alternate,'Primary') = COALESCE(cteBomSetup.Alternate,'Primary')
+	--WHERE item_number in( 'DNS-5314')
+;
+
+
+
+UPDATE Oracle_Routes
+SET true_operation_code = G.TrueOperation
+FROM #SetupNormalize G INNER JOIN Oracle_Routes K ON K.operation_seq_num = G.operation_seq_num AND K.item_number = G.Item AND K.alternate_routing_designator = G.PrimaryAlt;
+
+UPDATE Oracle_Routes
+SET true_operation_code = department_code
+WHERE operation_code is null and department_code is not null
+
+GO
diff --git a/Stored Procedures/dbo.usp_NormalizeRouting_DJ.sql b/Stored Procedures/dbo.usp_NormalizeRouting_DJ.sql
new file mode 100644
index 0000000..7d8e0c8
--- /dev/null
+++ b/Stored Procedures/dbo.usp_NormalizeRouting_DJ.sql
@@ -0,0 +1,209 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+-- =============================================
+-- Author:		Bryan Eddy
+-- Create date: 9/1/2017
+-- Description:	Normalize the Operation Sequence in the routing to call for the Trueoperation(Setup Indicator) for DJ
+-- Date Modified:
+-- Modifications: 
+-- =============================================
+CREATE PROCEDURE [dbo].[usp_NormalizeRouting_DJ]
+
+AS
+
+SET NOCOUNT	 ON
+
+UPDATE Oracle_DJ_Routes
+SET true_operation_code = null, true_operation_seq_num = null
+
+UPDATE Oracle_DJ_Routes
+SET send_to_aps  = 'Y'
+WHERE send_to_aps IS NULL --or operation_code like 'd%'
+
+IF OBJECT_ID(N'tempdb..#OrderHold', N'U') IS NOT NULL
+DROP TABLE #OrderHold;
+
+
+CREATE TABLE #OrderHold(
+ wip_entity_name varchar(50),
+ operation_seq_num INT,
+ SeqLayer int,
+ operation_code varchar(5),
+ DummyFlag bit,
+ OperationDescription varchar(300),
+ alternate_routing_designator varchar(50),
+ send_to_aps varchar(2)
+);
+
+--Using Cursor
+DECLARE @MyCursor CURSOR;
+ 
+--sample variables to hold each row's content
+DECLARE @wip_entity_name varchar(50);
+DECLARE @operation_seq_num INT;
+DECLARE @SeqLayer int = 10;
+DECLARE @LastItem varchar(50);
+DECLARE @LastOp varchar(50);
+DECLARE @operation_code VARCHAR(5);
+DECLARE @Lastoperation_code varchar(5);
+DECLARE @send_to_aps varchar(1);
+DECLARE @Lastsend_to_aps varchar(2);
+DECLARE @DummyFlag bit;
+DECLARE @OperationDescription varchar(300);
+DECLARE @alternate_routing_designator varchar(50);
+DECLARE @FirstTrueOp bit;
+DECLARE @NextSeq bit;
+DECLARE @NewItem bit;
+
+SET @FirstTrueOp = 0;
+SET @NextSeq = 0;
+SET @SeqLayer = 10;
+Set @NewItem = 0;
+
+
+ --Iterate through table and apply Unit ID and Layer ID
+ --Unit ID's are make components or units that schedule needs to schedule to make
+ --Layer ID is used to identify what components are used together
+BEGIN
+    SET @MyCursor = CURSOR FOR
+         select distinct wip_entity_name, operation_seq_num, operation_code,send_to_aps
+		 FROM  Oracle_DJ_Routes
+		 WHERE send_to_aps <> 'N' --and item_number like 'O-SS-%'
+		 ORDER BY wip_entity_name,operation_seq_num
+ 
+    OPEN @MyCursor
+    FETCH NEXT FROM @MyCursor
+    INTO @wip_entity_name,@operation_seq_num, @operation_code,@send_to_aps
+
+
+    WHILE @@FETCH_STATUS = 0
+    BEGIN
+     --Recongizes change in Assembly item and resets indicators
+	 IF (@wip_entity_name = @LastItem)
+		BEGIN
+			SELECT @SeqLayer = @SeqLayer, @NewItem = 0;
+		END
+	ELSE 
+		BEGIN 
+			SELECT @SeqLayer = 10, @NewItem = 1,@FirstTrueOp = 0;
+		END
+
+	--Recognizes a change in operation and assigns the appropriate layer id
+	IF (--@operation_code <> @Lastoperation_code  and
+		 (@Lastsend_to_aps <> 'D' AND @send_to_aps <>'D')
+		AND @NewItem = 0) 
+		BEGIN
+			SET @NextSeq = 1;
+		END
+	ELSE
+		BEGIN
+			SET @NextSeq = 0;
+		END
+	--If the criteria is passed from the last if statment and there is no proceeding true operation code then execute
+	IF  @NextSeq = 1 OR (@FirstTrueOp = 1 and @Lastsend_to_aps = 'D' AND @send_to_aps ='Y') OR (@FirstTrueOp = 0 and @Lastsend_to_aps = 'Y' AND @send_to_aps ='D') 
+		BEGIN
+			SET @SeqLayer = @SeqLayer + 10
+		END
+
+		
+	IF @send_to_aps = 'Y' or @send_to_aps is null
+		BEGIN
+			SELECT @DummyFlag = 0
+		END
+	ELSE
+		BEGIN
+			SELECT @DummyFlag = 1
+		END
+	--Reset the FirstTrueOperation
+	IF @NewItem = 1 and @send_to_aps = 'Y'
+		BEGIN
+			SET @FirstTrueOp = 1
+		END
+		 
+
+
+	 SELECT @LastItem = @wip_entity_name, @Lastoperation_code = @operation_code, @Lastsend_to_aps =  @send_to_aps;
+
+
+  --Insert data into temp table
+  INSERT INTO #OrderHold(wip_entity_name,SeqLayer,operation_code,operation_seq_num,DummyFlag,send_to_aps)
+  VALUES (@wip_entity_name,@SeqLayer,@operation_code,@operation_seq_num,@DummyFlag,@send_to_aps)
+
+
+  FETCH NEXT FROM @MyCursor
+  INTO @wip_entity_name,@operation_seq_num, @operation_code,@send_to_aps
+   
+    END; 
+ 
+    CLOSE @MyCursor ;
+    DEALLOCATE @MyCursor;
+END;
+
+
+
+
+IF OBJECT_ID(N'tempdb..#NormalizedRouting', N'U') IS NOT NULL
+DROP TABLE #NormalizedRouting
+;
+SELECT *, FIRST_VALUE(operation_code) OVER (PARTITION BY  SeqLayer,wip_entity_name ORDER BY DummyFlag,wip_entity_name,SeqLayer,operation_seq_num) TrueOperation
+INTO #NormalizedRouting
+FROM #OrderHold
+--WHERE  wip_entity_name LIKE '17584891'
+ORDER BY wip_entity_name,SeqLayer,operation_seq_num
+;
+
+UPDATE Oracle_DJ_Routes
+SET true_operation_code = G.TrueOperation, true_operation_seq_num = SeqLayer
+FROM #NormalizedRouting G INNER JOIN Oracle_DJ_Routes K ON K.operation_seq_num = G.operation_seq_num AND K.wip_entity_name = G.wip_entity_name
+--WHERE K.assembly_item = 'DNA-31074'
+;
+
+
+
+
+
+IF OBJECT_ID(N'tempdb..#SetupNormalize', N'U') IS NOT NULL
+DROP TABLE #SetupNormalize;
+WITH
+	cteBomSetup(Item,operation_seq_num,SetupLocation, BomSetup,UnitId,LayerID)
+	as(
+		SELECT DISTINCT G.wip_entity_name,G.operation_seq_num,'Bom' as SetupLocation,REPLACE(G.component_item,'SETUP ','') BomSetup
+		,g.unit_id,g.layer_id
+		FROM Oracle_DJ_BOM G
+		WHERE g.component_item like 'Setup%'
+	),
+	cteRoute(Item, operation_seq_num,SetupLocation,operation_code, ItemStatus,dummy_seq)
+	as(
+
+		SELECT DISTINCT k.wip_entity_name,operation_seq_num,'Route' as SetupLocation
+		,true_operation_code as operation_code
+		, g.inventory_item_status_code, true_operation_seq_num
+		FROM Oracle_DJ_Routes K INNER JOIN [Oracle_Items] G ON K.assembly_item = g.item_number
+
+	)
+
+	SELECT DISTINCT cteRoute.Item, dummy_seq,
+	COALESCE(BomSetup,cteRoute.operation_code) as Setup ,BomSetup,operation_code
+	  , COALESCE(cteBomSetup.operation_seq_num,cteRoute.operation_seq_num) operation_seq_num
+	,COALESCE(cteBomSetup.SetupLocation,cteRoute.SetupLocation) as SetupLocation--, cteBomSetup.Alternate as BomAlternate, cteRoute.alternate
+	,UnitID,LayerID, 
+	FIRST_VALUE(COALESCE(BomSetup,cteRoute.operation_code)) OVER (PARTITION BY cteRoute.Item,dummy_seq ORDER BY (CASE WHEN BomSetup IS NULL THEN 1 ELSE 0 END), cteRoute.Item) as TrueOperation
+	INTO #SetupNormalize
+	FROM cteRoute LEFT JOIN cteBomSetup ON cteRoute.Item = cteBomSetup.item AND cteRoute.operation_seq_num = cteBomSetup.operation_seq_num
+	--INNER JOIN [Oracle_Items] K ON cteRoute.Item = k.item_number
+	--WHERE wip_entity_name in( 'PE03072-00')
+;
+
+
+
+UPDATE Oracle_DJ_Routes
+SET true_operation_code = G.TrueOperation
+FROM #SetupNormalize G INNER JOIN Oracle_DJ_Routes K ON K.operation_seq_num = G.operation_seq_num AND K.wip_entity_name = G.Item;
+
+
+UPDATE Oracle_DJ_Routes
+SET true_operation_code = department_code
+WHERE operation_code is null and department_code is not null
+GO
diff --git a/Tables/Mes.ItemSetupAttributes.sql b/Tables/Mes.ItemSetupAttributes.sql
new file mode 100644
index 0000000..d85f463
--- /dev/null
+++ b/Tables/Mes.ItemSetupAttributes.sql
@@ -0,0 +1,22 @@
+CREATE TABLE [Mes].[ItemSetupAttributes]
+(
+[ItemSetupAttributeID] [uniqueidentifier] NOT NULL CONSTRAINT [DF__ItemSetup__ItemS__0559BDD1] DEFAULT (newid()),
+[Item_Number] [nvarchar] (30) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
+[Setup] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
+[MachineID] [int] NOT NULL,
+[AttributeNameID] [int] NOT NULL,
+[AttributeValue] [nvarchar] (30) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[DateCreated] [datetime] NULL CONSTRAINT [DF__ItemSetup__DateC__064DE20A] DEFAULT (getdate()),
+[DateRevised] [datetime] NULL CONSTRAINT [DF__ItemSetup__DateR__07420643] DEFAULT (getdate())
+) ON [PRIMARY]
+GO
+ALTER TABLE [Mes].[ItemSetupAttributes] ADD CONSTRAINT [pk_ItemSetupAttributes] PRIMARY KEY CLUSTERED  ([ItemSetupAttributeID]) ON [PRIMARY]
+GO
+ALTER TABLE [Mes].[ItemSetupAttributes] ADD CONSTRAINT [ix_UniqueItemSetupAttribute] UNIQUE NONCLUSTERED  ([Item_Number], [Setup], [MachineID], [AttributeNameID]) ON [PRIMARY]
+GO
+ALTER TABLE [Mes].[ItemSetupAttributes] ADD CONSTRAINT [IX_ItemSetupAttributes_1] UNIQUE NONCLUSTERED  ([Setup], [MachineID], [Item_Number], [AttributeNameID]) ON [PRIMARY]
+GO
+ALTER TABLE [Mes].[ItemSetupAttributes] ADD CONSTRAINT [FK_ItemSetupAttributes_ApsSetupAttributes] FOREIGN KEY ([AttributeNameID]) REFERENCES [Setup].[ApsSetupAttributes] ([AttributeNameID]) ON UPDATE CASCADE
+GO
+ALTER TABLE [Mes].[ItemSetupAttributes] ADD CONSTRAINT [FK_ItemSetupAttributes_MachineNames] FOREIGN KEY ([MachineID]) REFERENCES [Setup].[MachineNames] ([MachineID]) ON UPDATE CASCADE
+GO
diff --git a/Tables/Mes.MachineAttributes.sql b/Tables/Mes.MachineAttributes.sql
new file mode 100644
index 0000000..7012939
--- /dev/null
+++ b/Tables/Mes.MachineAttributes.sql
@@ -0,0 +1,17 @@
+CREATE TABLE [Mes].[MachineAttributes]
+(
+[MachineAttributeID] [int] NOT NULL IDENTITY(1, 1),
+[MachineID] [int] NOT NULL,
+[AttributeNameID] [int] NOT NULL,
+[DateCreated] [datetime] NULL CONSTRAINT [DF__MachineAt__DateC__0A1E72EE] DEFAULT (getdate()),
+[CreatedBy] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL CONSTRAINT [DF__MachineAt__Creat__0B129727] DEFAULT (suser_sname())
+) ON [PRIMARY]
+GO
+ALTER TABLE [Mes].[MachineAttributes] ADD CONSTRAINT [PK_MachineAttributes] PRIMARY KEY CLUSTERED  ([MachineAttributeID]) ON [PRIMARY]
+GO
+ALTER TABLE [Mes].[MachineAttributes] ADD CONSTRAINT [IX_MachineAttributes] UNIQUE NONCLUSTERED  ([MachineID], [AttributeNameID]) ON [PRIMARY]
+GO
+ALTER TABLE [Mes].[MachineAttributes] ADD CONSTRAINT [FK_MachineAttributes_ApsSetupAttributes] FOREIGN KEY ([AttributeNameID]) REFERENCES [Setup].[ApsSetupAttributes] ([AttributeNameID]) ON UPDATE CASCADE
+GO
+ALTER TABLE [Mes].[MachineAttributes] ADD CONSTRAINT [FK_MachineAttributes_MachineNames] FOREIGN KEY ([MachineID]) REFERENCES [Setup].[MachineNames] ([MachineID]) ON UPDATE CASCADE
+GO
diff --git a/Tables/Scheduling.DefinedOperationDuration.sql b/Tables/Scheduling.DefinedOperationDuration.sql
new file mode 100644
index 0000000..10f76d6
--- /dev/null
+++ b/Tables/Scheduling.DefinedOperationDuration.sql
@@ -0,0 +1,17 @@
+CREATE TABLE [Scheduling].[DefinedOperationDuration]
+(
+[MachineID] [int] NOT NULL,
+[True_Operation_Code] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
+[Description] [nvarchar] (200) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[Time_Minutes] [float] NULL CONSTRAINT [DF_DefinedOperationDuration_Time_Minutes] DEFAULT ((0)),
+[RunTypeID] [int] NULL CONSTRAINT [DF_DefinedOperationDuration_RunTypeID] DEFAULT ((1)),
+[CreatedBy] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL CONSTRAINT [DF__DefinedRu__Creat__3D7E1B63] DEFAULT (suser_sname()),
+[DateCreated] [datetime] NULL CONSTRAINT [DF__DefinedRu__DateC__3E723F9C] DEFAULT (getdate())
+) ON [PRIMARY]
+GO
+ALTER TABLE [Scheduling].[DefinedOperationDuration] ADD CONSTRAINT [PK_DefinedRunRates] PRIMARY KEY CLUSTERED  ([MachineID], [True_Operation_Code]) ON [PRIMARY]
+GO
+ALTER TABLE [Scheduling].[DefinedOperationDuration] ADD CONSTRAINT [FK_DefinedOperationDuration_MachineNames] FOREIGN KEY ([MachineID]) REFERENCES [Setup].[MachineNames] ([MachineID]) ON DELETE CASCADE ON UPDATE CASCADE
+GO
+ALTER TABLE [Scheduling].[DefinedOperationDuration] ADD CONSTRAINT [FK_DefinedOperationDuration_OperationRunType] FOREIGN KEY ([RunTypeID]) REFERENCES [Scheduling].[OperationRunType] ([RunTypeID]) ON DELETE SET NULL ON UPDATE CASCADE
+GO
diff --git a/Tables/Scheduling.MachineCapabilityScheduler.sql b/Tables/Scheduling.MachineCapabilityScheduler.sql
new file mode 100644
index 0000000..b697017
--- /dev/null
+++ b/Tables/Scheduling.MachineCapabilityScheduler.sql
@@ -0,0 +1,52 @@
+CREATE TABLE [Scheduling].[MachineCapabilityScheduler]
+(
+[MachineCapabilityID] [int] NOT NULL IDENTITY(1, 1),
+[MachineID] [int] NOT NULL,
+[Setup] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
+[ActiveScheduling] [bit] NULL CONSTRAINT [DF__MachineCa__Activ__4EDDB18F] DEFAULT ((1)),
+[InactiveReason] [nvarchar] (200) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[ActiveStatusChangedDate] [datetime] NULL CONSTRAINT [DF__MachineCa__Activ__4FD1D5C8] DEFAULT (getdate()),
+[ActiveStatusChangedBy] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL CONSTRAINT [DF__MachineCa__Activ__50C5FA01] DEFAULT (suser_sname()),
+[EngineeringAssist] [bit] NULL CONSTRAINT [DF__MachineCa__Engin__51BA1E3A] DEFAULT ((0)),
+[EngineeringAssistReason] [nvarchar] (200) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[CreatedBy] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL CONSTRAINT [DF__MachineCa__Creat__52AE4273] DEFAULT (suser_sname()),
+[DateCreated] [datetime] NULL CONSTRAINT [DF__MachineCa__DateC__53A266AC] DEFAULT (getdate())
+) ON [PRIMARY]
+GO
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+-- =============================================
+-- Author:		Bryan Eddy
+-- Create date: 11/1/2017
+-- Description:	Update the ActiveStatusUpdate field with a user and time the ActiveScheduling status is changed
+-- =============================================
+CREATE TRIGGER [Scheduling].[trg_ActiveSchedulerStatusChange] 
+   ON  [Scheduling].[MachineCapabilityScheduler] 
+   AFTER UPDATE
+AS 
+BEGIN
+	-- SET NOCOUNT ON added to prevent extra result sets from
+	-- interfering with SELECT statements.
+	SET NOCOUNT ON;
+
+		IF  UPDATE(ActiveScheduling)
+			BEGIN
+			  UPDATE t
+			  SET t.ActiveStatusChangedDate = GETDATE() , t.ActiveStatusChangedBy = (SUSER_SNAME()) 
+			  FROM Scheduling.MachineCapabilityScheduler  as t
+			  JOIN inserted i
+			  ON i.MachineCapabilityID = t.MachineCapabilityID 
+		END 
+
+END
+GO
+ALTER TABLE [Scheduling].[MachineCapabilityScheduler] ADD CONSTRAINT [pk_MachineCapability] PRIMARY KEY CLUSTERED  ([MachineID], [Setup]) ON [PRIMARY]
+GO
+CREATE NONCLUSTERED INDEX [MachineSechuler_IX] ON [Scheduling].[MachineCapabilityScheduler] ([ActiveScheduling]) INCLUDE ([MachineID], [Setup]) ON [PRIMARY]
+GO
+CREATE NONCLUSTERED INDEX [Scheduling_MachineCapabilityScheduler_IXX] ON [Scheduling].[MachineCapabilityScheduler] ([EngineeringAssist]) INCLUDE ([MachineID], [Setup]) ON [PRIMARY]
+GO
+ALTER TABLE [Scheduling].[MachineCapabilityScheduler] ADD CONSTRAINT [fk_MachineCapability_MachineName] FOREIGN KEY ([MachineID]) REFERENCES [Setup].[MachineNames] ([MachineID]) ON DELETE CASCADE ON UPDATE CASCADE
+GO
diff --git a/Tables/Scheduling.OperationRunType.sql b/Tables/Scheduling.OperationRunType.sql
new file mode 100644
index 0000000..ccab182
--- /dev/null
+++ b/Tables/Scheduling.OperationRunType.sql
@@ -0,0 +1,11 @@
+CREATE TABLE [Scheduling].[OperationRunType]
+(
+[RunTypeID] [int] NOT NULL IDENTITY(1, 1),
+[RunTypeDesc] [nvarchar] (200) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
+[CreatedBy] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL CONSTRAINT [DF__Operation__Creat__3118447E] DEFAULT (suser_sname()),
+[DateCreated] [datetime] NULL CONSTRAINT [DF__Operation__DateC__320C68B7] DEFAULT (getdate()),
+[RunType] [nvarchar] (30) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
+) ON [PRIMARY]
+GO
+ALTER TABLE [Scheduling].[OperationRunType] ADD CONSTRAINT [PK_OperationRunType] PRIMARY KEY CLUSTERED  ([RunTypeID]) ON [PRIMARY]
+GO
diff --git a/Tables/Scheduling.Subinventory.sql b/Tables/Scheduling.Subinventory.sql
new file mode 100644
index 0000000..11db22d
--- /dev/null
+++ b/Tables/Scheduling.Subinventory.sql
@@ -0,0 +1,12 @@
+CREATE TABLE [Scheduling].[Subinventory]
+(
+[SubinventoryID] [int] NOT NULL IDENTITY(1000, 1),
+[SubinventoryName] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
+[SubDescription] [nvarchar] (300) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[SendToAPS] [bit] NULL CONSTRAINT [DF__Subinvent__SendT__51851410] DEFAULT ((1)),
+[CreatedBy] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL CONSTRAINT [DF__Subinvent__Creat__52793849] DEFAULT (suser_sname()),
+[DateCreated] [datetime] NULL CONSTRAINT [DF__Subinvent__DateC__536D5C82] DEFAULT (getdate())
+) ON [PRIMARY]
+GO
+ALTER TABLE [Scheduling].[Subinventory] ADD CONSTRAINT [PK_Subinventory] PRIMARY KEY CLUSTERED  ([SubinventoryName]) ON [PRIMARY]
+GO
diff --git a/Tables/Setup.ApsSetupAttributeReference.sql b/Tables/Setup.ApsSetupAttributeReference.sql
new file mode 100644
index 0000000..2c5d9e9
--- /dev/null
+++ b/Tables/Setup.ApsSetupAttributeReference.sql
@@ -0,0 +1,21 @@
+CREATE TABLE [Setup].[ApsSetupAttributeReference]
+(
+[AttributeNameID] [int] NOT NULL,
+[AttributeID] [int] NOT NULL,
+[CreatedBy] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL CONSTRAINT [DF__ApsSetupA__Creat__6ABAD62E] DEFAULT (suser_sname()),
+[DateCreated] [datetime] NULL CONSTRAINT [DF__ApsSetupA__DateC__6BAEFA67] DEFAULT (getdate()),
+[timestamp] [timestamp] NULL,
+[OracleAttribute] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[SourceID] [int] NULL
+) ON [PRIMARY]
+GO
+ALTER TABLE [Setup].[ApsSetupAttributeReference] ADD CONSTRAINT [PK_ApsSetupAttributeReference] PRIMARY KEY CLUSTERED  ([AttributeID]) ON [PRIMARY]
+GO
+CREATE NONCLUSTERED INDEX [IX_ApsSetupAttributeReference] ON [Setup].[ApsSetupAttributeReference] ([AttributeID], [AttributeNameID]) ON [PRIMARY]
+GO
+CREATE NONCLUSTERED INDEX [IX_ApsSetupAttributeReference_1] ON [Setup].[ApsSetupAttributeReference] ([OracleAttribute], [AttributeNameID]) ON [PRIMARY]
+GO
+ALTER TABLE [Setup].[ApsSetupAttributeReference] ADD CONSTRAINT [FK_ApsSetupAttributeReference_ApsSetupAttributes] FOREIGN KEY ([AttributeNameID]) REFERENCES [Setup].[ApsSetupAttributes] ([AttributeNameID]) ON DELETE CASCADE ON UPDATE CASCADE
+GO
+ALTER TABLE [Setup].[ApsSetupAttributeReference] ADD CONSTRAINT [FK_ApsSetupAttributeReference_ApsSetupAttributeSource] FOREIGN KEY ([SourceID]) REFERENCES [Setup].[ApsSetupAttributeSource] ([SourceID]) ON DELETE SET NULL ON UPDATE CASCADE
+GO
diff --git a/Tables/Setup.ApsSetupAttributeSource.sql b/Tables/Setup.ApsSetupAttributeSource.sql
new file mode 100644
index 0000000..c81332f
--- /dev/null
+++ b/Tables/Setup.ApsSetupAttributeSource.sql
@@ -0,0 +1,12 @@
+CREATE TABLE [Setup].[ApsSetupAttributeSource]
+(
+[SourceID] [int] NOT NULL IDENTITY(1000, 1),
+[SourceName] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
+[DateCreated] [datetime] NULL CONSTRAINT [DF__ApsSetupA__DateC__25DB9BFC] DEFAULT (getdate()),
+[CreatedBy] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL CONSTRAINT [DF__ApsSetupA__Creat__26CFC035] DEFAULT (suser_sname())
+) ON [PRIMARY]
+GO
+ALTER TABLE [Setup].[ApsSetupAttributeSource] ADD CONSTRAINT [ApsSetupAttributeSource_IX] PRIMARY KEY CLUSTERED  ([SourceID]) ON [PRIMARY]
+GO
+ALTER TABLE [Setup].[ApsSetupAttributeSource] ADD CONSTRAINT [IX_ApsSetupAttributeSource] UNIQUE NONCLUSTERED  ([SourceName]) ON [PRIMARY]
+GO
diff --git a/Tables/Setup.ApsSetupAttributeValueType.sql b/Tables/Setup.ApsSetupAttributeValueType.sql
new file mode 100644
index 0000000..c6f1162
--- /dev/null
+++ b/Tables/Setup.ApsSetupAttributeValueType.sql
@@ -0,0 +1,13 @@
+CREATE TABLE [Setup].[ApsSetupAttributeValueType]
+(
+[ValueTypeID] [int] NOT NULL IDENTITY(1, 1),
+[ValueTypeName] [nvarchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
+[ValueTypeDescription] [nvarchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
+[CreatedBy] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL CONSTRAINT [DF__ApsSetupA__Creat__11D4A34F] DEFAULT (suser_sname()),
+[DateCreated] [datetime] NULL CONSTRAINT [DF__ApsSetupA__DateC__12C8C788] DEFAULT (getdate())
+) ON [PRIMARY]
+GO
+ALTER TABLE [Setup].[ApsSetupAttributeValueType] ADD CONSTRAINT [PK_ApsSetupAttributeValueType] PRIMARY KEY CLUSTERED  ([ValueTypeID]) ON [PRIMARY]
+GO
+ALTER TABLE [Setup].[ApsSetupAttributeValueType] ADD CONSTRAINT [I_ApsSetupAttributeValueType] UNIQUE NONCLUSTERED  ([ValueTypeName]) ON [PRIMARY]
+GO
diff --git a/Tables/Setup.ApsSetupAttributes.sql b/Tables/Setup.ApsSetupAttributes.sql
new file mode 100644
index 0000000..05e56a7
--- /dev/null
+++ b/Tables/Setup.ApsSetupAttributes.sql
@@ -0,0 +1,19 @@
+CREATE TABLE [Setup].[ApsSetupAttributes]
+(
+[AttributeName] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
+[CreatedBy] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL CONSTRAINT [DF__ApsSetupA__Creat__36470DEF] DEFAULT (suser_sname()),
+[DateCreated] [datetime] NULL CONSTRAINT [DF__ApsSetupA__DateC__373B3228] DEFAULT (getdate()),
+[AttributeNameID] [int] NOT NULL IDENTITY(1, 1),
+[DataTypeID] [int] NULL,
+[UnitOfMeasureID] [int] NULL,
+[AttributeDescription] [nvarchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
+) ON [PRIMARY]
+GO
+ALTER TABLE [Setup].[ApsSetupAttributes] ADD CONSTRAINT [PK_ApsSetupAttributes] PRIMARY KEY CLUSTERED  ([AttributeNameID]) ON [PRIMARY]
+GO
+ALTER TABLE [Setup].[ApsSetupAttributes] ADD CONSTRAINT [I_ApsSetupAttributes] UNIQUE NONCLUSTERED  ([AttributeName]) ON [PRIMARY]
+GO
+ALTER TABLE [Setup].[ApsSetupAttributes] ADD CONSTRAINT [FK_ApsSetupAttributes_AttributeDataType] FOREIGN KEY ([DataTypeID]) REFERENCES [Setup].[AttributeDataType] ([DataTypeID]) ON DELETE SET NULL ON UPDATE CASCADE
+GO
+ALTER TABLE [Setup].[ApsSetupAttributes] ADD CONSTRAINT [FK_ApsSetupAttributes_AttributeUOM] FOREIGN KEY ([UnitOfMeasureID]) REFERENCES [Setup].[AttributeUOM] ([UnitOfMeasureID]) ON UPDATE CASCADE
+GO
diff --git a/Tables/Setup.AttributeDataType.sql b/Tables/Setup.AttributeDataType.sql
new file mode 100644
index 0000000..eeb585e
--- /dev/null
+++ b/Tables/Setup.AttributeDataType.sql
@@ -0,0 +1,10 @@
+CREATE TABLE [Setup].[AttributeDataType]
+(
+[DataTypeID] [int] NOT NULL IDENTITY(1, 1),
+[DataType] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
+[CreatedBy] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL CONSTRAINT [DF__Attribute__Creat__2724C5F0] DEFAULT (suser_sname()),
+[DateCreated] [datetime] NULL CONSTRAINT [DF__Attribute__DateC__2818EA29] DEFAULT (getdate())
+) ON [PRIMARY]
+GO
+ALTER TABLE [Setup].[AttributeDataType] ADD CONSTRAINT [pk_AttributeDataType] PRIMARY KEY CLUSTERED  ([DataTypeID]) ON [PRIMARY]
+GO
diff --git a/Tables/Setup.AttributeMatrixFixedValue.sql b/Tables/Setup.AttributeMatrixFixedValue.sql
new file mode 100644
index 0000000..b0e3739
--- /dev/null
+++ b/Tables/Setup.AttributeMatrixFixedValue.sql
@@ -0,0 +1,17 @@
+CREATE TABLE [Setup].[AttributeMatrixFixedValue]
+(
+[AttributeNameID] [int] NOT NULL,
+[MachineID] [int] NOT NULL,
+[TimeValue] [float] NULL CONSTRAINT [DF_AttributeMatrixFixedValue_TimeValue] DEFAULT ((0)),
+[Cost] [decimal] (8, 6) NULL,
+[CreatedBy] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL CONSTRAINT [DF__FixedAttr__Creat__047AA831] DEFAULT (suser_sname()),
+[DateCreated] [datetime] NULL CONSTRAINT [DF__FixedAttr__DateC__056ECC6A] DEFAULT (getdate()),
+[Adder] [float] NULL CONSTRAINT [DF_AttributeMatrixFixedValue_Adder] DEFAULT ((0))
+) ON [PRIMARY]
+GO
+ALTER TABLE [Setup].[AttributeMatrixFixedValue] ADD CONSTRAINT [PK_FixedAttributeValueMatrix] PRIMARY KEY CLUSTERED  ([AttributeNameID], [MachineID]) ON [PRIMARY]
+GO
+ALTER TABLE [Setup].[AttributeMatrixFixedValue] ADD CONSTRAINT [FK_FixedAttributeValueMatrix_ApsSetupAttributes] FOREIGN KEY ([AttributeNameID]) REFERENCES [Setup].[ApsSetupAttributes] ([AttributeNameID]) ON DELETE CASCADE ON UPDATE CASCADE
+GO
+ALTER TABLE [Setup].[AttributeMatrixFixedValue] ADD CONSTRAINT [FK_FixedAttributeValueMatrix_MachineNames] FOREIGN KEY ([MachineID]) REFERENCES [Setup].[MachineNames] ([MachineID]) ON DELETE CASCADE ON UPDATE CASCADE
+GO
diff --git a/Tables/Setup.AttributeMatrixFromTo.sql b/Tables/Setup.AttributeMatrixFromTo.sql
new file mode 100644
index 0000000..ffba137
--- /dev/null
+++ b/Tables/Setup.AttributeMatrixFromTo.sql
@@ -0,0 +1,18 @@
+CREATE TABLE [Setup].[AttributeMatrixFromTo]
+(
+[AttributeNameID] [int] NOT NULL,
+[MachineID] [int] NOT NULL,
+[FromAttribute] [nvarchar] (30) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
+[ToAttribute] [nvarchar] (30) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
+[TimeValue] [float] NOT NULL,
+[CreatedBy] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL CONSTRAINT [DF__FromToAtt__Creat__3335971A] DEFAULT (suser_sname()),
+[DateCreated] [datetime] NULL CONSTRAINT [DF__FromToAtt__DateC__3429BB53] DEFAULT (getdate()),
+[cost] [decimal] (8, 6) NULL
+) ON [PRIMARY]
+GO
+ALTER TABLE [Setup].[AttributeMatrixFromTo] ADD CONSTRAINT [PK_FromToAttributeMatrix] PRIMARY KEY CLUSTERED  ([AttributeNameID], [MachineID], [FromAttribute], [ToAttribute]) ON [PRIMARY]
+GO
+ALTER TABLE [Setup].[AttributeMatrixFromTo] ADD CONSTRAINT [FK_FromToAttributeMatrix_ApsSetupAttributes] FOREIGN KEY ([AttributeNameID]) REFERENCES [Setup].[ApsSetupAttributes] ([AttributeNameID]) ON DELETE CASCADE ON UPDATE CASCADE
+GO
+ALTER TABLE [Setup].[AttributeMatrixFromTo] ADD CONSTRAINT [FK_FromToAttributeMatrix_MachineNames] FOREIGN KEY ([MachineID]) REFERENCES [Setup].[MachineNames] ([MachineID]) ON DELETE CASCADE ON UPDATE CASCADE
+GO
diff --git a/Tables/Setup.AttributeMatrixVariableValue.sql b/Tables/Setup.AttributeMatrixVariableValue.sql
new file mode 100644
index 0000000..76e4403
--- /dev/null
+++ b/Tables/Setup.AttributeMatrixVariableValue.sql
@@ -0,0 +1,17 @@
+CREATE TABLE [Setup].[AttributeMatrixVariableValue]
+(
+[AttributeNameID] [int] NOT NULL,
+[MachineID] [int] NOT NULL,
+[AttributeValue] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
+[TimeValue] [float] NULL,
+[Cost] [decimal] (8, 6) NULL,
+[CreatedBy] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL CONSTRAINT [DF__VariableA__Creat__1881A0DE] DEFAULT (suser_sname()),
+[DateCreated] [datetime] NULL CONSTRAINT [DF__VariableA__DateC__1975C517] DEFAULT (getdate())
+) ON [PRIMARY]
+GO
+ALTER TABLE [Setup].[AttributeMatrixVariableValue] ADD CONSTRAINT [PK_AttributeMatrixVariableValue] PRIMARY KEY CLUSTERED  ([AttributeNameID], [MachineID], [AttributeValue]) ON [PRIMARY]
+GO
+ALTER TABLE [Setup].[AttributeMatrixVariableValue] ADD CONSTRAINT [FK_AttributeMatrixVariableValue_ApsSetupAttributes] FOREIGN KEY ([AttributeNameID]) REFERENCES [Setup].[ApsSetupAttributes] ([AttributeNameID]) ON DELETE CASCADE ON UPDATE CASCADE
+GO
+ALTER TABLE [Setup].[AttributeMatrixVariableValue] ADD CONSTRAINT [FK_AttributeMatrixVariableValue_MachineNames] FOREIGN KEY ([MachineID]) REFERENCES [Setup].[MachineNames] ([MachineID]) ON DELETE CASCADE ON UPDATE CASCADE
+GO
diff --git a/Tables/Setup.AttributeSetupTime.sql b/Tables/Setup.AttributeSetupTime.sql
new file mode 100644
index 0000000..8d50301
--- /dev/null
+++ b/Tables/Setup.AttributeSetupTime.sql
@@ -0,0 +1,20 @@
+CREATE TABLE [Setup].[AttributeSetupTime]
+(
+[Setup] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
+[MachineGroupID] [int] NOT NULL,
+[AttributeNameID] [int] NOT NULL,
+[SetupAttributeValue] [nvarchar] (30) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[CreatedBy] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL CONSTRAINT [DF_ApsSetupAttributeValue_CreatedBy] DEFAULT (suser_sname()),
+[DateCreated] [datetime] NULL CONSTRAINT [DF_ApsSetupAttributeValue_DateCreated] DEFAULT (getdate()),
+[SetupTime] [float] NULL,
+[MachineID] [int] NOT NULL
+) ON [PRIMARY]
+GO
+ALTER TABLE [Setup].[AttributeSetupTime] ADD CONSTRAINT [PK_ApsSetupAttributeValue_1] PRIMARY KEY CLUSTERED  ([Setup], [AttributeNameID], [MachineID]) ON [PRIMARY]
+GO
+CREATE NONCLUSTERED INDEX [IX_AttributeSetupTime] ON [Setup].[AttributeSetupTime] ([MachineGroupID], [AttributeNameID]) INCLUDE ([MachineID], [Setup], [SetupAttributeValue], [SetupTime]) ON [PRIMARY]
+GO
+ALTER TABLE [Setup].[AttributeSetupTime] ADD CONSTRAINT [FK_ApsSetupAttributeValue_MachineNames] FOREIGN KEY ([MachineID], [MachineGroupID]) REFERENCES [Setup].[MachineNames] ([MachineID], [MachineGroupID]) ON DELETE CASCADE ON UPDATE CASCADE
+GO
+ALTER TABLE [Setup].[AttributeSetupTime] ADD CONSTRAINT [FK_AttributeSetupTime_ApsSetupAttributes] FOREIGN KEY ([AttributeNameID]) REFERENCES [Setup].[ApsSetupAttributes] ([AttributeNameID]) ON DELETE CASCADE ON UPDATE CASCADE
+GO
diff --git a/Tables/Setup.AttributeSetupTimeItem.sql b/Tables/Setup.AttributeSetupTimeItem.sql
new file mode 100644
index 0000000..07eea13
--- /dev/null
+++ b/Tables/Setup.AttributeSetupTimeItem.sql
@@ -0,0 +1,23 @@
+CREATE TABLE [Setup].[AttributeSetupTimeItem]
+(
+[Item_Number] [nvarchar] (30) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
+[Setup] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
+[MachineGroupID] [int] NOT NULL,
+[AttributeNameID] [int] NOT NULL,
+[SetupAttributeValue] [nvarchar] (30) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[CreatedBy] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL CONSTRAINT [DF_AttributeItemSetupTime_CreatedBy] DEFAULT (suser_sname()),
+[DateCreated] [datetime] NULL CONSTRAINT [DF_AttributeItemSetupTime_DateCreated] DEFAULT (getdate()),
+[SetupTime] [float] NULL,
+[MachineID] [int] NOT NULL
+) ON [PRIMARY]
+GO
+ALTER TABLE [Setup].[AttributeSetupTimeItem] ADD CONSTRAINT [PK_AttributeItemSetupTime_1] PRIMARY KEY CLUSTERED  ([Item_Number], [Setup], [AttributeNameID], [MachineID]) ON [PRIMARY]
+GO
+CREATE NONCLUSTERED INDEX [AttributeSetupTimeItem_IXX] ON [Setup].[AttributeSetupTimeItem] ([MachineGroupID], [AttributeNameID]) INCLUDE ([Item_Number], [MachineID], [Setup], [SetupAttributeValue], [SetupTime]) ON [PRIMARY]
+GO
+CREATE NONCLUSTERED INDEX [AttributeSetupTimeItem_XI] ON [Setup].[AttributeSetupTimeItem] ([Setup], [MachineID]) INCLUDE ([AttributeNameID], [MachineGroupID]) ON [PRIMARY]
+GO
+ALTER TABLE [Setup].[AttributeSetupTimeItem] ADD CONSTRAINT [FK_AttributeSetupTimeItem_ApsSetupAttributes] FOREIGN KEY ([AttributeNameID]) REFERENCES [Setup].[ApsSetupAttributes] ([AttributeNameID]) ON DELETE CASCADE ON UPDATE CASCADE
+GO
+ALTER TABLE [Setup].[AttributeSetupTimeItem] ADD CONSTRAINT [FK_AttributeSetupTimeItem_MachineNames] FOREIGN KEY ([MachineID], [MachineGroupID]) REFERENCES [Setup].[MachineNames] ([MachineID], [MachineGroupID]) ON DELETE CASCADE ON UPDATE CASCADE
+GO
diff --git a/Tables/Setup.AttributeUOM.sql b/Tables/Setup.AttributeUOM.sql
new file mode 100644
index 0000000..159b3c9
--- /dev/null
+++ b/Tables/Setup.AttributeUOM.sql
@@ -0,0 +1,12 @@
+CREATE TABLE [Setup].[AttributeUOM]
+(
+[UnitOfMeasureID] [int] NOT NULL IDENTITY(1, 1),
+[UnitOfMeasure] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
+[DateCreated] [datetime] NULL CONSTRAINT [DF__ItemAttri__DateC__1590259A] DEFAULT (getdate()),
+[CreatedBy] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL CONSTRAINT [DF__ItemAttri__Creat__168449D3] DEFAULT (suser_sname())
+) ON [PRIMARY]
+GO
+ALTER TABLE [Setup].[AttributeUOM] ADD CONSTRAINT [pk_ItemAttributeUOM] PRIMARY KEY CLUSTERED  ([UnitOfMeasureID]) ON [PRIMARY]
+GO
+ALTER TABLE [Setup].[AttributeUOM] ADD CONSTRAINT [IX_ItemAttributeUOM] UNIQUE NONCLUSTERED  ([UnitOfMeasure]) ON [PRIMARY]
+GO
diff --git a/Tables/Setup.ColorSequencePreference.sql b/Tables/Setup.ColorSequencePreference.sql
new file mode 100644
index 0000000..92e4d61
--- /dev/null
+++ b/Tables/Setup.ColorSequencePreference.sql
@@ -0,0 +1,40 @@
+CREATE TABLE [Setup].[ColorSequencePreference]
+(
+[ColorID] [int] NOT NULL IDENTITY(100, 1),
+[Color] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[PreferedSequence] [int] NULL,
+[CreatedBy] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL CONSTRAINT [DF__ColorSequ__Creat__3E3D3572] DEFAULT (suser_sname()),
+[DateCreated] [datetime] NULL CONSTRAINT [DF__ColorSequ__DateC__3F3159AB] DEFAULT (getdate()),
+[RevisedBy] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL CONSTRAINT [DF__ColorSequ__Revis__40257DE4] DEFAULT (suser_name()),
+[DateRevised] [datetime] NULL CONSTRAINT [DF__ColorSequ__DateR__4119A21D] DEFAULT (getdate())
+) ON [PRIMARY]
+GO
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+-- =============================================
+-- Author:		Bryan Eddy
+-- Create date: 12/7/2017
+-- Description:	Update the revised by and revised date fields
+-- =============================================
+CREATE TRIGGER [Setup].[trg_ColorSequencePrefered] 
+   ON  [Setup].[ColorSequencePreference]
+   AFTER UPDATE
+AS 
+BEGIN
+	-- SET NOCOUNT ON added to prevent extra result sets from
+	-- interfering with SELECT statements.
+	SET NOCOUNT ON;
+			  UPDATE t
+			  SET t.DateRevised = GETDATE() , t.RevisedBy = (SUSER_SNAME()) 
+			  FROM [Setup].[ColorSequencePreference]   as t
+			  JOIN inserted i
+			  ON i.ColorID = t.ColorID 
+
+END
+GO
+ALTER TABLE [Setup].[ColorSequencePreference] ADD CONSTRAINT [PK_ColorSequencePreference] PRIMARY KEY CLUSTERED  ([ColorID]) ON [PRIMARY]
+GO
+CREATE UNIQUE NONCLUSTERED INDEX [IX_ColorSequencePreference] ON [Setup].[ColorSequencePreference] ([Color]) ON [PRIMARY]
+GO
diff --git a/Tables/Setup.Department.sql b/Tables/Setup.Department.sql
new file mode 100644
index 0000000..1d99367
--- /dev/null
+++ b/Tables/Setup.Department.sql
@@ -0,0 +1,15 @@
+CREATE TABLE [Setup].[Department]
+(
+[DepartmentID] [int] NOT NULL IDENTITY(1, 1),
+[Department] [nvarchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[CreatedBy] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL CONSTRAINT [DF__Departmen__Creat__44160A59] DEFAULT (suser_sname()),
+[DateCreated] [datetime] NULL CONSTRAINT [DF__Departmen__DateC__450A2E92] DEFAULT (getdate()),
+[PlantID] [int] NULL
+) ON [PRIMARY]
+GO
+ALTER TABLE [Setup].[Department] ADD CONSTRAINT [PK_Department] PRIMARY KEY CLUSTERED  ([DepartmentID]) ON [PRIMARY]
+GO
+ALTER TABLE [Setup].[Department] ADD CONSTRAINT [IX_Department] UNIQUE NONCLUSTERED  ([Department], [PlantID]) ON [PRIMARY]
+GO
+ALTER TABLE [Setup].[Department] ADD CONSTRAINT [FK_Department_Plant] FOREIGN KEY ([PlantID]) REFERENCES [Setup].[Plant] ([PlantID]) ON DELETE SET NULL ON UPDATE CASCADE
+GO
diff --git a/Tables/Setup.DepartmentIndicator.sql b/Tables/Setup.DepartmentIndicator.sql
new file mode 100644
index 0000000..48924d5
--- /dev/null
+++ b/Tables/Setup.DepartmentIndicator.sql
@@ -0,0 +1,11 @@
+CREATE TABLE [Setup].[DepartmentIndicator]
+(
+[department_code] [nvarchar] (30) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
+[Description] [nvarchar] (250) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[MachineID] [int] NOT NULL
+) ON [PRIMARY]
+GO
+ALTER TABLE [Setup].[DepartmentIndicator] ADD CONSTRAINT [PK_DepartmentIndicator] PRIMARY KEY CLUSTERED  ([department_code]) ON [PRIMARY]
+GO
+ALTER TABLE [Setup].[DepartmentIndicator] ADD CONSTRAINT [FK_DepartmentIndicator_MachineNames] FOREIGN KEY ([MachineID]) REFERENCES [Setup].[MachineNames] ([MachineID]) ON DELETE CASCADE ON UPDATE CASCADE
+GO
diff --git a/Tables/Setup.ItemAttributes.sql b/Tables/Setup.ItemAttributes.sql
new file mode 100644
index 0000000..33e49f6
--- /dev/null
+++ b/Tables/Setup.ItemAttributes.sql
@@ -0,0 +1,54 @@
+CREATE TABLE [Setup].[ItemAttributes]
+(
+[ItemNumber] [nvarchar] (40) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
+[FiberCount] [int] NULL,
+[DateCreated] [datetime] NULL CONSTRAINT [DF__ItemAttri__DateC__1387E197] DEFAULT (getdate()),
+[CreatedBy] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL CONSTRAINT [DF__ItemAttri__Creat__147C05D0] DEFAULT (suser_sname()),
+[CableColor] [nvarchar] (30) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[Gel] [nvarchar] (30) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[NominalOD] [float] NULL,
+[DateRevised] [datetime] NULL CONSTRAINT [DF_ItemAttributes_DateRevised] DEFAULT (getdate()),
+[RevisedBy] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[ContainsFiberIdBinders] [bit] NULL CONSTRAINT [DF_ItemAttributes_ContainsFiberIdBinders] DEFAULT ((0)),
+[JacketMaterial] [nvarchar] (30) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[FiberMeters] [float] NULL,
+[ContainsBinder] [bit] NULL CONSTRAINT [DF_ItemAttributes_ContainsBinder] DEFAULT ((0)),
+[Printed] [bit] NULL
+) ON [PRIMARY]
+GO
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+-- =============================================
+-- Author:		Bryan
+-- Create date: 9/13/2017
+-- Description:	Update revision information for Setup.ItemAttributes
+-- =============================================
+CREATE TRIGGER [Setup].[RecordUpdate_trgr] 
+   ON  [Setup].[ItemAttributes] 
+   AFTER INSERT,UPDATE
+AS 
+BEGIN
+	-- SET NOCOUNT ON added to prevent extra result sets from
+	-- interfering with SELECT statements.
+	SET NOCOUNT ON;
+
+    	--Capture the user and time a change occured 
+	BEGIN 
+		IF NOT (UPDATE(DateRevised) or UPDATE(RevisedBy) or UPDATE(DateCreated) or Update(CreatedBy))
+			BEGIN
+			  UPDATE t
+			  SET t.DateRevised = GETDATE() , t.RevisedBy = (SUSER_SNAME()) 
+			  FROM Setup.ItemAttributes  as t
+			  JOIN inserted i
+			  ON i.ItemNumber = t.ItemNumber
+			END
+	END
+
+END
+GO
+ALTER TABLE [Setup].[ItemAttributes] ADD CONSTRAINT [PK__ItemAttr__C28ACDB61FFC0AE3] PRIMARY KEY CLUSTERED  ([ItemNumber]) ON [PRIMARY]
+GO
+CREATE NONCLUSTERED INDEX [ItemAttributes_XI] ON [Setup].[ItemAttributes] ([FiberCount]) INCLUDE ([ItemNumber]) ON [PRIMARY]
+GO
diff --git a/Tables/Setup.ItemFiberCountByOperation.sql b/Tables/Setup.ItemFiberCountByOperation.sql
new file mode 100644
index 0000000..9a0132a
--- /dev/null
+++ b/Tables/Setup.ItemFiberCountByOperation.sql
@@ -0,0 +1,49 @@
+CREATE TABLE [Setup].[ItemFiberCountByOperation]
+(
+[ItemNumber] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
+[TrueOperationCode] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
+[PrimaryAlternate] [nvarchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
+[FiberCount] [int] NULL,
+[CreatedBy] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL CONSTRAINT [DF__ItemFiber__Creat__76B698BF] DEFAULT (suser_sname()),
+[DateCreated] [datetime] NULL CONSTRAINT [DF__ItemFiber__DateC__77AABCF8] DEFAULT (getdate()),
+[RevisedBy] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL CONSTRAINT [DF__ItemFiber__Revis__789EE131] DEFAULT (suser_sname()),
+[DateRevised] [datetime] NULL CONSTRAINT [DF__ItemFiber__DateR__7993056A] DEFAULT (getdate()),
+[ItemFiberCountByOp_ID] [int] NOT NULL IDENTITY(10000, 1)
+) ON [PRIMARY]
+GO
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+-- =============================================
+-- Author:		Bryan Eddy
+-- Create date: 11/1/2017
+-- Description:	Update the date revised and revised by when a record is updated
+-- Rev: 1
+-- Update: Initial creation
+-- =============================================
+CREATE TRIGGER [Setup].[trg_RevisedItemFiberCountByOperation] 
+   ON  [Setup].[ItemFiberCountByOperation] 
+   AFTER UPDATE
+AS 
+BEGIN
+	-- SET NOCOUNT ON added to prevent extra result sets from
+	-- interfering with SELECT statements.
+	SET NOCOUNT ON;
+
+		IF  UPDATE(FiberCount)
+			BEGIN
+			  UPDATE t
+			  SET  t.DateRevised= GETDATE() , t.RevisedBy = (SUSER_SNAME()) 
+			  FROM setup.[ItemFiberCountByOperation]  as t
+			  JOIN inserted i
+			  ON i.ItemFiberCountByOp_ID = t.ItemFiberCountByOp_ID 
+		END 
+
+END
+
+GO
+ALTER TABLE [Setup].[ItemFiberCountByOperation] ADD CONSTRAINT [PK_ItemFiberCountByOperation] PRIMARY KEY CLUSTERED  ([ItemNumber], [TrueOperationCode], [PrimaryAlternate]) ON [PRIMARY]
+GO
+CREATE NONCLUSTERED INDEX [ItemFiberCountByOperation_XI] ON [Setup].[ItemFiberCountByOperation] ([FiberCount]) INCLUDE ([ItemNumber], [TrueOperationCode]) ON [PRIMARY]
+GO
diff --git a/Tables/Setup.MachineCapacityType.sql b/Tables/Setup.MachineCapacityType.sql
new file mode 100644
index 0000000..727e790
--- /dev/null
+++ b/Tables/Setup.MachineCapacityType.sql
@@ -0,0 +1,10 @@
+CREATE TABLE [Setup].[MachineCapacityType]
+(
+[CapacityTypeID] [int] NOT NULL IDENTITY(1, 1),
+[CapacityType] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[CreatedBy] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL CONSTRAINT [DF_Table_1_CreatedBy] DEFAULT (suser_sname()),
+[DateCreated] [datetime] NULL CONSTRAINT [DF_Table_1_DateCreated] DEFAULT (getdate())
+) ON [PRIMARY]
+GO
+ALTER TABLE [Setup].[MachineCapacityType] ADD CONSTRAINT [PK_MachineCapacityType] PRIMARY KEY CLUSTERED  ([CapacityTypeID]) ON [PRIMARY]
+GO
diff --git a/Tables/Setup.MachineGroup.sql b/Tables/Setup.MachineGroup.sql
new file mode 100644
index 0000000..cfc6674
--- /dev/null
+++ b/Tables/Setup.MachineGroup.sql
@@ -0,0 +1,12 @@
+CREATE TABLE [Setup].[MachineGroup]
+(
+[MachineGroupName] [nvarchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
+[MachineGroupID] [int] NOT NULL IDENTITY(1, 1),
+[CreatedBy] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL CONSTRAINT [DF__MachineGr__Creat__0D44F85C] DEFAULT (suser_sname()),
+[DateCreated] [datetime] NULL CONSTRAINT [DF__MachineGr__DateC__0E391C95] DEFAULT (getdate())
+) ON [PRIMARY]
+GO
+ALTER TABLE [Setup].[MachineGroup] ADD CONSTRAINT [PK_MachineGroup] PRIMARY KEY CLUSTERED  ([MachineGroupID]) ON [PRIMARY]
+GO
+ALTER TABLE [Setup].[MachineGroup] ADD CONSTRAINT [I_MachineGroup] UNIQUE NONCLUSTERED  ([MachineGroupName]) ON [PRIMARY]
+GO
diff --git a/Tables/Setup.MachineGroupAttributes.sql b/Tables/Setup.MachineGroupAttributes.sql
new file mode 100644
index 0000000..dcf6283
--- /dev/null
+++ b/Tables/Setup.MachineGroupAttributes.sql
@@ -0,0 +1,22 @@
+CREATE TABLE [Setup].[MachineGroupAttributes]
+(
+[MachineGroupID] [int] NOT NULL,
+[AttributeNameID] [int] NOT NULL,
+[LogicType] [nvarchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
+[ValueTypeID] [int] NOT NULL,
+[CreatedBy] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL CONSTRAINT [DF_MachineAttributes_CreatedBy] DEFAULT (suser_sname()),
+[DateCreated] [datetime] NULL CONSTRAINT [DF_MachineAttributes_DateCreated] DEFAULT (getdate()),
+[ApsData] [bit] NULL CONSTRAINT [DF_MachineGroupAttributes_ApsData] DEFAULT ((0)),
+[PassToAps] [bit] NULL CONSTRAINT [DF_MachineGroupAttributes_PassToAps] DEFAULT ((1))
+) ON [PRIMARY]
+GO
+ALTER TABLE [Setup].[MachineGroupAttributes] ADD CONSTRAINT [CHK_logic] CHECK (([LogicType]='Consecutive' OR [LogicType]='Concurrent'))
+GO
+ALTER TABLE [Setup].[MachineGroupAttributes] ADD CONSTRAINT [PK_SetupMachineAttributes] PRIMARY KEY CLUSTERED  ([MachineGroupID], [AttributeNameID]) ON [PRIMARY]
+GO
+ALTER TABLE [Setup].[MachineGroupAttributes] ADD CONSTRAINT [FK_MachineAttributes_MachineGroup] FOREIGN KEY ([MachineGroupID]) REFERENCES [Setup].[MachineGroup] ([MachineGroupID]) ON DELETE CASCADE ON UPDATE CASCADE
+GO
+ALTER TABLE [Setup].[MachineGroupAttributes] ADD CONSTRAINT [FK_MachineAttributes_ValueType] FOREIGN KEY ([ValueTypeID]) REFERENCES [Setup].[ApsSetupAttributeValueType] ([ValueTypeID]) ON DELETE CASCADE ON UPDATE CASCADE
+GO
+ALTER TABLE [Setup].[MachineGroupAttributes] ADD CONSTRAINT [FK_MachineGroupAttributes_ApsSetupAttributes] FOREIGN KEY ([AttributeNameID]) REFERENCES [Setup].[ApsSetupAttributes] ([AttributeNameID]) ON DELETE CASCADE ON UPDATE CASCADE
+GO
diff --git a/Tables/Setup.MachineNames.sql b/Tables/Setup.MachineNames.sql
new file mode 100644
index 0000000..9a3fbd1
--- /dev/null
+++ b/Tables/Setup.MachineNames.sql
@@ -0,0 +1,28 @@
+CREATE TABLE [Setup].[MachineNames]
+(
+[MachineID] [int] NOT NULL IDENTITY(1, 1),
+[MachineName] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
+[MachineGroupID] [int] NULL,
+[ShareResource] [bit] NULL,
+[timestamp] [timestamp] NULL,
+[Grouping] [bit] NULL CONSTRAINT [DF_MachineNames_Grouping] DEFAULT ((1)),
+[CapacityTypeID] [int] NULL,
+[MachineRunEffeciency] [decimal] (5, 4) NULL,
+[MachineSetupEffeciency] [decimal] (5, 4) NULL,
+[ProdItemValueUUID] [uniqueidentifier] NULL,
+[ManualSchedule] [bit] NULL CONSTRAINT [DF_MachineNames_ManualSchedule] DEFAULT ((0)),
+[DepartmentID] [int] NULL
+) ON [PRIMARY]
+GO
+ALTER TABLE [Setup].[MachineNames] ADD CONSTRAINT [PK_MachineNames] PRIMARY KEY CLUSTERED  ([MachineID]) ON [PRIMARY]
+GO
+CREATE UNIQUE NONCLUSTERED INDEX [IX_MachineNames] ON [Setup].[MachineNames] ([MachineID], [MachineGroupID]) ON [PRIMARY]
+GO
+CREATE UNIQUE NONCLUSTERED INDEX [IX_MachineNames_2] ON [Setup].[MachineNames] ([MachineName]) ON [PRIMARY]
+GO
+ALTER TABLE [Setup].[MachineNames] ADD CONSTRAINT [FK_MachineNames_MachineCapacityType] FOREIGN KEY ([CapacityTypeID]) REFERENCES [Setup].[MachineCapacityType] ([CapacityTypeID]) ON DELETE SET NULL ON UPDATE CASCADE
+GO
+ALTER TABLE [Setup].[MachineNames] ADD CONSTRAINT [FK_MachineNames_MachineGroup] FOREIGN KEY ([MachineGroupID]) REFERENCES [Setup].[MachineGroup] ([MachineGroupID]) ON DELETE SET NULL ON UPDATE CASCADE
+GO
+ALTER TABLE [Setup].[MachineNames] ADD CONSTRAINT [FK_MachineNames_Plant] FOREIGN KEY ([DepartmentID]) REFERENCES [Setup].[Department] ([DepartmentID]) ON DELETE SET NULL ON UPDATE CASCADE
+GO
diff --git a/Tables/Setup.MachineReference.sql b/Tables/Setup.MachineReference.sql
new file mode 100644
index 0000000..4ac3988
--- /dev/null
+++ b/Tables/Setup.MachineReference.sql
@@ -0,0 +1,12 @@
+CREATE TABLE [Setup].[MachineReference]
+(
+[MachineID] [int] NOT NULL,
+[PssMachineID] [int] NOT NULL,
+[MachineReferenceID] [int] NOT NULL IDENTITY(100, 1),
+[PssProcessID] [int] NOT NULL
+) ON [PRIMARY]
+GO
+ALTER TABLE [Setup].[MachineReference] ADD CONSTRAINT [PK_MachineReference] PRIMARY KEY CLUSTERED  ([MachineID], [PssMachineID], [PssProcessID]) ON [PRIMARY]
+GO
+ALTER TABLE [Setup].[MachineReference] ADD CONSTRAINT [fk_MachineID_MachineReference] FOREIGN KEY ([MachineID]) REFERENCES [Setup].[MachineNames] ([MachineID]) ON DELETE CASCADE ON UPDATE CASCADE
+GO
diff --git a/Tables/Setup.MissingSetups.sql b/Tables/Setup.MissingSetups.sql
new file mode 100644
index 0000000..fd8916e
--- /dev/null
+++ b/Tables/Setup.MissingSetups.sql
@@ -0,0 +1,12 @@
+CREATE TABLE [Setup].[MissingSetups]
+(
+[Setup] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
+[DateCreated] [datetime] NOT NULL CONSTRAINT [DF__SetupsMis__DateC__0D2FE9C3] DEFAULT (getdate()),
+[DateMostRecentAppearance] [datetime] NULL CONSTRAINT [DF_SetupsMissing_DateClosed] DEFAULT (getdate()),
+[SetupMissingID] [int] NOT NULL IDENTITY(100, 1)
+) ON [PRIMARY]
+GO
+ALTER TABLE [Setup].[MissingSetups] ADD CONSTRAINT [pk_SetupsMissing] PRIMARY KEY CLUSTERED  ([SetupMissingID]) ON [PRIMARY]
+GO
+CREATE UNIQUE NONCLUSTERED INDEX [IX_SetupsMissing] ON [Setup].[MissingSetups] ([Setup]) ON [PRIMARY]
+GO
diff --git a/Tables/Setup.Plant.sql b/Tables/Setup.Plant.sql
new file mode 100644
index 0000000..48ab75d
--- /dev/null
+++ b/Tables/Setup.Plant.sql
@@ -0,0 +1,12 @@
+CREATE TABLE [Setup].[Plant]
+(
+[Plant] [nvarchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
+[PlantID] [int] NOT NULL IDENTITY(1, 1),
+[CreatedBy] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL CONSTRAINT [DF__Plant__CreatedBy__442B18F2] DEFAULT (suser_sname()),
+[DateCreated] [datetime] NULL CONSTRAINT [DF__Plant__DateCreat__451F3D2B] DEFAULT (getdate())
+) ON [PRIMARY]
+GO
+ALTER TABLE [Setup].[Plant] ADD CONSTRAINT [PK_Plant] PRIMARY KEY CLUSTERED  ([PlantID]) ON [PRIMARY]
+GO
+ALTER TABLE [Setup].[Plant] ADD CONSTRAINT [IX_Plant] UNIQUE NONCLUSTERED  ([Plant]) ON [PRIMARY]
+GO
diff --git a/Tables/Setup.tblAttributes.sql b/Tables/Setup.tblAttributes.sql
new file mode 100644
index 0000000..5e20a3c
--- /dev/null
+++ b/Tables/Setup.tblAttributes.sql
@@ -0,0 +1,42 @@
+CREATE TABLE [Setup].[tblAttributes]
+(
+[AttributeID] [int] NOT NULL,
+[ProcessID] [int] NOT NULL,
+[AttrIneffectiveDate] [datetime2] (0) NOT NULL,
+[AttrEffectiveDate] [datetime2] (0) NULL,
+[AttributeGroupID] [int] NULL,
+[AttributeDesc] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[AttributeName] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[AttributeUOM] [nvarchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[LimitToList] [bit] NULL,
+[Active] [bit] NULL,
+[ListSource] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[AttributeViewOrder] [int] NULL,
+[AttributeDataType] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[ListSourceColumnCount] [int] NULL,
+[AttributeComments] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[ToleranceReq] [bit] NULL,
+[ToleranceUOM] [nvarchar] (10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[DefaultValue] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[DefaultMinTol] [float] NULL,
+[DefaultMaxTol] [float] NULL,
+[DefaultMinValue] [float] NULL,
+[DefaultMaxValue] [float] NULL,
+[DefaultMinValueTol] [float] NULL,
+[DefaultMaxValueTol] [float] NULL,
+[DefaultPrintOnSetup] [bit] NULL,
+[AddToDesc] [bit] NULL,
+[ApprovalReq] [bit] NULL,
+[ScheduleNotice] [bit] NULL,
+[OracleNotice] [bit] NULL,
+[EditAllowed] [bit] NULL,
+[RecordResults] [bit] NULL,
+[SigDigits] [int] NULL,
+[ReferenceOnly] [bit] NULL,
+[FormulaBased] [bit] NULL,
+[ToleranceType] [int] NULL,
+[SSMA_TimeStamp] [timestamp] NOT NULL
+) ON [PRIMARY]
+GO
+ALTER TABLE [Setup].[tblAttributes] ADD CONSTRAINT [PK_tblAttributes] PRIMARY KEY CLUSTERED  ([AttributeID], [ProcessID], [AttrIneffectiveDate]) ON [PRIMARY]
+GO
diff --git a/Tables/Setup.tblProcessMachines.sql b/Tables/Setup.tblProcessMachines.sql
new file mode 100644
index 0000000..61a3475
--- /dev/null
+++ b/Tables/Setup.tblProcessMachines.sql
@@ -0,0 +1,24 @@
+CREATE TABLE [Setup].[tblProcessMachines]
+(
+[ProcessID] [int] NOT NULL,
+[MachineID] [int] NOT NULL,
+[MachineNumber] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[MachineRanking] [int] NULL,
+[Active] [bit] NOT NULL,
+[Comments] [nvarchar] (max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[AddScheduleDates] [bit] NOT NULL,
+[Uptime] [float] NULL,
+[RightTheFirstTime] [float] NULL,
+[MachineShiftStartTime] [datetime] NULL,
+[MachineShiftEndTime] [datetime] NULL,
+[MachineStartDelay] [float] NULL,
+[PMDefaultTime] [float] NULL,
+[DownTime] [float] NULL,
+[ProcessTimeExtension] [int] NULL,
+[MachineCount] [float] NULL,
+[ProcessTimeDelay] [int] NULL,
+[IncludeInReport] [bit] NOT NULL
+) ON [PRIMARY]
+GO
+ALTER TABLE [Setup].[tblProcessMachines] ADD CONSTRAINT [PK_tblProcessMachines] PRIMARY KEY CLUSTERED  ([ProcessID], [MachineID]) ON [PRIMARY]
+GO
diff --git a/Tables/Setup.tblSetup.sql b/Tables/Setup.tblSetup.sql
new file mode 100644
index 0000000..c411b39
--- /dev/null
+++ b/Tables/Setup.tblSetup.sql
@@ -0,0 +1,28 @@
+CREATE TABLE [Setup].[tblSetup]
+(
+[SetupID] [int] NOT NULL,
+[ProcessID] [int] NULL,
+[SetupNumber] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[SetupDesc] [nvarchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[EffectiveDate] [datetime2] (0) NULL,
+[IneffectiveDate] [datetime2] (0) NULL,
+[EnteredBy] [int] NULL,
+[EnteredOnDate] [datetime2] (0) NULL,
+[Comments] [nvarchar] (max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[ApprovedOnDate] [datetime2] (0) NULL,
+[ApprovedBy] [int] NULL,
+[Status] [int] NULL,
+[MachineID] [int] NULL,
+[SSMA_TimeStamp] [timestamp] NOT NULL
+) ON [PRIMARY]
+GO
+ALTER TABLE [Setup].[tblSetup] ADD CONSTRAINT [PK_tblSetup] PRIMARY KEY CLUSTERED  ([SetupID]) ON [PRIMARY]
+GO
+CREATE NONCLUSTERED INDEX [ix_Setup_tblSetup] ON [Setup].[tblSetup] ([IneffectiveDate]) INCLUDE ([MachineID], [ProcessID], [SetupID], [SetupNumber]) ON [PRIMARY]
+GO
+CREATE NONCLUSTERED INDEX [tblSetup_IneffectiveDate_XI] ON [Setup].[tblSetup] ([IneffectiveDate]) INCLUDE ([MachineID], [SetupDesc], [SetupID], [SetupNumber]) ON [PRIMARY]
+GO
+CREATE NONCLUSTERED INDEX [IX_tblSetup] ON [Setup].[tblSetup] ([ProcessID], [MachineID], [IneffectiveDate], [SetupID], [SetupNumber]) ON [PRIMARY]
+GO
+CREATE NONCLUSTERED INDEX [IX_tblSetup_1] ON [Setup].[tblSetup] ([SetupNumber], [IneffectiveDate], [ProcessID], [MachineID]) ON [PRIMARY]
+GO
diff --git a/Tables/Setup.tblSetupAttributes.sql b/Tables/Setup.tblSetupAttributes.sql
new file mode 100644
index 0000000..ef6de93
--- /dev/null
+++ b/Tables/Setup.tblSetupAttributes.sql
@@ -0,0 +1,33 @@
+CREATE TABLE [Setup].[tblSetupAttributes]
+(
+[SetupID] [int] NOT NULL,
+[AttributeID] [int] NOT NULL,
+[IneffectiveDate] [datetime] NOT NULL,
+[ProcessID] [int] NULL,
+[MachineID] [int] NULL,
+[EffectiveDate] [datetime2] (0) NULL,
+[AttributeValue] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[RequiredNew] [bit] NULL,
+[RequiredEdit] [bit] NULL,
+[ViewNew] [bit] NULL,
+[ViewEdit] [bit] NULL,
+[Comments] [nvarchar] (max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[MinTol] [float] NULL,
+[MaxTol] [float] NULL,
+[MachineSpecific] [bit] NULL,
+[MinValue] [float] NULL,
+[MaxValue] [float] NULL,
+[EnteredBy] [int] NULL,
+[EnteredOnDate] [datetime2] (0) NULL,
+[PrintOnSetup] [bit] NULL,
+[ApprovedBy] [int] NULL,
+[ApprovedOnDate] [datetime2] (0) NULL,
+[SSMA_TimeStamp] [timestamp] NOT NULL
+) ON [PRIMARY]
+GO
+CREATE NONCLUSTERED INDEX [IX_tblSetupAttributes] ON [Setup].[tblSetupAttributes] ([AttributeID], [IneffectiveDate], [SetupID], [MachineID], [AttributeValue]) ON [PRIMARY]
+GO
+CREATE NONCLUSTERED INDEX [IX_tblSetupAttributes_2] ON [Setup].[tblSetupAttributes] ([AttributeID], [IneffectiveDate], [SetupID], [ProcessID], [AttributeValue]) ON [PRIMARY]
+GO
+CREATE NONCLUSTERED INDEX [IX_tblSetupAttributes_1] ON [Setup].[tblSetupAttributes] ([IneffectiveDate], [SetupID], [AttributeID], [ProcessID], [AttributeValue]) ON [PRIMARY]
+GO
diff --git a/Tables/dbo.APS_ProductClass_ToExclude_HardCoded.sql b/Tables/dbo.APS_ProductClass_ToExclude_HardCoded.sql
new file mode 100644
index 0000000..ba7b023
--- /dev/null
+++ b/Tables/dbo.APS_ProductClass_ToExclude_HardCoded.sql
@@ -0,0 +1,7 @@
+CREATE TABLE [dbo].[APS_ProductClass_ToExclude_HardCoded]
+(
+[ExcludedProductClass] [nvarchar] (200) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
+) ON [PRIMARY]
+GO
+ALTER TABLE [dbo].[APS_ProductClass_ToExclude_HardCoded] ADD CONSTRAINT [PK_APS_ProductClass_ToExclude_HardCoded] PRIMARY KEY CLUSTERED  ([ExcludedProductClass]) ON [PRIMARY]
+GO
diff --git a/Tables/dbo.Oracle_BOMs.sql b/Tables/dbo.Oracle_BOMs.sql
new file mode 100644
index 0000000..2ffdde1
--- /dev/null
+++ b/Tables/dbo.Oracle_BOMs.sql
@@ -0,0 +1,37 @@
+CREATE TABLE [dbo].[Oracle_BOMs]
+(
+[ORG_ITEM_ID] [decimal] (38, 0) NOT NULL,
+[organization_id] [bigint] NULL,
+[oracle_item_id] [bigint] NULL,
+[item_number] [varchar] (40) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[inventory_item_status_code] [varchar] (10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[alternate_bom_designator] [varchar] (10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[product_class] [varchar] (250) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[item_seq] [float] NULL,
+[opseq] [float] NULL,
+[comp_item] [varchar] (40) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[make_buy] [varchar] (4) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[comp_qty_per] [float] NULL,
+[effectivity_date] [datetime] NULL,
+[wip_supply_type] [varchar] (30) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[count_per_uom] [varchar] (150) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[layer_id] [varchar] (150) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[unit_id] [varchar] (150) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[last_update_date] [datetime] NULL,
+[creation_date] [datetime] NULL,
+[disable_date] [datetime] NULL,
+[basis_type] [varchar] (80) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
+) ON [PRIMARY]
+GO
+ALTER TABLE [dbo].[Oracle_BOMs] ADD CONSTRAINT [PK_Oracle_BOMs] PRIMARY KEY CLUSTERED  ([ORG_ITEM_ID]) ON [PRIMARY]
+GO
+CREATE NONCLUSTERED INDEX [<Name of Missing Index, sysname,>] ON [dbo].[Oracle_BOMs] ([comp_item]) INCLUDE ([alternate_bom_designator], [item_number], [layer_id], [opseq], [unit_id]) ON [PRIMARY]
+GO
+CREATE NONCLUSTERED INDEX [IIX_Oracle_BOMs] ON [dbo].[Oracle_BOMs] ([comp_item]) INCLUDE ([alternate_bom_designator], [item_number], [layer_id], [opseq], [unit_id]) ON [PRIMARY]
+GO
+CREATE NONCLUSTERED INDEX [IX_Oracle_BOMs_1] ON [dbo].[Oracle_BOMs] ([comp_item], [item_number], [inventory_item_status_code], [opseq]) ON [PRIMARY]
+GO
+CREATE NONCLUSTERED INDEX [IX_Oracle_BOMs] ON [dbo].[Oracle_BOMs] ([item_number], [opseq], [inventory_item_status_code], [comp_item]) ON [PRIMARY]
+GO
+DENY DELETE ON  [dbo].[Oracle_BOMs] TO [NAA\SPB_Scheduling_RW]
+GO
diff --git a/Tables/dbo.Oracle_DJ_BOM.sql b/Tables/dbo.Oracle_DJ_BOM.sql
new file mode 100644
index 0000000..cdb505c
--- /dev/null
+++ b/Tables/dbo.Oracle_DJ_BOM.sql
@@ -0,0 +1,53 @@
+CREATE TABLE [dbo].[Oracle_DJ_BOM]
+(
+[unique_id] [decimal] (38, 0) NOT NULL,
+[organization_code] [varchar] (3) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[wip_entity_name] [varchar] (240) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[job_type] [varchar] (80) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[assembly_item] [varchar] (40) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[assembly_description] [varchar] (240) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[class_code] [varchar] (10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[dj_status] [varchar] (80) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[start_quantity] [float] NULL,
+[net_quantity] [float] NULL,
+[dj_wip_supply_type] [varchar] (80) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[completion_subinventory] [varchar] (10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[completion_locator] [varchar] (40) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[quantity_remaining] [varchar] (40) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[quantity_completed] [varchar] (40) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[quantity_scrapped] [varchar] (40) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[date_released] [datetime] NULL,
+[date_completed] [datetime] NULL,
+[date_closed] [datetime] NULL,
+[schedule_group_name] [varchar] (30) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[description] [varchar] (240) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[dj_creation_date] [datetime] NULL,
+[dj_last_update_date] [datetime] NULL,
+[component_item] [varchar] (40) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[operation_seq_num] [float] NULL,
+[department_code] [varchar] (10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[date_required] [datetime] NULL,
+[component_description] [varchar] (240) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[component_primary_uom_code] [varchar] (3) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[basis_type] [varchar] (80) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[quantity_per_assembly] [float] NULL,
+[required_quantity] [float] NULL,
+[quantity_issued] [varchar] (40) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[quantity_open] [varchar] (40) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[wip_supply_type] [float] NULL,
+[com_wip_supply_type] [varchar] (80) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[quantity_allocated] [float] NULL,
+[comments] [varchar] (240) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[supply_subinventory] [varchar] (10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[supply_locator] [varchar] (40) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[count_per_uom] [float] NULL,
+[layer_id] [varchar] (150) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[unit_id] [varchar] (150) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[creation_date] [datetime] NULL,
+[last_update_date] [datetime] NULL
+) ON [PRIMARY]
+GO
+ALTER TABLE [dbo].[Oracle_DJ_BOM] ADD CONSTRAINT [PK_Oracle_DJ_BOM] PRIMARY KEY CLUSTERED  ([unique_id]) ON [PRIMARY]
+GO
+DENY DELETE ON  [dbo].[Oracle_DJ_BOM] TO [NAA\SPB_Scheduling_RW]
+GO
diff --git a/Tables/dbo.Oracle_DJ_Routes.sql b/Tables/dbo.Oracle_DJ_Routes.sql
new file mode 100644
index 0000000..cdaea87
--- /dev/null
+++ b/Tables/dbo.Oracle_DJ_Routes.sql
@@ -0,0 +1,60 @@
+CREATE TABLE [dbo].[Oracle_DJ_Routes]
+(
+[unique_id] [decimal] (38, 0) NOT NULL,
+[organization_code] [varchar] (3) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[wip_entity_name] [varchar] (240) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[job_type] [varchar] (80) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[assembly_item] [varchar] (40) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[assembly_description] [varchar] (240) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[class_code] [varchar] (10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[dj_status] [varchar] (80) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[start_quantity] [float] NULL,
+[net_quantity] [float] NULL,
+[dj_wip_supply_type] [varchar] (80) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[completion_subinventory] [varchar] (10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[completion_locator] [varchar] (40) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[quantity_remaining] [varchar] (40) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[quantity_completed] [varchar] (40) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[quantity_scrapped] [varchar] (40) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[date_released] [datetime] NULL,
+[date_completed] [datetime] NULL,
+[date_closed] [datetime] NULL,
+[schedule_group_name] [varchar] (30) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[description] [varchar] (240) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[dj_creation_date] [datetime] NULL,
+[dj_last_update_date] [datetime] NULL,
+[operation_seq_num] [float] NULL,
+[operation_code] [varchar] (4) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[department_code] [varchar] (10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[count_point] [varchar] (1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[autocharge_flag] [varchar] (1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[backflush_flag] [varchar] (1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[check_skill] [varchar] (1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[minimum_transfer_quantity] [float] NULL,
+[date_last_moved] [datetime] NULL,
+[op_quantity_in_queue] [varchar] (40) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[op_quantity_running] [varchar] (40) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[op_quantity_waiting_to_move] [varchar] (40) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[op_quantity_rejected] [varchar] (40) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[op_quantity_scrapped] [varchar] (40) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[op_quantity_completed] [varchar] (40) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[progress_percentageg] [float] NULL,
+[first_unit_start_date] [datetime] NULL,
+[first_unit_completion_date] [datetime] NULL,
+[last_unit_start_date] [datetime] NULL,
+[last_unit_completion_date] [datetime] NULL,
+[operation_description] [varchar] (240) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[startup_scrap] [varchar] (150) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[send_to_aps] [varchar] (150) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[creation_date] [datetime] NULL,
+[last_update_date] [datetime] NULL,
+[true_operation_code] [nvarchar] (30) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[true_operation_seq_num] [float] NULL
+) ON [PRIMARY]
+GO
+ALTER TABLE [dbo].[Oracle_DJ_Routes] ADD CONSTRAINT [PK_Oracle_DJ_Routes] PRIMARY KEY CLUSTERED  ([unique_id]) ON [PRIMARY]
+GO
+CREATE NONCLUSTERED INDEX [IX_Oracle_DJ_Routes] ON [dbo].[Oracle_DJ_Routes] ([true_operation_code], [assembly_item], [department_code]) ON [PRIMARY]
+GO
+DENY DELETE ON  [dbo].[Oracle_DJ_Routes] TO [NAA\SPB_Scheduling_RW]
+GO
diff --git a/Tables/dbo.Oracle_Item_Attributes.sql b/Tables/dbo.Oracle_Item_Attributes.sql
new file mode 100644
index 0000000..04f8fa2
--- /dev/null
+++ b/Tables/dbo.Oracle_Item_Attributes.sql
@@ -0,0 +1,19 @@
+CREATE TABLE [dbo].[Oracle_Item_Attributes]
+(
+[unique_id] [decimal] (38, 0) NOT NULL,
+[organization_id] [bigint] NULL,
+[oracle_item_id] [bigint] NULL,
+[spec_id] [bigint] NULL,
+[char_id] [bigint] NULL,
+[item_number] [varchar] (40) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[spec_name] [varchar] (30) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[attribute_name] [varchar] (30) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[attribute_value] [varchar] (150) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[creation_date] [datetime] NULL,
+[last_update_date] [datetime] NULL
+) ON [PRIMARY]
+GO
+ALTER TABLE [dbo].[Oracle_Item_Attributes] ADD CONSTRAINT [PK_Oracle_Item_Attributes] PRIMARY KEY CLUSTERED  ([unique_id]) ON [PRIMARY]
+GO
+DENY DELETE ON  [dbo].[Oracle_Item_Attributes] TO [NAA\SPB_Scheduling_RW]
+GO
diff --git a/Tables/dbo.Oracle_Items.sql b/Tables/dbo.Oracle_Items.sql
new file mode 100644
index 0000000..62040a3
--- /dev/null
+++ b/Tables/dbo.Oracle_Items.sql
@@ -0,0 +1,47 @@
+CREATE TABLE [dbo].[Oracle_Items]
+(
+[ORG_ITEM_ID] [float] NOT NULL,
+[organization_id] [bigint] NULL,
+[oracle_item_id] [bigint] NULL,
+[item_number] [varchar] (40) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[item_description] [varchar] (240) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[primary_uom_code] [varchar] (3) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[inventory_item_status_code] [varchar] (10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[item_type] [varchar] (30) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[lot_control] [varchar] (3) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[preprocessing_lead_time] [float] NULL,
+[full_lead_time] [float] NULL,
+[postprocessing_lead_time] [float] NULL,
+[total_lead_time] [float] NULL,
+[lot_size] [float] NULL,
+[plan_constraint] [varchar] (240) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[make_buy] [varchar] (4) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[purchase_category] [varchar] (40) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[product_class] [varchar] (250) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[creation_date] [datetime] NULL,
+[last_update_date] [datetime] NULL,
+[unit_weight] [float] NULL,
+[uom_code] [varchar] (25) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[standard_cost] [float] NULL,
+[drawing_number] [varchar] (255) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[supplier] [varchar] (240) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[market_price] [float] NULL,
+[list_price] [float] NULL,
+[buyer] [varchar] (240) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[fixed_lot_multiplier] [float] NULL,
+[fixed_order_qty] [float] NULL,
+[min_order_qty] [float] NULL,
+[po_date] [datetime] NULL,
+[po_receipt_date] [datetime] NULL
+) ON [PRIMARY]
+GO
+ALTER TABLE [dbo].[Oracle_Items] ADD CONSTRAINT [PK_Oracle_Items] PRIMARY KEY CLUSTERED  ([ORG_ITEM_ID]) ON [PRIMARY]
+GO
+CREATE NONCLUSTERED INDEX [IX_Oracle_Items] ON [dbo].[Oracle_Items] ([inventory_item_status_code], [item_number]) ON [PRIMARY]
+GO
+CREATE NONCLUSTERED INDEX [IX_Oracle_Items_1] ON [dbo].[Oracle_Items] ([item_number], [inventory_item_status_code]) ON [PRIMARY]
+GO
+CREATE NONCLUSTERED INDEX [Oracle_Items_IX] ON [dbo].[Oracle_Items] ([make_buy]) INCLUDE ([item_description], [item_number], [product_class]) ON [PRIMARY]
+GO
+DENY DELETE ON  [dbo].[Oracle_Items] TO [NAA\SPB_Scheduling_RW]
+GO
diff --git a/Tables/dbo.Oracle_Onhand.sql b/Tables/dbo.Oracle_Onhand.sql
new file mode 100644
index 0000000..b77c265
--- /dev/null
+++ b/Tables/dbo.Oracle_Onhand.sql
@@ -0,0 +1,45 @@
+CREATE TABLE [dbo].[Oracle_Onhand]
+(
+[organization_id] [bigint] NULL,
+[organization_code] [varchar] (3) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[oracle_item_id] [bigint] NULL,
+[item_number] [varchar] (40) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[item_description] [varchar] (240) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[serial_code] [float] NULL,
+[onhand_qty] [float] NULL,
+[subinventory_code] [varchar] (10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[locator_id] [bigint] NULL,
+[item_locator] [varchar] (40) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[lot_number] [varchar] (80) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[serial_number] [varchar] (30) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[primary_uom_code] [varchar] (3) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[product_class] [varchar] (250) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[creation_date] [datetime] NULL,
+[last_update_date] [datetime] NULL,
+[unique_id] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
+) ON [PRIMARY]
+GO
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+
+CREATE TRIGGER [dbo].[OnHand_MassDelete]
+ON [dbo].[Oracle_Onhand]
+FOR DELETE 
+AS
+	DECLARE @DeleteCount INT = (SELECT COUNT(*) FROM deleted)
+	DECLARE @EmailSubject varchar(1000) = 'Oracle_OnHand data is being deleted ' + CAST(GETDATE() AS NVARCHAR(50))
+
+    IF(@DeleteCount > 100)
+        EXEC msdb.dbo.sp_send_dbmail
+        @recipients = 'Bryan.Eddy@aflglobal.com; Shannon.Jackson@aflglobal.com; Prasad.Patchipulusu@aflglobal.com; Krishna.Vemuri@aflglobal.com; Jeff.Gilfillan@aflglobal.com;' ,
+        @body = 'Oracle_OnHand data is being deleted.',
+        @subject = @EmailSubject;
+GO
+ALTER TABLE [dbo].[Oracle_Onhand] ADD CONSTRAINT [PK_Oracle_onhand] PRIMARY KEY CLUSTERED  ([unique_id]) ON [PRIMARY]
+GO
+ALTER TABLE [dbo].[Oracle_Onhand] ENABLE CHANGE_TRACKING WITH (TRACK_COLUMNS_UPDATED = ON)
+GO
+DENY DELETE ON  [dbo].[Oracle_Onhand] TO [NAA\SPB_Scheduling_RW]
+GO
diff --git a/Tables/dbo.Oracle_Orders.sql b/Tables/dbo.Oracle_Orders.sql
new file mode 100644
index 0000000..0ed731f
--- /dev/null
+++ b/Tables/dbo.Oracle_Orders.sql
@@ -0,0 +1,87 @@
+CREATE TABLE [dbo].[Oracle_Orders]
+(
+[master_schedule_id] [float] NOT NULL,
+[active_flag] [varchar] (1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[disable_reason] [varchar] (500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[disable_date] [datetime] NULL,
+[organization_code] [varchar] (3) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[order_number] [bigint] NULL,
+[order_status] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[order_type] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[conc_order_number] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[line_number] [bigint] NULL,
+[current_shipment_number] [bigint] NULL,
+[line_status] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[order_line_source_type] [varchar] (30) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[source] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[request_date] [datetime] NULL,
+[promise_date] [datetime] NULL,
+[need_by_date] [datetime] NULL,
+[schedule_approved] [varchar] (30) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[usac_no_of_cuts] [float] NULL,
+[usac_cut_length] [float] NULL,
+[bom_route_alt] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[has_credit_hold] [varchar] (10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[has_mfg_hold] [varchar] (10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[has_export_hold] [varchar] (10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[has_shipping_hold] [varchar] (10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[scheduler] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[order_uom] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[order_quantity] [float] NULL,
+[assembly_item] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[assy_primary_uom] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[make_buy_flag] [varchar] (30) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[pri_uom_order_qty] [float] NULL,
+[component_item] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[comp_primary_uom] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[operation_seq_num] [float] NULL,
+[operation_code] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[department_code] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[bom_level] [bigint] NULL,
+[bom_op_sequence] [float] NULL,
+[start_up_scrap] [float] NULL,
+[qty_per] [float] NULL,
+[bom_required_qty] [float] NULL,
+[intended_job_qty] [float] NULL,
+[minimum_cut_length] [float] NULL,
+[send_to_aps] [varchar] (30) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[count_per_uom] [float] NULL,
+[unit_id] [varchar] (10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[layer_id] [varchar] (10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[group_id] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[total_job_length] [float] NULL,
+[fiber_planned] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[comp_product_class] [varchar] (1000) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[child_dj_number] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[parent_dj_number] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[actual_job_qty] [float] NULL,
+[machine_name] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[regrouping_allowed] [varchar] (10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[creation_date] [datetime] NULL,
+[last_update_date] [datetime] NULL,
+[mfg_sched_refresh_date] [datetime] NULL,
+[setup_start_date] [datetime] NULL,
+[start_time_date] [datetime] NULL,
+[end_time_date] [datetime] NULL,
+[to_machine] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[reel_size] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[ship_date] [datetime] NULL,
+[usac_customer] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[set_name] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[set_number] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[customer_name] [varchar] (360) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[schedule_ship_date] [datetime] NULL,
+[transfer_to_aps] [varchar] (10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[customer_number] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[schedule_approved_date] [datetime] NULL,
+[fiber_set_id] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[sf_group_id] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[sf_fiber_set_id] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[pri_uom_shipped_qty] [float] NULL,
+[pri_uom_open_qty] [float] NULL
+) ON [PRIMARY]
+GO
+ALTER TABLE [dbo].[Oracle_Orders] ADD CONSTRAINT [PK_Oracle_Orders] PRIMARY KEY CLUSTERED  ([master_schedule_id]) ON [PRIMARY]
+GO
+DENY DELETE ON  [dbo].[Oracle_Orders] TO [NAA\SPB_Scheduling_RW]
+GO
diff --git a/Tables/dbo.Oracle_Routes.sql b/Tables/dbo.Oracle_Routes.sql
new file mode 100644
index 0000000..3ab0ab5
--- /dev/null
+++ b/Tables/dbo.Oracle_Routes.sql
@@ -0,0 +1,38 @@
+CREATE TABLE [dbo].[Oracle_Routes]
+(
+[Unique_ID] [decimal] (38, 0) NOT NULL,
+[organization_id] [bigint] NULL,
+[item_number] [varchar] (40) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[item_description] [varchar] (240) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[alternate_routing_designator] [varchar] (10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[item_type] [varchar] (30) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[operation_seq_num] [float] NULL,
+[standard_operation_id] [bigint] NULL,
+[operation_code] [varchar] (4) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[department_id] [bigint] NULL,
+[disable_date] [datetime] NULL,
+[department_code] [varchar] (10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[start_up_scrap] [varchar] (150) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[pass_to_aps] [varchar] (150) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[setup_item] [varchar] (40) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[creation_date] [datetime] NULL,
+[last_update_date] [datetime] NULL,
+[true_operation_code] [nvarchar] (30) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[true_operation_seq_num] [float] NULL,
+[Effectivity_date] [datetime] NULL
+) ON [PRIMARY]
+GO
+ALTER TABLE [dbo].[Oracle_Routes] ADD CONSTRAINT [PK_Oracle_Routes] PRIMARY KEY CLUSTERED  ([Unique_ID]) ON [PRIMARY]
+GO
+CREATE NONCLUSTERED INDEX [IX_Oracle_Routes] ON [dbo].[Oracle_Routes] ([item_number], [alternate_routing_designator], [operation_seq_num], [setup_item]) ON [PRIMARY]
+GO
+CREATE NONCLUSTERED INDEX [IX_Oracle_Routes_2] ON [dbo].[Oracle_Routes] ([item_number], [true_operation_code], [department_code]) ON [PRIMARY]
+GO
+CREATE NONCLUSTERED INDEX [IIX_Oracle_Routes] ON [dbo].[Oracle_Routes] ([pass_to_aps]) INCLUDE ([alternate_routing_designator], [item_number], [operation_code], [operation_seq_num], [Unique_ID]) ON [PRIMARY]
+GO
+CREATE NONCLUSTERED INDEX [IX_Oracle_Routes_1] ON [dbo].[Oracle_Routes] ([true_operation_code], [item_number], [operation_seq_num]) ON [PRIMARY]
+GO
+CREATE NONCLUSTERED INDEX [Oracle_Routes_IXX] ON [dbo].[Oracle_Routes] ([true_operation_seq_num]) INCLUDE ([alternate_routing_designator], [department_code], [item_number], [true_operation_code]) ON [PRIMARY]
+GO
+DENY DELETE ON  [dbo].[Oracle_Routes] TO [NAA\SPB_Scheduling_RW]
+GO
diff --git a/Tables/dbo.Oracle_USAC_PO_SO.sql b/Tables/dbo.Oracle_USAC_PO_SO.sql
new file mode 100644
index 0000000..c90263a
--- /dev/null
+++ b/Tables/dbo.Oracle_USAC_PO_SO.sql
@@ -0,0 +1,66 @@
+CREATE TABLE [dbo].[Oracle_USAC_PO_SO]
+(
+[item_number] [varchar] (40) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[purchase_order_ln_shp] [varchar] (920) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[plan_id] [bigint] NULL,
+[plan_name] [varchar] (30) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[organization_id] [bigint] NULL,
+[organization_name] [varchar] (240) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[collection_id] [bigint] NULL,
+[occurrence] [float] NULL,
+[po_so_last_update_date] [datetime] NULL,
+[last_udpated_by_id] [bigint] NULL,
+[last_updated_by] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[po_so_creation_date] [datetime] NULL,
+[created_by_id] [bigint] NULL,
+[last_update_login] [float] NULL,
+[quantity_allocated] [float] NULL,
+[sales_order_ln] [varchar] (610) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[shop_order_status] [varchar] (150) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[end_so_ln] [varchar] (150) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[so_item] [varchar] (255) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[so_qty] [float] NULL,
+[so_mult] [float] NULL,
+[so_uom] [varchar] (150) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[so_sch_ship] [datetime] NULL,
+[customer_name] [varchar] (360) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[set_name] [varchar] (150) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[set_number] [varchar] (150) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[shop_id] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[spec_number] [varchar] (150) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[mutl_number] [float] NULL,
+[mult_length] [float] NULL,
+[mult_uom] [varchar] (150) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[tolerance] [varchar] (150) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[reel_size] [varchar] (150) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[line_spec] [varchar] (150) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[spc_machine] [varchar] (150) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[spc_job] [varchar] (150) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[schd_start_date] [datetime] NULL,
+[schd_complete_date] [datetime] NULL,
+[prt_paper] [varchar] (150) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[printer] [varchar] (150) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[completed_qty] [float] NULL,
+[completed_cuts] [float] NULL,
+[po] [varchar] (920) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[internal_promise_date] [datetime] NULL,
+[created_by] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[collection] [float] NULL,
+[entry_date] [datetime] NULL,
+[so_item_desc] [varchar] (240) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[so_uom_code] [varchar] (3) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[so_weight] [float] NULL,
+[so_weight_uom] [varchar] (3) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[so_product_category] [varchar] (245) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[inv_item_desc] [varchar] (240) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[inv_uom_code] [varchar] (3) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[inv_weight] [float] NULL,
+[inv_weight_uom] [varchar] (3) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[inv_product_category] [varchar] (245) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[creation_date] [datetime] NULL,
+[last_update_date] [datetime] NULL,
+[UNIQUE_ID] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
+) ON [PRIMARY]
+GO
+ALTER TABLE [dbo].[Oracle_USAC_PO_SO] ADD CONSTRAINT [PK_Oracle_USAC_PO_SO] PRIMARY KEY CLUSTERED  ([UNIQUE_ID]) ON [PRIMARY]
+GO
diff --git a/Tables/dbo._report_3e_mrg_nonfiber.sql b/Tables/dbo._report_3e_mrg_nonfiber.sql
new file mode 100644
index 0000000..0c06f19
--- /dev/null
+++ b/Tables/dbo._report_3e_mrg_nonfiber.sql
@@ -0,0 +1,30 @@
+CREATE TABLE [dbo].[_report_3e_mrg_nonfiber]
+(
+[last_update_date] [datetime] NULL,
+[StartDate] [nvarchar] (10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[OrderLine] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[SchedDate] [nvarchar] (10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[PromDate] [nvarchar] (10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[Final_Assembly] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[Required] [float] NULL,
+[ScheduleApproved] [nvarchar] (30) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[Item] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[CustomerName] [nvarchar] (360) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[OrderQty] [float] NULL,
+[Department] [nvarchar] (1000) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[OpID] [nvarchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[CountPerUOM_NotRolledUp] [float] NULL,
+[CompQtyPer_NotRolledUp] [float] NULL,
+[Scheduler] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[OffsetWeekStart] [nvarchar] (10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[OffsetMonthYear] [nvarchar] (8) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[SumOfStartUp_Scrap] [float] NULL,
+[DJ] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[DJ_Status] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[ComponentUOM] [nvarchar] (10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[UOM] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[JobID] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[ReportSource] [nvarchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[StartDateTime] [datetime] NULL
+) ON [PRIMARY]
+GO
diff --git a/Tables/dbo._report_3f_mrg_fiber.sql b/Tables/dbo._report_3f_mrg_fiber.sql
new file mode 100644
index 0000000..e0bd6db
--- /dev/null
+++ b/Tables/dbo._report_3f_mrg_fiber.sql
@@ -0,0 +1,26 @@
+CREATE TABLE [dbo].[_report_3f_mrg_fiber]
+(
+[last_update_date] [datetime] NULL,
+[StartDate] [nvarchar] (10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[OrderLine] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[SchedDate] [nvarchar] (10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[PromDate] [nvarchar] (10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[Final_Assembly] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[FiberKM] [float] NULL,
+[ScheduleApproved] [nvarchar] (30) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[FiberItem] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[CustomerName] [nvarchar] (360) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[OrderQty] [float] NULL,
+[Department] [nvarchar] (1000) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[UnitsPerFG] [float] NULL,
+[Scheduler] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[OffsetWeekStart] [nvarchar] (10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[OffsetMonthYear] [nvarchar] (8) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[SumOfStartUp_Scrap] [float] NULL,
+[ComponentUOM] [nvarchar] (10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[UOM] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[JobID] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[ReportSource] [nvarchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[StartDateTime] [datetime] NULL
+) ON [PRIMARY]
+GO
diff --git a/Tables/dbo._report_4a_production_master_schedule.sql b/Tables/dbo._report_4a_production_master_schedule.sql
new file mode 100644
index 0000000..a17c336
--- /dev/null
+++ b/Tables/dbo._report_4a_production_master_schedule.sql
@@ -0,0 +1,34 @@
+CREATE TABLE [dbo].[_report_4a_production_master_schedule]
+(
+[planned_setup_start] [datetime] NULL,
+[planned_setup_end] [datetime] NULL,
+[previous_op_machine] [varchar] (max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[previous_op_status] [varchar] (max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[current_op_machine] [varchar] (max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[current_op_status] [varchar] (max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[next_op_machine] [varchar] (max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[dj_number] [varchar] (max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[sf_group_id] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[job] [varchar] (max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[op] [varchar] (max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[setup] [varchar] (max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[customer] [nvarchar] (max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[order_number] [varchar] (max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[order_scheduled_end_date] [datetime] NULL,
+[oracle_dj_status] [varchar] (80) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[part_no] [varchar] (max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[job_qty] [float] NULL,
+[ujcm] [varchar] (max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[earliest_material_availability_date] [datetime] NULL,
+[need_date] [datetime] NULL,
+[promise_date] [datetime] NULL,
+[schedule_ship_date] [datetime] NULL,
+[scheduled_end_date] [datetime] NULL,
+[scheduled_run_hours] [float] NULL,
+[scheduled_setup_hours] [float] NULL,
+[scheduled_total_hours] [float] NULL,
+[late_order] [varchar] (1) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
+[remake] [varchar] (1) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
+[last_update_date] [datetime] NOT NULL
+) ON [PRIMARY]
+GO
diff --git a/Views/Scheduling.vItemAttributes.sql b/Views/Scheduling.vItemAttributes.sql
new file mode 100644
index 0000000..9b24ceb
--- /dev/null
+++ b/Views/Scheduling.vItemAttributes.sql
@@ -0,0 +1,135 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+CREATE VIEW [Scheduling].[vItemAttributes]
+AS
+SELECT        ItemNumber, CableColor, Gel, NominalOD, FiberCount, FiberMeters,RevisedBy, DateRevised, CreatedBy, DateCreated,ContainsFiberIdBinders, ContainsBinder
+			,Printed
+FROM            Setup.ItemAttributes
+
+GO
+EXEC sp_addextendedproperty N'MS_DiagramPane1', N'[0E232FF0-B466-11cf-A24F-00AA00A3EFFF, 1.00]
+Begin DesignProperties = 
+   Begin PaneConfigurations = 
+      Begin PaneConfiguration = 0
+         NumPanes = 4
+         Configuration = "(H (1[40] 4[20] 2[20] 3) )"
+      End
+      Begin PaneConfiguration = 1
+         NumPanes = 3
+         Configuration = "(H (1 [50] 4 [25] 3))"
+      End
+      Begin PaneConfiguration = 2
+         NumPanes = 3
+         Configuration = "(H (1 [50] 2 [25] 3))"
+      End
+      Begin PaneConfiguration = 3
+         NumPanes = 3
+         Configuration = "(H (4 [30] 2 [40] 3))"
+      End
+      Begin PaneConfiguration = 4
+         NumPanes = 2
+         Configuration = "(H (1 [56] 3))"
+      End
+      Begin PaneConfiguration = 5
+         NumPanes = 2
+         Configuration = "(H (2 [66] 3))"
+      End
+      Begin PaneConfiguration = 6
+         NumPanes = 2
+         Configuration = "(H (4 [50] 3))"
+      End
+      Begin PaneConfiguration = 7
+         NumPanes = 1
+         Configuration = "(V (3))"
+      End
+      Begin PaneConfiguration = 8
+         NumPanes = 3
+         Configuration = "(H (1[56] 4[18] 2) )"
+      End
+      Begin PaneConfiguration = 9
+         NumPanes = 2
+         Configuration = "(H (1 [75] 4))"
+      End
+      Begin PaneConfiguration = 10
+         NumPanes = 2
+         Configuration = "(H (1[66] 2) )"
+      End
+      Begin PaneConfiguration = 11
+         NumPanes = 2
+         Configuration = "(H (4 [60] 2))"
+      End
+      Begin PaneConfiguration = 12
+         NumPanes = 1
+         Configuration = "(H (1) )"
+      End
+      Begin PaneConfiguration = 13
+         NumPanes = 1
+         Configuration = "(V (4))"
+      End
+      Begin PaneConfiguration = 14
+         NumPanes = 1
+         Configuration = "(V (2))"
+      End
+      ActivePaneConfig = 0
+   End
+   Begin DiagramPane = 
+      Begin Origin = 
+         Top = 0
+         Left = 0
+      End
+      Begin Tables = 
+         Begin Table = "ItemAttributes (Setup)"
+            Begin Extent = 
+               Top = 6
+               Left = 38
+               Bottom = 258
+               Right = 208
+            End
+            DisplayFlags = 280
+            TopColumn = 0
+         End
+      End
+   End
+   Begin SQLPane = 
+   End
+   Begin DataPane = 
+      Begin ParameterDefaults = ""
+      End
+      Begin ColumnWidths = 9
+         Width = 284
+         Width = 1500
+         Width = 1500
+         Width = 1500
+         Width = 1500
+         Width = 1500
+         Width = 1500
+         Width = 1500
+         Width = 1500
+      End
+   End
+   Begin CriteriaPane = 
+      Begin ColumnWidths = 11
+         Column = 1440
+         Alias = 900
+         Table = 1170
+         Output = 720
+         Append = 1400
+         NewValue = 1170
+         SortType = 1350
+         SortOrder = 1410
+         GroupBy = 1350
+         Filter = 1350
+         Or = 1350
+         Or = 1350
+         Or = 1350
+      End
+   End
+End
+', 'SCHEMA', N'Scheduling', 'VIEW', N'vItemAttributes', NULL, NULL
+GO
+DECLARE @xp int
+SELECT @xp=1
+EXEC sp_addextendedproperty N'MS_DiagramPaneCount', @xp, 'SCHEMA', N'Scheduling', 'VIEW', N'vItemAttributes', NULL, NULL
+GO
diff --git a/Views/Scheduling.vLateOrders.sql b/Views/Scheduling.vLateOrders.sql
new file mode 100644
index 0000000..5d16ae4
--- /dev/null
+++ b/Views/Scheduling.vLateOrders.sql
@@ -0,0 +1,23 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+/*
+Author:		Bryan Eddy
+Date:		4/12/2018
+Desc:		View for reporting of late orders
+Version:	1
+Update:		n/a
+*/
+
+
+/* TO DO : Order Quantity */
+CREATE VIEW [Scheduling].[vLateOrders]
+as
+SELECT DISTINCT  order_number, I.customer_name, assembly_item, pri_uom_order_qty, order_scheduled_end_date,promise_date,
+CASE WHEN promise_date < schedule_ship_date THEN schedule_ship_date END Recommit,
+ DATEDIFF(MM,promise_date,schedule_ship_date) PromiseDeltaMonths
+, late_order, I.schedule_approved
+FROM dbo._report_4a_production_master_schedule K INNER JOIN (SELECT customer_name, conc_order_number,assembly_item,pri_uom_order_qty, schedule_approved FROM  dbo.Oracle_Orders) I ON I.conc_order_number = K.order_number
+WHERE promise_date < order_scheduled_end_date AND late_order = 'Y'
+GO
diff --git a/Views/Scheduling.vOracleOrders.sql b/Views/Scheduling.vOracleOrders.sql
new file mode 100644
index 0000000..92ae3f9
--- /dev/null
+++ b/Views/Scheduling.vOracleOrders.sql
@@ -0,0 +1,20 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+
+/****** Script for SelectTopNRows command from SSMS  ******/
+/*
+Author:		Bryan Eddy
+Date:		4/18/2018
+Desc:		View of sales orders filtered for information pertinent to PlanetTogether
+Version:	1
+Update:		n/a
+*/
+
+CREATE VIEW [Scheduling].[vOracleOrders]
+AS
+SELECT DISTINCT conc_order_number, child_dj_number, parent_dj_number, assembly_item, order_status, line_status, promise_date ,need_by_date, order_number, line_number
+  FROM [dbo].[Oracle_Orders]
+  WHERE transfer_to_aps = 'yes' AND active_flag = 'y' 
+GO
diff --git a/Views/Scheduling.vSchedulerMachineCapabilityIssue.sql b/Views/Scheduling.vSchedulerMachineCapabilityIssue.sql
new file mode 100644
index 0000000..f2871d6
--- /dev/null
+++ b/Views/Scheduling.vSchedulerMachineCapabilityIssue.sql
@@ -0,0 +1,42 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+/*
+Author:		Bryan Eddy
+Date:		4/18/2018
+Desc:		Displays setups that are active in the PSS system, but scheduler has blocked the ability for the setup to schedule
+			Used in email alerts and reporting
+Version:	1
+Update.
+*/
+
+CREATE VIEW [Scheduling].[vSchedulerMachineCapabilityIssue]
+AS
+
+	--IF OBJECT_ID(N'tempdb..#NotSchedulingSetups', N'U') IS NOT NULL
+	--DROP TABLE #NotSchedulingSetups;
+
+	--IF OBJECT_ID(N'tempdb..#Results', N'U') IS NOT NULL
+	--DROP TABLE #Results;
+	WITH cteSchedulingActive  --Determine what can schedule
+	AS(
+		SELECT DISTINCT G.SETUP
+		FROM setup.[vSetupStatus] K INNER JOIN Scheduling.MachineCapabilityScheduler G ON G.SETUP = K.Setup AND G.MachineID = K.Machineid
+		WHERE G.ActiveScheduling = 1
+		)
+	,cteNotSchedulignSetups
+	AS(
+	SELECT DISTINCT K.Setup AS Setup  
+	--INTO #NotSchedulingSetups
+	FROM setup.[vSetupStatus] K LEFT JOIN cteSchedulingActive G ON G.Setup = K.Setup
+	WHERE G.Setup IS NULL AND k.Machineid IS NOT NULL AND K.ActiveSetup = 1
+	)
+	
+	SELECT DISTINCT K.MachineID,K.Setup, k.ActiveScheduling, G.ActiveSetup, K.ActiveStatusChangedBy, K.ActiveStatusChangedDate, P.MachineName
+	--INTO #Results
+	FROM cteNotSchedulignSetups I INNER JOIN setup.vSetupStatus G ON G.Setup = I.Setup
+	INNER JOIN Scheduling.MachineCapabilityScheduler K ON K.SETUP = I.Setup
+	INNER JOIN setup.MachineNames P ON P.MachineID = K.MachineID
+	WHERE G.ActiveSetup = 1
+GO
diff --git a/Views/Setup.vAttributeMatrixUnion.sql b/Views/Setup.vAttributeMatrixUnion.sql
new file mode 100644
index 0000000..d06b8f6
--- /dev/null
+++ b/Views/Setup.vAttributeMatrixUnion.sql
@@ -0,0 +1,43 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+
+
+
+
+/****** Script for SelectTopNRows command from SSMS  ******/
+CREATE VIEW [Setup].[vAttributeMatrixUnion]
+AS
+WITH cteAttributeMatrixUnion
+AS(
+	SELECT AttributeNameID, MachineID , TimeValue, cost , NULL FromAttribute, NULL ToAttribute, NULL  AttributeValue, Adder
+  FROM [Setup].AttributeMatrixFixedValue
+
+  UNION ALL
+
+  SELECT AttributeNameID, MachineID, TimeValue, cost, FromAttribute, ToAttribute, NULL  AttributeValue, 0 Adder
+  FROM Setup.AttributeMatrixFromTo
+
+  UNION ALL
+
+  SELECT AttributeNameID, MachineID , TimeValue, cost , NULL FromAttribute, NULL ToAttribute, AttributeValue, 0 Adder
+  FROM Setup.AttributeMatrixVariableValue
+  )
+
+  SELECT U.AttributeName, K.AttributeNameID,
+                         K.MachineID,
+                         K.TimeValue,
+                         K.Cost,
+                         K.FromAttribute,
+                         K.ToAttribute,
+                         K.AttributeValue,
+                         K.Adder, T.ValueTypeID, T.LogicType, P.ValueTypeName, P.ValueTypeDescription, T.MachineGroupID, MachineName
+  FROM cteAttributeMatrixUnion K INNER JOIN Setup.MachineNames G ON G.MachineID = K.MachineID
+  INNER JOIN setup.MachineGroupAttributes T ON T.AttributeNameID = K.AttributeNameID AND T.MachineGroupID = G.MachineGroupID
+  INNER JOIN SETUP.ApsSetupAttributeValueType P ON P.ValueTypeID = T.ValueTypeID
+  INNER JOIN SETUP.ApsSetupAttributes U ON U.AttributeNameID = K.AttributeNameID
+
+
+
+GO
diff --git a/Views/Setup.vBomUnion.sql b/Views/Setup.vBomUnion.sql
new file mode 100644
index 0000000..de6a978
--- /dev/null
+++ b/Views/Setup.vBomUnion.sql
@@ -0,0 +1,32 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+
+
+
+
+
+
+
+
+/*
+Author:		Bryan Eddy
+Date:		2/5/2018
+Desc:		Union of both BOMs (DJ and Std) 
+Version:	1
+Update:		Initial creation
+*/
+
+CREATE VIEW [Setup].[vBomUnion]
+AS 
+
+SELECT item_number, comp_item, comp_qty_per, opseq, alternate_bom_designator, count_per_uom, '1' AS wip_entity_name
+FROM dbo.Oracle_BOMs
+
+
+UNION
+
+SELECT assembly_item, component_item, quantity_issued ,operation_seq_num,'Primary', count_per_uom, wip_entity_name
+FROM dbo.Oracle_DJ_BOM
+GO
diff --git a/Views/Setup.vExclusionItemList.sql b/Views/Setup.vExclusionItemList.sql
new file mode 100644
index 0000000..0b5a9d8
--- /dev/null
+++ b/Views/Setup.vExclusionItemList.sql
@@ -0,0 +1,43 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+
+
+
+
+
+
+
+
+
+/*
+Author:			Bryan Eddy
+Date:			12/17/2017
+Description:	An exclusion list for PlanetTogether to prevent orders from erroring out during import/refresh
+Version:		5
+Update:			Update exclusion list to not show items with DJ's
+
+
+
+*/
+
+CREATE VIEW	[Setup].[vExclusionItemList]
+AS
+	
+WITH cteExcludedItems
+AS(
+	SELECT DISTINCT AssemblyItemNumber AS ItemNumber--, G.Setup
+	FROM Setup.vMissingSetups G CROSS APPLY setup.fn_WhereUsed(item) K
+	UNION 
+	SELECT  Item AS ItemNumber--, cteSetupLocation.Setup
+	FROM Setup.vMissingSetups
+	UNION	
+	SELECT G.item_number--,NULL
+	FROM dbo.APS_ProductClass_ToExclude_HardCoded K INNER JOIN dbo.Oracle_Items G ON G.product_class = K.ExcludedProductClass
+)
+SELECT k.ItemNumber, I.inventory_item_status_code, I.product_class
+FROM cteExcludedItems k LEFT JOIN dbo.Oracle_Items I ON I.item_number = K.ItemNumber
+
+
+GO
diff --git a/Views/Setup.vInterfaceAllMachineSetups.sql b/Views/Setup.vInterfaceAllMachineSetups.sql
new file mode 100644
index 0000000..428b6a1
--- /dev/null
+++ b/Views/Setup.vInterfaceAllMachineSetups.sql
@@ -0,0 +1,27 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+
+
+
+
+
+
+/*Interface view of needed information from the Recipe Management Syste / PSS DB*/
+CREATE VIEW [Setup].[vInterfaceAllMachineSetups]
+AS
+SELECT        Setup.tblProcessMachines.ProcessID, Setup.tblProcessMachines.MachineID AS PssMachineID, setup.tblProcessMachines.ProcessID AS PssProcessID
+				, Setup.tblSetup.SetupID, 
+                         Setup.tblSetup.SetupNumber Setup, Setup.tblSetup.IneffectiveDate, Setup.tblProcessMachines.MachineNumber
+FROM            Setup.tblSetup INNER JOIN
+                         Setup.tblProcessMachines ON Setup.tblSetup.MachineID = Setup.tblProcessMachines.MachineID AND 
+                         Setup.tblSetup.ProcessID = Setup.tblProcessMachines.ProcessID
+WHERE        (Setup.tblProcessMachines.Active <> 0)
+
+
+
+
+
+
+GO
diff --git a/Views/Setup.vInterfaceMachineCapability.sql b/Views/Setup.vInterfaceMachineCapability.sql
new file mode 100644
index 0000000..23fd577
--- /dev/null
+++ b/Views/Setup.vInterfaceMachineCapability.sql
@@ -0,0 +1,10 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+
+CREATE VIEW [Setup].[vInterfaceMachineCapability]
+AS
+SELECT K.SetupNumber, G.ProcessID AS PssProcessID, g.MachineID AS PssMachineID, K.IneffectiveDate, g.Active
+FROM setup.tblProcessMachines G INNER JOIN SETUP.tblSetup K ON G.ProcessID = K.ProcessID AND G.MachineID = K.MachineID
+GO
diff --git a/Views/Setup.vInterfaceSetupAttributes.sql b/Views/Setup.vInterfaceSetupAttributes.sql
new file mode 100644
index 0000000..5bf3525
--- /dev/null
+++ b/Views/Setup.vInterfaceSetupAttributes.sql
@@ -0,0 +1,48 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+/*Interface view of needed information from the Recipe Management Syste / PSS DB*/
+CREATE VIEW [Setup].[vInterfaceSetupAttributes]
+AS
+SELECT        Setup.tblProcessMachines.ProcessID,
+                         Setup.tblAttributes.AttributeID, Setup.tblAttributes.AttributeDesc, Setup.tblAttributes.AttributeName, Setup.tblSetup.SetupID, Setup.tblSetup.SetupNumber, 
+                         Setup.tblSetupAttributes.AttributeValue, Setup.tblSetupAttributes.MachineSpecific, Setup.tblSetupAttributes.MinValue, Setup.tblAttributes.Active, 
+                         Setup.tblSetupAttributes.EffectiveDate, Setup.tblAttributes.AttrEffectiveDate, Setup.tblAttributes.AttributeGroupID, Setup.tblSetup.IneffectiveDate, 
+                         Setup.tblAttributes.AttributeUOM, Setup.tblAttributes.AttrIneffectiveDate AS AttributeIneffectiveDate, 
+                         Setup.tblSetupAttributes.IneffectiveDate AS SetupAttributesIneffectiveDate, Setup.tblProcessMachines.MachineNumber, tblProcessMachines.MachineID AS PssMachineID
+						 ,tblProcessMachines.ProcessID AS PssProcessID, AttributeViewOrder, AttributeDataType,SigDigits
+FROM            Setup.tblAttributes INNER JOIN
+                         Setup.tblSetupAttributes ON Setup.tblAttributes.AttributeID = Setup.tblSetupAttributes.AttributeID INNER JOIN
+                         Setup.tblSetup ON Setup.tblSetupAttributes.SetupID = Setup.tblSetup.SetupID AND Setup.tblSetupAttributes.MachineID = Setup.tblSetup.MachineID INNER JOIN
+                         Setup.tblProcessMachines ON Setup.tblSetup.MachineID = Setup.tblProcessMachines.MachineID AND 
+                         Setup.tblSetup.ProcessID = Setup.tblProcessMachines.ProcessID
+						 
+WHERE        (Setup.tblAttributes.AttrIneffectiveDate >= GETDATE()) AND (Setup.tblSetup.IneffectiveDate >= GETDATE()) AND (Setup.tblSetupAttributes.IneffectiveDate >= GETDATE()) 
+                         AND (Setup.tblProcessMachines.Active <> 0) 
+						 
+
+
+
+
+
+
+
+
+
+GO
diff --git a/Views/Setup.vInterfaceSetupLineSpeed.sql b/Views/Setup.vInterfaceSetupLineSpeed.sql
new file mode 100644
index 0000000..568216e
--- /dev/null
+++ b/Views/Setup.vInterfaceSetupLineSpeed.sql
@@ -0,0 +1,47 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+
+
+
+
+
+
+
+
+
+
+
+
+-- =============================================
+-- Author:		Bryan Eddy
+-- Create date: 9/14/2017
+-- Description:	Interface view of needed information from the Recipe Management Syste / PSS DB
+-- =============================================
+CREATE VIEW [Setup].[vInterfaceSetupLineSpeed]
+AS
+	SELECT K.SetupNumber,E.AttributeValue, k.SetupDesc, b.MachineID AS PssMachineID, B.ProcessID AS PssProcessID,I.AttributeID,
+	ROW_NUMBER() OVER (PARTITION BY K.SetupNumber,B.MachineID,B.ProcessID ORDER BY K.SetupNumber,b.MachineID,E.AttributeValue,B.ProcessID  ASC ) AS RowNumber
+	 FROM  Setup.tblSetup K
+	 INNER JOIN setup.tblSetupAttributes E ON E.SetupID = K.SetupID
+	 INNER JOIN [Setup].[tblAttributes] I ON E.AttributeID = I.AttributeID
+	 INNER JOIN setup.tblProcessMachines B ON B.MachineID = K.MachineID
+	 AND B.ProcessID = E.ProcessID
+	 WHERE I.AttributeName LIKE 'LINESPEED' 
+	  --and K.IneffectiveDate > GETDATE() 
+	  AND I.AttrIneffectiveDate > GETDATE()
+	 AND e.IneffectiveDate > GETDATE() --AND E.ProcessID NOT IN (510,523,615,850)
+	 AND b.Active <> 0 AND K.IneffectiveDate >= GETDATE()
+	 
+
+
+
+
+
+
+
+
+
+
+GO
diff --git a/Views/Setup.vMachineAttributes.sql b/Views/Setup.vMachineAttributes.sql
new file mode 100644
index 0000000..25c023a
--- /dev/null
+++ b/Views/Setup.vMachineAttributes.sql
@@ -0,0 +1,29 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+
+
+
+
+
+
+
+CREATE VIEW [Setup].[vMachineAttributes]
+AS
+SELECT        Setup.ApsSetupAttributes.AttributeName, Setup.MachineGroupAttributes.LogicType, Setup.ApsSetupAttributeValueType.ValueTypeName, 
+                         Setup.ApsSetupAttributeValueType.ValueTypeDescription, Setup.MachineGroup.MachineGroupName, 
+                         Setup.MachineGroupAttributes.ValueTypeID, Setup.MachineGroupAttributes.AttributeNameID, Setup.MachineGroupAttributes.MachineGroupID,
+						 setup.MachineGroupAttributes.ApsData, MachineID, MachineGroupAttributes.PassToAps
+FROM            Setup.ApsSetupAttributes INNER JOIN
+                         Setup.MachineGroupAttributes ON Setup.ApsSetupAttributes.AttributeNameID = Setup.MachineGroupAttributes.AttributeNameID INNER JOIN
+                         Setup.ApsSetupAttributeValueType ON Setup.MachineGroupAttributes.ValueTypeID = Setup.ApsSetupAttributeValueType.ValueTypeID INNER JOIN
+                         Setup.MachineGroup ON Setup.MachineGroupAttributes.MachineGroupID = Setup.MachineGroup.MachineGroupID INNER JOIN
+                         Setup.MachineNames ON Setup.MachineGroup.MachineGroupID = Setup.MachineNames.MachineGroupID
+
+
+
+
+
+
+GO
diff --git a/Views/Setup.vMachineCapability.sql b/Views/Setup.vMachineCapability.sql
new file mode 100644
index 0000000..918aa41
--- /dev/null
+++ b/Views/Setup.vMachineCapability.sql
@@ -0,0 +1,33 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+
+
+
+
+
+
+
+
+
+
+
+CREATE VIEW [Setup].[vMachineCapability] 
+AS
+SELECT  SetupNumber AS Setup, I.MachineID--, T.PssMachineID
+FROM Setup.vInterfaceMachineCapability K
+INNER JOIN setup.MachineReference T ON T.PssMachineID = K.PssMachineID AND k.PssProcessID = t.PssProcessID
+INNER JOIN setup.MachineNames I ON T.MachineID = I.MachineID 
+WHERE   K.IneffectiveDate >= GETDATE()  AND K.Active <> 0 AND SetupNumber IS NOT NULL AND LEN(SetupNumber) > 0
+
+
+
+
+
+
+
+
+
+
+GO
diff --git a/Views/Setup.vMachineSetupAttributes.sql b/Views/Setup.vMachineSetupAttributes.sql
new file mode 100644
index 0000000..15e56cd
--- /dev/null
+++ b/Views/Setup.vMachineSetupAttributes.sql
@@ -0,0 +1,37 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+
+
+
+
+
+
+
+
+/* This view is designed to give values of 0 when the attribute does not appear in the Setup Attribute data.
+Use limited.  Only glue calculation is using this view at this time*/
+
+CREATE VIEW [Setup].[vMachineSetupAttributes]
+AS
+
+	SELECT     DISTINCT  p.Setup AS SetupNumber, I.AttributeValue, K.AttributeName SetupAttributeName, G.AttributeID, K.MachineID, G.AttributeNameID, I.AttributeName,
+				K.MachineGroupID, K.ValueTypeDescription, K.ValueTypeName, K.ValueTypeID, K.MachineGroupName
+	FROM            Setup.vMachineAttributes AS K INNER JOIN
+							 Setup.ApsSetupAttributeReference AS G ON G.AttributeNameID = K.AttributeNameID INNER JOIN
+							 Setup.vMachineCapability AS P ON P.machineID = K.machineID 
+							 INNER JOIN setup.MachineReference O ON O.MachineID = P.MachineID
+							 INNER JOIN Setup.vInterfaceSetupAttributes AS I ON G.AttributeID = I.AttributeID AND I.PssMachineID = O.PssMachineID AND I.SetupNumber = P.Setup AND O.PssProcessID = I.PssProcessID
+	--WHERE G.SourceID	= 1000  AND P.Setup LIKE '1701'--AND K.MachineName = 'sz07'--AND VALUETYPEID = 5--
+
+--AND cteSetup.SetupAttributeName = 'glue' AND cteSetup.PlanetTogetherMachineNumber = 'sz07'
+
+
+
+
+
+
+
+
+GO
diff --git a/Views/Setup.vMachineSetupAttributesNulls.sql b/Views/Setup.vMachineSetupAttributesNulls.sql
new file mode 100644
index 0000000..d9852c8
--- /dev/null
+++ b/Views/Setup.vMachineSetupAttributesNulls.sql
@@ -0,0 +1,36 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+
+
+
+
+
+
+
+
+
+
+/* This view is designed to give values of 0 when the attribute does not appear in the Setup Attribute data.
+Use limited.  Only glue calculation is using this view at this time*/
+
+CREATE VIEW [Setup].[vMachineSetupAttributesNulls]
+AS
+WITH cteSetup
+AS(
+	SELECT     DISTINCT  p.Setup AS SetupNumber, I.AttributeValue, K.AttributeName SetupAttributeName, G.AttributeID, K.MachineID, G.AttributeNameID, I.AttributeName,
+				K.MachineGroupID, K.ValueTypeDescription, K.ValueTypeName, K.ValueTypeID, K.MachineGroupName
+				,ROW_NUMBER() OVER (PARTITION BY p.Setup,G.AttributeNameID,
+				MachineGroupID, ValueTypeID, K.MachineGroupID, K.MachineID, G.AttributeID  ORDER BY P.SETUP,g.AttributeNameID, CASE WHEN I.AttributeValue IS NULL THEN 1 ELSE 0 END, EffectiveDate DESC ) AS RowNumber
+	FROM            Setup.vMachineAttributes AS K INNER JOIN
+							 Setup.ApsSetupAttributeReference AS G ON G.AttributeNameID = K.AttributeNameID INNER JOIN
+							 Setup.vMachineCapability AS P ON P.MachineID = K.MachineID 
+							 INNER JOIN SETUP.MachineReference O ON O.MachineID = K.MachineID
+							 LEFT JOIN Setup.vInterfaceSetupAttributes AS I ON G.AttributeID = I.AttributeID AND I.PssMachineID = O.PssMachineID AND I.SetupNumber = P.Setup AND O.PssProcessID = I.PssProcessID
+)
+SELECT *
+FROM cteSetup
+WHERE cteSetup.RowNumber = 1
+
+GO
diff --git a/Views/Setup.vMasterSetup.sql b/Views/Setup.vMasterSetup.sql
new file mode 100644
index 0000000..3a2d1f5
--- /dev/null
+++ b/Views/Setup.vMasterSetup.sql
@@ -0,0 +1,46 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+
+
+
+
+
+
+
+
+
+
+
+
+
+-- =============================================
+-- Author:      Bryan Eddy
+-- Create date: 7/25/2017
+-- Description: Get setup data from Setup DB for all machines
+-- =============================================
+
+CREATE VIEW [Setup].[vMasterSetup]
+AS
+
+SELECT DISTINCT K.SetupNumber,K.AttributeValue,K.AttributeNamE SetupAttributeName, K.AttributeID,G.AttributeNameID, P.AttributeName, I.MachineID, I.MachineName
+  FROM [Setup].vInterfaceSetupAttributes K INNER JOIN Setup.ApsSetupAttributeReference G ON K.AttributeID = G.AttributeID
+  INNER JOIN SETUP.ApsSetupAttributes P ON P.AttributeNameID = G.AttributeNameID
+  INNER JOIN SETUP.MachineReference O ON O.PssMachineID = K.PssMachineID AND O.PssProcessID = K.PssProcessID
+  INNER JOIN Setup.MachineNames I ON I.MachineID = o.MachineID
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+GO
diff --git a/Views/Setup.vMatrixSheathingArmor.sql b/Views/Setup.vMatrixSheathingArmor.sql
new file mode 100644
index 0000000..0a427bc
--- /dev/null
+++ b/Views/Setup.vMatrixSheathingArmor.sql
@@ -0,0 +1,23 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+
+
+
+
+
+CREATE VIEW [Setup].[vMatrixSheathingArmor]
+AS
+
+SELECT DISTINCT G.AttributeValue AS FromAttribute, k.AttributeValue AS ToAttribute,
+CASE WHEN G.AttributeValue = k.AttributeValue THEN 0
+	WHEN G.AttributeValue IS NULL AND k.AttributeValue IS NOT NULL THEN 120
+	WHEN  G.AttributeValue IS NULL AND k.AttributeValue IS  NULL THEN 0
+	WHEN  G.AttributeValue IS NOT NULL AND k.AttributeValue IS  NULL THEN 60
+	WHEN G.AttributeValue <> K.AttributeValue THEN 120
+	END AS Timevalue
+FROM setup.vMasterSetup K CROSS APPLY setup.vMasterSetup G 
+WHERE k.AttributeNameID = 1 AND g.AttributeNameID = 1 
+
+GO
diff --git a/Views/Setup.vMissingMaterialAttributes.sql b/Views/Setup.vMissingMaterialAttributes.sql
new file mode 100644
index 0000000..bd4181b
--- /dev/null
+++ b/Views/Setup.vMissingMaterialAttributes.sql
@@ -0,0 +1,35 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+
+
+/*
+Author:		Bryan Eddy
+Date:		1/8/2018
+Desc:		Identify materials missing item attributes (Oracle Specs for materials that identify what the material is)
+Verzion:	1
+Update:		Initial creation
+*/
+CREATE VIEW [Setup].[vMissingMaterialAttributes]
+as
+
+WITH cteMaterialPurchasingIndicators
+AS(
+	SELECT DISTINCT	  I.item_number, LEFT(I.item_number,3) AS MaterialPrefix, I.attribute_name, I.attribute_value
+	FROM            --Setup.ApsSetupAttributeReference AS K INNER JOIN
+                         Oracle_Item_Attributes AS I-- ON K.OracleAttribute = I.attribute_name INNER JOIN
+                         INNER JOIN Oracle_Items P ON P.item_number = I.item_number
+						 
+)
+SELECT DISTINCT K.item_number, K.inventory_item_status_code, K.purchase_category, I.MaterialPrefix, i.attribute_name--, I.attribute_value
+				, K.item_description
+FROM dbo.Oracle_Items K INNER JOIN cteMaterialPurchasingIndicators I ON LEFT(k.item_number,3) = i.MaterialPrefix
+	LEFT JOIN cteMaterialPurchasingIndicators O ON O.item_number = K.item_number
+	WHERE O.item_number IS NULL AND K.inventory_item_status_code <> 'OBSOLETE' AND K.make_buy = 'buy'AND I.MaterialPrefix NOT IN ('fbr','dns')
+	--AND I.attribute_name = 'MATERIAL TYPE'
+	--ORDER BY k.item_number
+
+
+
+GO
diff --git a/Views/Setup.vMissingSetups.sql b/Views/Setup.vMissingSetups.sql
new file mode 100644
index 0000000..f3bce7b
--- /dev/null
+++ b/Views/Setup.vMissingSetups.sql
@@ -0,0 +1,31 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+
+/*
+Author:			Bryan Eddy
+Date:			2/2/2018	
+Description:	Shows missing setups and associated items
+Version:		2
+Update:			Change to just std routes
+
+
+*/
+
+CREATE VIEW [Setup].[vMissingSetups]
+AS
+
+	SELECT    DISTINCT 
+	G.item_number Item,
+	true_operation_code AS Setup,
+	G.department_code,
+	G.alternate_routing_designator
+	FROM Setup.vSetupLineSpeed K RIGHT JOIN dbo.Oracle_Routes G ON G.true_operation_code = K.Setup 
+	LEFT JOIN Setup.DepartmentIndicator I ON I.department_code = G.department_code
+	INNER JOIN dbo.Oracle_Items P ON P.item_number = G.item_number
+	WHERE P.inventory_item_status_code NOT IN ('obsolete','CAB REVIEW') AND P.make_buy = 'MAKE' AND g.pass_to_aps ='Y'
+	AND I.department_code IS NULL AND G.true_operation_seq_num IS NOT NULL AND (K.MachineName IS NULL)-- OR K.LineSpeed = 0)
+
+
+GO
diff --git a/Views/Setup.vMissingSetupsDj.sql b/Views/Setup.vMissingSetupsDj.sql
new file mode 100644
index 0000000..e335b0d
--- /dev/null
+++ b/Views/Setup.vMissingSetupsDj.sql
@@ -0,0 +1,34 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+
+
+/*
+Author:			Bryan Eddy
+Date:			2/2/2018	
+Description:	Shows missing setups and associated items
+Version:		2
+Update:			Change to just std routes
+
+
+*/
+
+CREATE VIEW [Setup].[vMissingSetupsDj]
+AS
+
+	SELECT    DISTINCT 
+	G.assembly_item Item,
+	true_operation_code AS Setup
+	,G.wip_entity_name
+	, conc_order_number
+	,G.operation_seq_num
+	FROM Setup.vSetupLineSpeed K RIGHT JOIN dbo.Oracle_DJ_Routes G ON G.true_operation_code = K.Setup 
+	LEFT JOIN Setup.DepartmentIndicator I ON I.department_code = G.department_code
+	INNER JOIN dbo.Oracle_Items P ON P.item_number = G.assembly_item
+	INNER JOIN dbo.Oracle_Orders ON parent_dj_number = wip_entity_name
+	WHERE P.inventory_item_status_code NOT IN ('obsolete','CAB REVIEW') AND P.make_buy = 'MAKE' AND g.send_to_aps ='Y'
+	AND I.department_code IS NULL AND G.true_operation_seq_num IS NOT NULL AND (K.MachineName IS NULL)-- OR K.LineSpeed = 0)
+
+
+GO
diff --git a/Views/Setup.vRoutesUnion.sql b/Views/Setup.vRoutesUnion.sql
new file mode 100644
index 0000000..f463bdf
--- /dev/null
+++ b/Views/Setup.vRoutesUnion.sql
@@ -0,0 +1,32 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+
+
+
+
+
+
+
+
+/*
+Author:		Bryan Eddy
+Date:		2/5/2018
+Desc:		Union of both routes for 
+Version:	1
+Update:		Initial creation
+*/
+
+CREATE VIEW [Setup].[vRoutesUnion]
+AS 
+
+SELECT item_number, true_operation_code, true_operation_seq_num, alternate_routing_designator, pass_to_aps, department_code, item_description, operation_seq_num, operation_code, '1' AS wip_entity_name
+FROM dbo.Oracle_Routes
+
+
+UNION
+
+SELECT assembly_item, true_operation_code, true_operation_seq_num, 'Primary', send_to_aps, department_code, assembly_description, operation_seq_num, operation_code, wip_entity_name
+FROM dbo.Oracle_DJ_Routes
+GO
diff --git a/Views/Setup.vSetupLineSpeed.sql b/Views/Setup.vSetupLineSpeed.sql
new file mode 100644
index 0000000..dfb1181
--- /dev/null
+++ b/Views/Setup.vSetupLineSpeed.sql
@@ -0,0 +1,69 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+
+
+
+
+
+
+/* 
+	Author:			Bryan Eddy
+	Date:			7/7/2017	
+	Description:	View created to pull line speeds from Setup Database to supply to Scheduling for Run Speeds						
+	Version:		2
+	Update:			Add Routing DJ for PT to pick up line speeds for DJ's routes that differ from standard routes
+	
+	*/
+
+
+CREATE VIEW [Setup].[vSetupLineSpeed]
+	AS
+
+
+ WITH cteSetupLineSpeed(OperationCode,LineSpeed, SetupDesc, MachineID, RowNumber, RunTypeID)
+ AS(
+
+	 SELECT K.SetupNumber,AttributeValue AS LineSpeed, k.SetupDesc, I.MachineID,
+	ROW_NUMBER() OVER (PARTITION BY K.SetupNumber,I.MachineID ORDER BY K.SetupNumber,I.MachineID,AttributeValue  DESC ) AS RowNumber, 2
+	 FROM  Setup.vInterfaceSetupLineSpeed k INNER JOIN SETUP.MachineReference I ON I.PssMachineID = K.PssMachineID AND i.PssProcessID = k.PssProcessID
+	 WHERE ISNUMERIC(AttributeValue) = 1 AND k.SetupNumber NOT IN ('CH01','CH02')
+	 UNION
+	 SELECT G.True_Operation_Code, G.Time_Minutes,  G.Description, G.MachineID, 1, G.RunTypeID
+	 FROM Scheduling.DefinedOperationDuration G
+	),
+
+cteRoute
+AS(
+
+	SELECT DISTINCT k.item_number Item ,true_operation_seq_num,'Route' AS SetupLocation
+	,true_operation_code, pass_to_aps
+	, alternate_routing_designator Alternate
+	FROM Oracle_Routes K 
+	UNION
+	SELECT DISTINCT k.assembly_item Item ,true_operation_seq_num,'Route' AS SetupLocation
+	,true_operation_code, K.send_to_aps
+	, NULL AS Alternate
+	FROM dbo.Oracle_DJ_Routes K 
+
+),
+cteLineSpeeds
+	AS(
+	SELECT DISTINCT cteRoute.Item,CAST(LineSpeed AS FLOAT)  AS LineSpeed,cteSetupLineSpeed.MachineID,
+	cteRoute.true_operation_code AS Setup,SetupDesc,  true_operation_seq_num
+	,COALESCE(cteRoute.Alternate,'Primary') AS PrimaryAlt, CASE WHEN pass_to_aps IN ('Y','D') THEN 'Y' ELSE pass_to_aps END pass_to_aps, cteSetupLineSpeed.RunTypeID AS RunTypeID
+	,ROW_NUMBER() OVER (PARTITION BY cteRoute.Item,cteRoute.true_operation_code,cteSetupLineSpeed.MachineID ORDER BY cteRoute.Item,cteRoute.true_operation_code,cteSetupLineSpeed.MachineID,CAST(LineSpeed AS FLOAT)  DESC ) AS RowNumber
+	FROM cteRoute LEFT JOIN cteSetupLineSpeed ON cteRoute.true_operation_code = cteSetupLineSpeed.OperationCode
+	WHERE COALESCE(cteSetupLineSpeed.RowNumber,1) = 1 
+)
+SELECT Item, LineSpeed, G.MachineID,G.Setup, SetupDesc, true_operation_seq_num, PrimaryAlt, pass_to_aps, RunTypeID, MachineName--, G.RowNumber
+FROM cteLineSpeeds G INNER JOIN Scheduling.MachineCapabilityScheduler K ON G.MachineID = K.MachineID AND G.Setup = K.Setup
+INNER JOIN Setup.MachineNames P ON P.MachineID = G.MachineID
+WHERE K.ActiveScheduling = 1 AND G.RowNumber = 1 --AND G.Item = 'DNA-7645'
+--ORDER BY G.Item
+
+
+
+
+GO
diff --git a/Views/Setup.vSetupStatus.sql b/Views/Setup.vSetupStatus.sql
new file mode 100644
index 0000000..dfebf03
--- /dev/null
+++ b/Views/Setup.vSetupStatus.sql
@@ -0,0 +1,35 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+
+
+
+
+/*Bryan Eddy
+11/1/2017
+View of PSS DB's status of each setup for each line. */
+
+CREATE VIEW [Setup].[vSetupStatus]
+AS
+WITH cteActiveSetups
+AS (
+	SELECT Setup,MachineID, CASE WHEN Setups.Active = 0 THEN 0 ELSE 1 END ActiveSetup--,  Active, X.CountOf,
+	FROM(
+		SELECT DISTINCT Setup,p.MachineID, SUM(CASE WHEN ineffectivedate < GETDATE() THEN 0 ELSE 1 END) Active, COUNT(*) AS CountOf --,ineffectivedate
+		FROM setup.vInterfaceAllMachineSetups E INNER JOIN SETUP.MachineReference p ON p.PssMachineID = e.PssMachineID and p.PssProcessID = e.PssProcessID
+		 --INNER JOIN setup.MachineNames G ON G.MachineID = P.PssMachineID
+		GROUP BY Setup,p.MachineID
+		HAVING p.MachineID IS NOT NULL AND setup IS NOT NULL
+	   )Setups
+)
+--INSERT INTO [Scheduling].[MachineCapabilityScheduler](Setup, MachineName, ActiveScheduling)
+SELECT cteActiveSetups.Setup, cteActiveSetups.MachineID, cteActiveSetups.ActiveSetup
+FROM cteActiveSetups
+LEFT JOIN [Scheduling].[MachineCapabilityScheduler] G  ON G.Setup = cteActiveSetups.Setup AND g.MachineID = cteActiveSetups.MachineID
+--WHERE g.Setup IS NULL
+
+
+
+
+GO
diff --git a/Views/Setup.vSetupStatusAll.sql b/Views/Setup.vSetupStatusAll.sql
new file mode 100644
index 0000000..bbc9cee
--- /dev/null
+++ b/Views/Setup.vSetupStatusAll.sql
@@ -0,0 +1,48 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+
+
+
+
+
+
+
+
+
+
+
+/****** Script for SelectTopNRows command from SSMS  ******/
+CREATE VIEW [Setup].[vSetupStatusAll]
+AS
+SELECT  Item_Number
+		,K.[Setup]
+		,AttributeName
+		,k.AttributeNameID
+      ,[SetupAttributeValue]
+      ,[SetupTime]
+	  ,V.ValueTypeID
+	  ,ValueTypeName
+	  ,ValueTypeDescription	
+	  ,LogicType
+	  ,ApsData
+	  ,K.MachineID
+  FROM [Setup].AttributeSetupTimeItem K
+  INNER JOIN setup.MachineGroupAttributes G ON K.MachineGroupID = G.MachineGroupID AND G.AttributeNameID = K.AttributeNameID
+  INNER JOIN SETUP.ApsSetupAttributeValueType V ON V.ValueTypeID = G.ValueTypeID
+  INNER JOIN Setup.ApsSetupAttributes A ON A.AttributeNameID = G.AttributeNameID
+
+
+ 
+
+
+
+
+
+
+
+
+
+
+GO
diff --git a/Views/Setup.vSetupTimes.sql b/Views/Setup.vSetupTimes.sql
new file mode 100644
index 0000000..07a256c
--- /dev/null
+++ b/Views/Setup.vSetupTimes.sql
@@ -0,0 +1,36 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+
+
+
+
+
+
+/****** Script for SelectTopNRows command from SSMS  ******/
+CREATE VIEW [Setup].[vSetupTimes]
+AS
+SELECT  [Setup]
+		,AttributeName
+		,k.AttributeNameID
+      ,[SetupAttributeValue]
+      ,[SetupTime]
+      ,MachineName
+	  ,V.ValueTypeID
+	  ,ValueTypeName
+	  ,ValueTypeDescription	
+	  ,LogicType
+	  ,G.MachineGroupID
+	  ,K.MachineID
+  FROM [Setup].AttributeSetupTime K
+  INNER JOIN setup.MachineGroupAttributes G ON K.MachineGroupID = G.MachineGroupID AND G.AttributeNameID = K.AttributeNameID
+  INNER JOIN SETUP.ApsSetupAttributeValueType V ON V.ValueTypeID = G.ValueTypeID
+  INNER JOIN Setup.ApsSetupAttributes A ON A.AttributeNameID = G.AttributeNameID
+   INNER JOIN Setup.MachineNames E ON E.MachineID = K.MachineID
+
+
+
+
+
+GO
diff --git a/Views/Setup.vSetupTimesItem.sql b/Views/Setup.vSetupTimesItem.sql
new file mode 100644
index 0000000..eefaa2a
--- /dev/null
+++ b/Views/Setup.vSetupTimesItem.sql
@@ -0,0 +1,54 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+
+
+
+
+
+
+/*
+Author:		Bryan Eddy
+Desc:		Interface view with PlanetTogether.  Only passes setups the scheduler chooses and informationw we want to pass to PlanetTogether (APS).
+Date:		4/23/2018	
+Version:	2
+Update:		Added MachineGroupID to the fields displayed
+
+*/
+
+
+
+/****** Script for SelectTopNRows command from SSMS  ******/
+CREATE VIEW [Setup].[vSetupTimesItem]
+AS
+SELECT  Item_Number
+		,K.[Setup]
+		,AttributeName
+		,k.AttributeNameID
+      ,[SetupAttributeValue]
+      ,[SetupTime]
+      ,MachineName
+	  ,V.ValueTypeID
+	  ,ValueTypeName
+	  ,ValueTypeDescription	
+	  ,LogicType
+	  ,ApsData
+	  ,I.MachineID
+	  ,E.MachineGroupID
+  FROM [Setup].AttributeSetupTimeItem K
+  INNER JOIN setup.MachineGroupAttributes G ON K.MachineGroupID = G.MachineGroupID AND G.AttributeNameID = K.AttributeNameID
+  INNER JOIN SETUP.ApsSetupAttributeValueType V ON V.ValueTypeID = G.ValueTypeID
+  INNER JOIN Setup.ApsSetupAttributes A ON A.AttributeNameID = G.AttributeNameID
+  INNER JOIN Scheduling.MachineCapabilityScheduler I ON I.MachineID = K.MachineID AND I.Setup = K.Setup
+  INNER JOIN Setup.MachineNames E ON E.MachineID = I.MachineID
+  WHERE I.ActiveScheduling = 1 AND g.PassToAps = 1
+ 
+
+
+
+
+
+
+
+GO
